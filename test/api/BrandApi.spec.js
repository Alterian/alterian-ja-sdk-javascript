/**
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.JourneyAnalyticsApi);
  }
}(this, function(expect, JourneyAnalyticsApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new JourneyAnalyticsApi.BrandApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('BrandApi', function() {
    describe('addLoginImpersonation', function() {
      it('should call addLoginImpersonation successfully', function(done) {
        //uncomment below and update the code to test addLoginImpersonation
        //instance.addLoginImpersonation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addUserToBrands', function() {
      it('should call addUserToBrands successfully', function(done) {
        //uncomment below and update the code to test addUserToBrands
        //instance.addUserToBrands(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getBrandToken', function() {
      it('should call getBrandToken successfully', function(done) {
        //uncomment below and update the code to test getBrandToken
        //instance.getBrandToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getBrands', function() {
      it('should call getBrands successfully', function(done) {
        //uncomment below and update the code to test getBrands
        //instance.getBrands(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLoginBrandDefault', function() {
      it('should call getLoginBrandDefault successfully', function(done) {
        //uncomment below and update the code to test getLoginBrandDefault
        //instance.getLoginBrandDefault(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLoginUserMapping', function() {
      it('should call getLoginUserMapping successfully', function(done) {
        //uncomment below and update the code to test getLoginUserMapping
        //instance.getLoginUserMapping(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTokenDetails', function() {
      it('should call getTokenDetails successfully', function(done) {
        //uncomment below and update the code to test getTokenDetails
        //instance.getTokenDetails(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeLoginBrandDefault', function() {
      it('should call removeLoginBrandDefault successfully', function(done) {
        //uncomment below and update the code to test removeLoginBrandDefault
        //instance.removeLoginBrandDefault(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeLoginImpersonation', function() {
      it('should call removeLoginImpersonation successfully', function(done) {
        //uncomment below and update the code to test removeLoginImpersonation
        //instance.removeLoginImpersonation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeLoginUserMapping', function() {
      it('should call removeLoginUserMapping successfully', function(done) {
        //uncomment below and update the code to test removeLoginUserMapping
        //instance.removeLoginUserMapping(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setLoginBrandDefault', function() {
      it('should call setLoginBrandDefault successfully', function(done) {
        //uncomment below and update the code to test setLoginBrandDefault
        //instance.setLoginBrandDefault(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setLoginUserMapping', function() {
      it('should call setLoginUserMapping successfully', function(done) {
        //uncomment below and update the code to test setLoginUserMapping
        //instance.setLoginUserMapping(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
