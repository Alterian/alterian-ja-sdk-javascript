/**
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.JourneyAnalyticsApi);
  }
}(this, function(expect, JourneyAnalyticsApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new JourneyAnalyticsApi.EmailManagerMappingApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('EmailManagerMappingApi', function() {
    describe('createEMMapping', function() {
      it('should call createEMMapping successfully', function(done) {
        //uncomment below and update the code to test createEMMapping
        //instance.createEMMapping(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createEMSession', function() {
      it('should call createEMSession successfully', function(done) {
        //uncomment below and update the code to test createEMSession
        //instance.createEMSession(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteEMMapping', function() {
      it('should call deleteEMMapping successfully', function(done) {
        //uncomment below and update the code to test deleteEMMapping
        //instance.deleteEMMapping(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEMDownloadMappings', function() {
      it('should call getEMDownloadMappings successfully', function(done) {
        //uncomment below and update the code to test getEMDownloadMappings
        //instance.getEMDownloadMappings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEMMapping', function() {
      it('should call getEMMapping successfully', function(done) {
        //uncomment below and update the code to test getEMMapping
        //instance.getEMMapping(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEMMappings', function() {
      it('should call getEMMappings successfully', function(done) {
        //uncomment below and update the code to test getEMMappings
        //instance.getEMMappings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('moveEMMapping', function() {
      it('should call moveEMMapping successfully', function(done) {
        //uncomment below and update the code to test moveEMMapping
        //instance.moveEMMapping(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('renameEMMapping', function() {
      it('should call renameEMMapping successfully', function(done) {
        //uncomment below and update the code to test renameEMMapping
        //instance.renameEMMapping(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateEMMapping', function() {
      it('should call updateEMMapping successfully', function(done) {
        //uncomment below and update the code to test updateEMMapping
        //instance.updateEMMapping(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
