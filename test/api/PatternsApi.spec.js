/**
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.JourneyAnalyticsApi);
  }
}(this, function(expect, JourneyAnalyticsApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new JourneyAnalyticsApi.PatternsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PatternsApi', function() {
    describe('createPattern', function() {
      it('should call createPattern successfully', function(done) {
        //uncomment below and update the code to test createPattern
        //instance.createPattern(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createPatternTasks', function() {
      it('should call createPatternTasks successfully', function(done) {
        //uncomment below and update the code to test createPatternTasks
        //instance.createPatternTasks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deletePattern', function() {
      it('should call deletePattern successfully', function(done) {
        //uncomment below and update the code to test deletePattern
        //instance.deletePattern(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPattern', function() {
      it('should call getPattern successfully', function(done) {
        //uncomment below and update the code to test getPattern
        //instance.getPattern(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPatternRecords', function() {
      it('should call getPatternRecords successfully', function(done) {
        //uncomment below and update the code to test getPatternRecords
        //instance.getPatternRecords(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPatternTasks', function() {
      it('should call getPatternTasks successfully', function(done) {
        //uncomment below and update the code to test getPatternTasks
        //instance.getPatternTasks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPatterns', function() {
      it('should call getPatterns successfully', function(done) {
        //uncomment below and update the code to test getPatterns
        //instance.getPatterns(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRepeatingPatternItemScores', function() {
      it('should call getRepeatingPatternItemScores successfully', function(done) {
        //uncomment below and update the code to test getRepeatingPatternItemScores
        //instance.getRepeatingPatternItemScores(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRepeatingPatternItems', function() {
      it('should call getRepeatingPatternItems successfully', function(done) {
        //uncomment below and update the code to test getRepeatingPatternItems
        //instance.getRepeatingPatternItems(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('requestCancelPatternTasks', function() {
      it('should call requestCancelPatternTasks successfully', function(done) {
        //uncomment below and update the code to test requestCancelPatternTasks
        //instance.requestCancelPatternTasks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updatePattern', function() {
      it('should call updatePattern successfully', function(done) {
        //uncomment below and update the code to test updatePattern
        //instance.updatePattern(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateRepeatingPatternItemScores', function() {
      it('should call updateRepeatingPatternItemScores successfully', function(done) {
        //uncomment below and update the code to test updateRepeatingPatternItemScores
        //instance.updateRepeatingPatternItemScores(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
