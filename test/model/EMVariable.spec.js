/**
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.JourneyAnalyticsApi);
  }
}(this, function(expect, JourneyAnalyticsApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new JourneyAnalyticsApi.EMVariable();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('EMVariable', function() {
    it('should create an instance of EMVariable', function() {
      // uncomment below and update the code to test EMVariable
      //var instance = new JourneyAnalyticsApi.EMVariable();
      //expect(instance).to.be.a(JourneyAnalyticsApi.EMVariable);
    });

    it('should have the property description (base name: "Description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new JourneyAnalyticsApi.EMVariable();
      //expect(instance).to.be();
    });

    it('should have the property sampleValue (base name: "SampleValue")', function() {
      // uncomment below and update the code to test the property sampleValue
      //var instance = new JourneyAnalyticsApi.EMVariable();
      //expect(instance).to.be();
    });

    it('should have the property useDefaultForSample (base name: "UseDefaultForSample")', function() {
      // uncomment below and update the code to test the property useDefaultForSample
      //var instance = new JourneyAnalyticsApi.EMVariable();
      //expect(instance).to.be();
    });

    it('should have the property usedBy (base name: "UsedBy")', function() {
      // uncomment below and update the code to test the property usedBy
      //var instance = new JourneyAnalyticsApi.EMVariable();
      //expect(instance).to.be();
    });

    it('should have the property created (base name: "Created")', function() {
      // uncomment below and update the code to test the property created
      //var instance = new JourneyAnalyticsApi.EMVariable();
      //expect(instance).to.be();
    });

    it('should have the property defaultField (base name: "DefaultField")', function() {
      // uncomment below and update the code to test the property defaultField
      //var instance = new JourneyAnalyticsApi.EMVariable();
      //expect(instance).to.be();
    });

    it('should have the property defaultValue (base name: "DefaultValue")', function() {
      // uncomment below and update the code to test the property defaultValue
      //var instance = new JourneyAnalyticsApi.EMVariable();
      //expect(instance).to.be();
    });

    it('should have the property editorType (base name: "EditorType")', function() {
      // uncomment below and update the code to test the property editorType
      //var instance = new JourneyAnalyticsApi.EMVariable();
      //expect(instance).to.be();
    });

    it('should have the property forceMap (base name: "ForceMap")', function() {
      // uncomment below and update the code to test the property forceMap
      //var instance = new JourneyAnalyticsApi.EMVariable();
      //expect(instance).to.be();
    });

    it('should have the property hidden (base name: "Hidden")', function() {
      // uncomment below and update the code to test the property hidden
      //var instance = new JourneyAnalyticsApi.EMVariable();
      //expect(instance).to.be();
    });

    it('should have the property ID (base name: "ID")', function() {
      // uncomment below and update the code to test the property ID
      //var instance = new JourneyAnalyticsApi.EMVariable();
      //expect(instance).to.be();
    });

    it('should have the property lookupCombo (base name: "LookupCombo")', function() {
      // uncomment below and update the code to test the property lookupCombo
      //var instance = new JourneyAnalyticsApi.EMVariable();
      //expect(instance).to.be();
    });

    it('should have the property lookupID (base name: "LookupID")', function() {
      // uncomment below and update the code to test the property lookupID
      //var instance = new JourneyAnalyticsApi.EMVariable();
      //expect(instance).to.be();
    });

    it('should have the property lookupResult (base name: "LookupResult")', function() {
      // uncomment below and update the code to test the property lookupResult
      //var instance = new JourneyAnalyticsApi.EMVariable();
      //expect(instance).to.be();
    });

    it('should have the property modified (base name: "Modified")', function() {
      // uncomment below and update the code to test the property modified
      //var instance = new JourneyAnalyticsApi.EMVariable();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "Name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new JourneyAnalyticsApi.EMVariable();
      //expect(instance).to.be();
    });

    it('should have the property parseName (base name: "ParseName")', function() {
      // uncomment below and update the code to test the property parseName
      //var instance = new JourneyAnalyticsApi.EMVariable();
      //expect(instance).to.be();
    });

    it('should have the property readonly (base name: "Readonly")', function() {
      // uncomment below and update the code to test the property readonly
      //var instance = new JourneyAnalyticsApi.EMVariable();
      //expect(instance).to.be();
    });

    it('should have the property required (base name: "Required")', function() {
      // uncomment below and update the code to test the property required
      //var instance = new JourneyAnalyticsApi.EMVariable();
      //expect(instance).to.be();
    });

    it('should have the property rowOrder (base name: "RowOrder")', function() {
      // uncomment below and update the code to test the property rowOrder
      //var instance = new JourneyAnalyticsApi.EMVariable();
      //expect(instance).to.be();
    });

    it('should have the property shared (base name: "Shared")', function() {
      // uncomment below and update the code to test the property shared
      //var instance = new JourneyAnalyticsApi.EMVariable();
      //expect(instance).to.be();
    });

    it('should have the property system (base name: "System")', function() {
      // uncomment below and update the code to test the property system
      //var instance = new JourneyAnalyticsApi.EMVariable();
      //expect(instance).to.be();
    });

    it('should have the property variableType (base name: "VariableType")', function() {
      // uncomment below and update the code to test the property variableType
      //var instance = new JourneyAnalyticsApi.EMVariable();
      //expect(instance).to.be();
    });

  });

}));
