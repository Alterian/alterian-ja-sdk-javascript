/**
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.JourneyAnalyticsApi);
  }
}(this, function(expect, JourneyAnalyticsApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new JourneyAnalyticsApi.EMDocument();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('EMDocument', function() {
    it('should create an instance of EMDocument', function() {
      // uncomment below and update the code to test EMDocument
      //var instance = new JourneyAnalyticsApi.EMDocument();
      //expect(instance).to.be.a(JourneyAnalyticsApi.EMDocument);
    });

    it('should have the property createdBy (base name: "CreatedBy")', function() {
      // uncomment below and update the code to test the property createdBy
      //var instance = new JourneyAnalyticsApi.EMDocument();
      //expect(instance).to.be();
    });

    it('should have the property createdDate (base name: "CreatedDate")', function() {
      // uncomment below and update the code to test the property createdDate
      //var instance = new JourneyAnalyticsApi.EMDocument();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "Description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new JourneyAnalyticsApi.EMDocument();
      //expect(instance).to.be();
    });

    it('should have the property folderID (base name: "FolderID")', function() {
      // uncomment below and update the code to test the property folderID
      //var instance = new JourneyAnalyticsApi.EMDocument();
      //expect(instance).to.be();
    });

    it('should have the property folderPath (base name: "FolderPath")', function() {
      // uncomment below and update the code to test the property folderPath
      //var instance = new JourneyAnalyticsApi.EMDocument();
      //expect(instance).to.be();
    });

    it('should have the property hasThumbnail (base name: "HasThumbnail")', function() {
      // uncomment below and update the code to test the property hasThumbnail
      //var instance = new JourneyAnalyticsApi.EMDocument();
      //expect(instance).to.be();
    });

    it('should have the property ID (base name: "ID")', function() {
      // uncomment below and update the code to test the property ID
      //var instance = new JourneyAnalyticsApi.EMDocument();
      //expect(instance).to.be();
    });

    it('should have the property lastActivityBy (base name: "LastActivityBy")', function() {
      // uncomment below and update the code to test the property lastActivityBy
      //var instance = new JourneyAnalyticsApi.EMDocument();
      //expect(instance).to.be();
    });

    it('should have the property lastActivityDate (base name: "LastActivityDate")', function() {
      // uncomment below and update the code to test the property lastActivityDate
      //var instance = new JourneyAnalyticsApi.EMDocument();
      //expect(instance).to.be();
    });

    it('should have the property lastActivityType (base name: "LastActivityType")', function() {
      // uncomment below and update the code to test the property lastActivityType
      //var instance = new JourneyAnalyticsApi.EMDocument();
      //expect(instance).to.be();
    });

    it('should have the property lastModifiedBy (base name: "LastModifiedBy")', function() {
      // uncomment below and update the code to test the property lastModifiedBy
      //var instance = new JourneyAnalyticsApi.EMDocument();
      //expect(instance).to.be();
    });

    it('should have the property lastModifiedDate (base name: "LastModifiedDate")', function() {
      // uncomment below and update the code to test the property lastModifiedDate
      //var instance = new JourneyAnalyticsApi.EMDocument();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "Name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new JourneyAnalyticsApi.EMDocument();
      //expect(instance).to.be();
    });

    it('should have the property sourceID (base name: "SourceID")', function() {
      // uncomment below and update the code to test the property sourceID
      //var instance = new JourneyAnalyticsApi.EMDocument();
      //expect(instance).to.be();
    });

    it('should have the property thumbnailPath (base name: "ThumbnailPath")', function() {
      // uncomment below and update the code to test the property thumbnailPath
      //var instance = new JourneyAnalyticsApi.EMDocument();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "Type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new JourneyAnalyticsApi.EMDocument();
      //expect(instance).to.be();
    });

  });

}));
