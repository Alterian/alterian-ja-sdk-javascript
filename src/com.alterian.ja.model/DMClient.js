/**
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DMClientSettings from './DMClientSettings';

/**
 * The DMClient model module.
 * @module com.alterian.ja.model/DMClient
 * @version 6.35.0
 */
class DMClient {
    /**
     * Constructs a new <code>DMClient</code>.
     * 
     * @alias module:com.alterian.ja.model/DMClient
     */
    constructor() { 
        
        DMClient.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DMClient</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:com.alterian.ja.model/DMClient} obj Optional instance to populate.
     * @return {module:com.alterian.ja.model/DMClient} The populated <code>DMClient</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DMClient();

            if (data.hasOwnProperty('ID')) {
                obj['ID'] = ApiClient.convertToType(data['ID'], 'Number');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('VirtualMTA')) {
                obj['VirtualMTA'] = ApiClient.convertToType(data['VirtualMTA'], 'String');
            }
            if (data.hasOwnProperty('ConnectionString')) {
                obj['ConnectionString'] = ApiClient.convertToType(data['ConnectionString'], 'String');
            }
            if (data.hasOwnProperty('HashTable')) {
                obj['HashTable'] = ApiClient.convertToType(data['HashTable'], 'String');
            }
            if (data.hasOwnProperty('ContentPath')) {
                obj['ContentPath'] = ApiClient.convertToType(data['ContentPath'], Object);
            }
            if (data.hasOwnProperty('ContentURL')) {
                obj['ContentURL'] = ApiClient.convertToType(data['ContentURL'], 'String');
            }
            if (data.hasOwnProperty('Seats')) {
                obj['Seats'] = ApiClient.convertToType(data['Seats'], 'Number');
            }
            if (data.hasOwnProperty('SetID')) {
                obj['SetID'] = ApiClient.convertToType(data['SetID'], 'Number');
            }
            if (data.hasOwnProperty('Icon')) {
                obj['Icon'] = ApiClient.convertToType(data['Icon'], 'String');
            }
            if (data.hasOwnProperty('ContentServerID')) {
                obj['ContentServerID'] = ApiClient.convertToType(data['ContentServerID'], 'Number');
            }
            if (data.hasOwnProperty('Directory')) {
                obj['Directory'] = ApiClient.convertToType(data['Directory'], 'String');
            }
            if (data.hasOwnProperty('DBServerID')) {
                obj['DBServerID'] = ApiClient.convertToType(data['DBServerID'], 'Number');
            }
            if (data.hasOwnProperty('DBName')) {
                obj['DBName'] = ApiClient.convertToType(data['DBName'], 'String');
            }
            if (data.hasOwnProperty('MTAServerID')) {
                obj['MTAServerID'] = ApiClient.convertToType(data['MTAServerID'], 'Number');
            }
            if (data.hasOwnProperty('DefaultDC')) {
                obj['DefaultDC'] = ApiClient.convertToType(data['DefaultDC'], 'Number');
            }
            if (data.hasOwnProperty('DeliveryContexts')) {
                obj['DeliveryContexts'] = ApiClient.convertToType(data['DeliveryContexts'], Object);
            }
            if (data.hasOwnProperty('Settings')) {
                obj['Settings'] = DMClientSettings.constructFromObject(data['Settings']);
            }
            if (data.hasOwnProperty('ImageBasePath')) {
                obj['ImageBasePath'] = ApiClient.convertToType(data['ImageBasePath'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DMClient</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DMClient</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['VirtualMTA'] && !(typeof data['VirtualMTA'] === 'string' || data['VirtualMTA'] instanceof String)) {
            throw new Error("Expected the field `VirtualMTA` to be a primitive type in the JSON string but got " + data['VirtualMTA']);
        }
        // ensure the json data is a string
        if (data['ConnectionString'] && !(typeof data['ConnectionString'] === 'string' || data['ConnectionString'] instanceof String)) {
            throw new Error("Expected the field `ConnectionString` to be a primitive type in the JSON string but got " + data['ConnectionString']);
        }
        // ensure the json data is a string
        if (data['HashTable'] && !(typeof data['HashTable'] === 'string' || data['HashTable'] instanceof String)) {
            throw new Error("Expected the field `HashTable` to be a primitive type in the JSON string but got " + data['HashTable']);
        }
        // ensure the json data is a string
        if (data['ContentURL'] && !(typeof data['ContentURL'] === 'string' || data['ContentURL'] instanceof String)) {
            throw new Error("Expected the field `ContentURL` to be a primitive type in the JSON string but got " + data['ContentURL']);
        }
        // ensure the json data is a string
        if (data['Icon'] && !(typeof data['Icon'] === 'string' || data['Icon'] instanceof String)) {
            throw new Error("Expected the field `Icon` to be a primitive type in the JSON string but got " + data['Icon']);
        }
        // ensure the json data is a string
        if (data['Directory'] && !(typeof data['Directory'] === 'string' || data['Directory'] instanceof String)) {
            throw new Error("Expected the field `Directory` to be a primitive type in the JSON string but got " + data['Directory']);
        }
        // ensure the json data is a string
        if (data['DBName'] && !(typeof data['DBName'] === 'string' || data['DBName'] instanceof String)) {
            throw new Error("Expected the field `DBName` to be a primitive type in the JSON string but got " + data['DBName']);
        }
        // validate the optional field `Settings`
        if (data['Settings']) { // data not null
          DMClientSettings.validateJSON(data['Settings']);
        }
        // ensure the json data is a string
        if (data['ImageBasePath'] && !(typeof data['ImageBasePath'] === 'string' || data['ImageBasePath'] instanceof String)) {
            throw new Error("Expected the field `ImageBasePath` to be a primitive type in the JSON string but got " + data['ImageBasePath']);
        }

        return true;
    }


}



/**
 * 
 * @member {Number} ID
 */
DMClient.prototype['ID'] = undefined;

/**
 * 
 * @member {String} Name
 */
DMClient.prototype['Name'] = undefined;

/**
 * 
 * @member {String} VirtualMTA
 */
DMClient.prototype['VirtualMTA'] = undefined;

/**
 * 
 * @member {String} ConnectionString
 */
DMClient.prototype['ConnectionString'] = undefined;

/**
 * 
 * @member {String} HashTable
 */
DMClient.prototype['HashTable'] = undefined;

/**
 * 
 * @member {Object} ContentPath
 */
DMClient.prototype['ContentPath'] = undefined;

/**
 * 
 * @member {String} ContentURL
 */
DMClient.prototype['ContentURL'] = undefined;

/**
 * 
 * @member {Number} Seats
 */
DMClient.prototype['Seats'] = undefined;

/**
 * 
 * @member {Number} SetID
 */
DMClient.prototype['SetID'] = undefined;

/**
 * 
 * @member {String} Icon
 */
DMClient.prototype['Icon'] = undefined;

/**
 * 
 * @member {Number} ContentServerID
 */
DMClient.prototype['ContentServerID'] = undefined;

/**
 * 
 * @member {String} Directory
 */
DMClient.prototype['Directory'] = undefined;

/**
 * 
 * @member {Number} DBServerID
 */
DMClient.prototype['DBServerID'] = undefined;

/**
 * 
 * @member {String} DBName
 */
DMClient.prototype['DBName'] = undefined;

/**
 * 
 * @member {Number} MTAServerID
 */
DMClient.prototype['MTAServerID'] = undefined;

/**
 * 
 * @member {Number} DefaultDC
 */
DMClient.prototype['DefaultDC'] = undefined;

/**
 * 
 * @member {Object} DeliveryContexts
 */
DMClient.prototype['DeliveryContexts'] = undefined;

/**
 * @member {module:com.alterian.ja.model/DMClientSettings} Settings
 */
DMClient.prototype['Settings'] = undefined;

/**
 * 
 * @member {String} ImageBasePath
 */
DMClient.prototype['ImageBasePath'] = undefined;






export default DMClient;

