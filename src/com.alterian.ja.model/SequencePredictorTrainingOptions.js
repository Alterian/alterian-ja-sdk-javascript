/**
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SequencePredictorTrainingOptions model module.
 * @module com.alterian.ja.model/SequencePredictorTrainingOptions
 * @version 6.35.0
 */
class SequencePredictorTrainingOptions {
    /**
     * Constructs a new <code>SequencePredictorTrainingOptions</code>.
     * 
     * @alias module:com.alterian.ja.model/SequencePredictorTrainingOptions
     */
    constructor() { 
        
        SequencePredictorTrainingOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SequencePredictorTrainingOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:com.alterian.ja.model/SequencePredictorTrainingOptions} obj Optional instance to populate.
     * @return {module:com.alterian.ja.model/SequencePredictorTrainingOptions} The populated <code>SequencePredictorTrainingOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SequencePredictorTrainingOptions();

            if (data.hasOwnProperty('ModelName')) {
                obj['ModelName'] = ApiClient.convertToType(data['ModelName'], 'String');
            }
            if (data.hasOwnProperty('TrainingRatio')) {
                obj['TrainingRatio'] = ApiClient.convertToType(data['TrainingRatio'], 'Number');
            }
            if (data.hasOwnProperty('EncodingPadMode')) {
                obj['EncodingPadMode'] = ApiClient.convertToType(data['EncodingPadMode'], 'Number');
            }
            if (data.hasOwnProperty('RandomSeed')) {
                obj['RandomSeed'] = ApiClient.convertToType(data['RandomSeed'], 'Number');
            }
            if (data.hasOwnProperty('EmbeddingLayerSize')) {
                obj['EmbeddingLayerSize'] = ApiClient.convertToType(data['EmbeddingLayerSize'], 'Number');
            }
            if (data.hasOwnProperty('LstmLayerSize')) {
                obj['LstmLayerSize'] = ApiClient.convertToType(data['LstmLayerSize'], 'Number');
            }
            if (data.hasOwnProperty('NumberOfEpochs')) {
                obj['NumberOfEpochs'] = ApiClient.convertToType(data['NumberOfEpochs'], 'Number');
            }
            if (data.hasOwnProperty('BatchSize')) {
                obj['BatchSize'] = ApiClient.convertToType(data['BatchSize'], 'Number');
            }
            if (data.hasOwnProperty('CategoricalFeatures')) {
                obj['CategoricalFeatures'] = ApiClient.convertToType(data['CategoricalFeatures'], ['String']);
            }
            if (data.hasOwnProperty('IsDataDebugRequired')) {
                obj['IsDataDebugRequired'] = ApiClient.convertToType(data['IsDataDebugRequired'], 'Boolean');
            }
            if (data.hasOwnProperty('IsCombineCategoriesRequired')) {
                obj['IsCombineCategoriesRequired'] = ApiClient.convertToType(data['IsCombineCategoriesRequired'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SequencePredictorTrainingOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SequencePredictorTrainingOptions</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['ModelName'] && !(typeof data['ModelName'] === 'string' || data['ModelName'] instanceof String)) {
            throw new Error("Expected the field `ModelName` to be a primitive type in the JSON string but got " + data['ModelName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['CategoricalFeatures'])) {
            throw new Error("Expected the field `CategoricalFeatures` to be an array in the JSON data but got " + data['CategoricalFeatures']);
        }

        return true;
    }


}



/**
 * Name for the generated model
 * @member {String} ModelName
 */
SequencePredictorTrainingOptions.prototype['ModelName'] = undefined;

/**
 * Percentage ratio of training examples to test examples
 * @member {Number} TrainingRatio
 */
SequencePredictorTrainingOptions.prototype['TrainingRatio'] = undefined;

/**
 * For shorter sequences, choose whether to pad with nulls on the left or right             1=left padding,2=right padding
 * @member {Number} EncodingPadMode
 */
SequencePredictorTrainingOptions.prototype['EncodingPadMode'] = undefined;

/**
 * Specify a random seed to initialise the random number generator with
 * @member {Number} RandomSeed
 */
SequencePredictorTrainingOptions.prototype['RandomSeed'] = undefined;

/**
 * Defines the number of output nodes the embedding layer has - defaults to dictionary size (number of distinct event names + 2)
 * @member {Number} EmbeddingLayerSize
 */
SequencePredictorTrainingOptions.prototype['EmbeddingLayerSize'] = undefined;

/**
 * Defines the number of units used in the LSTM layer (long short term memory)
 * @member {Number} LstmLayerSize
 */
SequencePredictorTrainingOptions.prototype['LstmLayerSize'] = undefined;

/**
 * Number of epochs that training will attempt (an epoch is an iteration of all training samples through the training process)
 * @member {Number} NumberOfEpochs
 */
SequencePredictorTrainingOptions.prototype['NumberOfEpochs'] = undefined;

/**
 * Number of training samples to include in a single model update                          The batch size influences the performance of training at the expense of accuracy. A lower batch size may produce a more accurate model, but will training more slowly, a large batch size has the opposite affect
 * @member {Number} BatchSize
 */
SequencePredictorTrainingOptions.prototype['BatchSize'] = undefined;

/**
 * Column names of any additional categorical features on the event stream table that are to be used in training e.g. Initiative (Location is implied)
 * @member {Array.<String>} CategoricalFeatures
 */
SequencePredictorTrainingOptions.prototype['CategoricalFeatures'] = undefined;

/**
 * Turn this on to leave intermediate tables in place for the purposes of debugging a model
 * @member {Boolean} IsDataDebugRequired
 */
SequencePredictorTrainingOptions.prototype['IsDataDebugRequired'] = undefined;

/**
 * Turn this on to combine categorical features into a single composite state and avoid generating mutually exclusive combinations
 * @member {Boolean} IsCombineCategoriesRequired
 */
SequencePredictorTrainingOptions.prototype['IsCombineCategoriesRequired'] = undefined;






export default SequencePredictorTrainingOptions;

