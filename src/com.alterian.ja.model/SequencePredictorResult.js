/**
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SequencePredictorResult model module.
 * @module com.alterian.ja.model/SequencePredictorResult
 * @version 6.35.0
 */
class SequencePredictorResult {
    /**
     * Constructs a new <code>SequencePredictorResult</code>.
     * 
     * @alias module:com.alterian.ja.model/SequencePredictorResult
     */
    constructor() { 
        
        SequencePredictorResult.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SequencePredictorResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:com.alterian.ja.model/SequencePredictorResult} obj Optional instance to populate.
     * @return {module:com.alterian.ja.model/SequencePredictorResult} The populated <code>SequencePredictorResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SequencePredictorResult();

            if (data.hasOwnProperty('ProcessQueueId')) {
                obj['ProcessQueueId'] = ApiClient.convertToType(data['ProcessQueueId'], 'Number');
            }
            if (data.hasOwnProperty('ModelId')) {
                obj['ModelId'] = ApiClient.convertToType(data['ModelId'], 'Number');
            }
            if (data.hasOwnProperty('EngineModelName')) {
                obj['EngineModelName'] = ApiClient.convertToType(data['EngineModelName'], 'String');
            }
            if (data.hasOwnProperty('ModelStatus')) {
                obj['ModelStatus'] = ApiClient.convertToType(data['ModelStatus'], 'String');
            }
            if (data.hasOwnProperty('TestAccuracy')) {
                obj['TestAccuracy'] = ApiClient.convertToType(data['TestAccuracy'], 'Number');
            }
            if (data.hasOwnProperty('TestlLoss')) {
                obj['TestlLoss'] = ApiClient.convertToType(data['TestlLoss'], 'Number');
            }
            if (data.hasOwnProperty('PredictionId')) {
                obj['PredictionId'] = ApiClient.convertToType(data['PredictionId'], 'Number');
            }
            if (data.hasOwnProperty('DataSourceId')) {
                obj['DataSourceId'] = ApiClient.convertToType(data['DataSourceId'], 'Number');
            }
            if (data.hasOwnProperty('DatabaseName')) {
                obj['DatabaseName'] = ApiClient.convertToType(data['DatabaseName'], 'String');
            }
            if (data.hasOwnProperty('TableName')) {
                obj['TableName'] = ApiClient.convertToType(data['TableName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SequencePredictorResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SequencePredictorResult</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['EngineModelName'] && !(typeof data['EngineModelName'] === 'string' || data['EngineModelName'] instanceof String)) {
            throw new Error("Expected the field `EngineModelName` to be a primitive type in the JSON string but got " + data['EngineModelName']);
        }
        // ensure the json data is a string
        if (data['ModelStatus'] && !(typeof data['ModelStatus'] === 'string' || data['ModelStatus'] instanceof String)) {
            throw new Error("Expected the field `ModelStatus` to be a primitive type in the JSON string but got " + data['ModelStatus']);
        }
        // ensure the json data is a string
        if (data['DatabaseName'] && !(typeof data['DatabaseName'] === 'string' || data['DatabaseName'] instanceof String)) {
            throw new Error("Expected the field `DatabaseName` to be a primitive type in the JSON string but got " + data['DatabaseName']);
        }
        // ensure the json data is a string
        if (data['TableName'] && !(typeof data['TableName'] === 'string' || data['TableName'] instanceof String)) {
            throw new Error("Expected the field `TableName` to be a primitive type in the JSON string but got " + data['TableName']);
        }

        return true;
    }


}



/**
 * When run asynchronously this ID can be passed to GetProcessStatus to check for completion
 * @member {Number} ProcessQueueId
 */
SequencePredictorResult.prototype['ProcessQueueId'] = undefined;

/**
 * ID for generated Model
 * @member {Number} ModelId
 */
SequencePredictorResult.prototype['ModelId'] = undefined;

/**
 * Name for generated Model in engine
 * @member {String} EngineModelName
 */
SequencePredictorResult.prototype['EngineModelName'] = undefined;

/**
 * XML summary of the results of the model build
 * @member {String} ModelStatus
 */
SequencePredictorResult.prototype['ModelStatus'] = undefined;

/**
 * Final test accuracy stat
 * @member {Number} TestAccuracy
 */
SequencePredictorResult.prototype['TestAccuracy'] = undefined;

/**
 * Final test loss stat
 * @member {Number} TestlLoss
 */
SequencePredictorResult.prototype['TestlLoss'] = undefined;

/**
 * ID for generated prediction
 * @member {Number} PredictionId
 */
SequencePredictorResult.prototype['PredictionId'] = undefined;

/**
 * Data source containing the prediction
 * @member {Number} DataSourceId
 */
SequencePredictorResult.prototype['DataSourceId'] = undefined;

/**
 * Database containing the prediction
 * @member {String} DatabaseName
 */
SequencePredictorResult.prototype['DatabaseName'] = undefined;

/**
 * Table containing the prediction
 * @member {String} TableName
 */
SequencePredictorResult.prototype['TableName'] = undefined;






export default SequencePredictorResult;

