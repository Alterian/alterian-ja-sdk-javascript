/**
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ALClient from './ALClient';

/**
 * The ALClientSet model module.
 * @module com.alterian.ja.model/ALClientSet
 * @version 6.35.0
 */
class ALClientSet {
    /**
     * Constructs a new <code>ALClientSet</code>.
     * A clientset is a logical collection of clients, for ease of management and navigation. All @see(ALClient)s must exist within exactly one clientset.             Clientsets cannot be nested, but clients can be moved between clientsets.
     * @alias module:com.alterian.ja.model/ALClientSet
     */
    constructor() { 
        
        ALClientSet.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ALClientSet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:com.alterian.ja.model/ALClientSet} obj Optional instance to populate.
     * @return {module:com.alterian.ja.model/ALClientSet} The populated <code>ALClientSet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ALClientSet();

            if (data.hasOwnProperty('ID')) {
                obj['ID'] = ApiClient.convertToType(data['ID'], 'Number');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Clients')) {
                obj['Clients'] = ApiClient.convertToType(data['Clients'], [ALClient]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ALClientSet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ALClientSet</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        if (data['Clients']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Clients'])) {
                throw new Error("Expected the field `Clients` to be an array in the JSON data but got " + data['Clients']);
            }
            // validate the optional field `Clients` (array)
            for (const item of data['Clients']) {
                ALClient.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The ID of the clientset
 * @member {Number} ID
 */
ALClientSet.prototype['ID'] = undefined;

/**
 * The name of the clientset
 * @member {String} Name
 */
ALClientSet.prototype['Name'] = undefined;

/**
 * 
 * @member {Array.<module:com.alterian.ja.model/ALClient>} Clients
 */
ALClientSet.prototype['Clients'] = undefined;






export default ALClientSet;

