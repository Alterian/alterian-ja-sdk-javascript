/**
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TransformType from './TransformType';

/**
 * The ColumnPublishedTransformSummary model module.
 * @module com.alterian.ja.model/ColumnPublishedTransformSummary
 * @version 6.35.0
 */
class ColumnPublishedTransformSummary {
    /**
     * Constructs a new <code>ColumnPublishedTransformSummary</code>.
     * 
     * @alias module:com.alterian.ja.model/ColumnPublishedTransformSummary
     */
    constructor() { 
        
        ColumnPublishedTransformSummary.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ColumnPublishedTransformSummary</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:com.alterian.ja.model/ColumnPublishedTransformSummary} obj Optional instance to populate.
     * @return {module:com.alterian.ja.model/ColumnPublishedTransformSummary} The populated <code>ColumnPublishedTransformSummary</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ColumnPublishedTransformSummary();

            if (data.hasOwnProperty('ColumnName')) {
                obj['ColumnName'] = ApiClient.convertToType(data['ColumnName'], 'String');
            }
            if (data.hasOwnProperty('Alias')) {
                obj['Alias'] = ApiClient.convertToType(data['Alias'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('TransformName')) {
                obj['TransformName'] = ApiClient.convertToType(data['TransformName'], 'String');
            }
            if (data.hasOwnProperty('TransformType')) {
                obj['TransformType'] = TransformType.constructFromObject(data['TransformType']);
            }
            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'Number');
            }
            if (data.hasOwnProperty('TransformId')) {
                obj['TransformId'] = ApiClient.convertToType(data['TransformId'], 'Number');
            }
            if (data.hasOwnProperty('Version')) {
                obj['Version'] = ApiClient.convertToType(data['Version'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ColumnPublishedTransformSummary</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ColumnPublishedTransformSummary</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['ColumnName'] && !(typeof data['ColumnName'] === 'string' || data['ColumnName'] instanceof String)) {
            throw new Error("Expected the field `ColumnName` to be a primitive type in the JSON string but got " + data['ColumnName']);
        }
        // ensure the json data is a string
        if (data['Alias'] && !(typeof data['Alias'] === 'string' || data['Alias'] instanceof String)) {
            throw new Error("Expected the field `Alias` to be a primitive type in the JSON string but got " + data['Alias']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['TransformName'] && !(typeof data['TransformName'] === 'string' || data['TransformName'] instanceof String)) {
            throw new Error("Expected the field `TransformName` to be a primitive type in the JSON string but got " + data['TransformName']);
        }

        return true;
    }


}



/**
 * Column against which the transform was applied
 * @member {String} ColumnName
 */
ColumnPublishedTransformSummary.prototype['ColumnName'] = undefined;

/**
 * Alias that applies when the transform is applied to a column
 * @member {String} Alias
 */
ColumnPublishedTransformSummary.prototype['Alias'] = undefined;

/**
 * 
 * @member {String} Name
 */
ColumnPublishedTransformSummary.prototype['Name'] = undefined;

/**
 * 
 * @member {String} TransformName
 */
ColumnPublishedTransformSummary.prototype['TransformName'] = undefined;

/**
 * @member {module:com.alterian.ja.model/TransformType} TransformType
 */
ColumnPublishedTransformSummary.prototype['TransformType'] = undefined;

/**
 * Id of the Transform
 * @member {Number} Id
 */
ColumnPublishedTransformSummary.prototype['Id'] = undefined;

/**
 * 
 * @member {Number} TransformId
 */
ColumnPublishedTransformSummary.prototype['TransformId'] = undefined;

/**
 * Version of the Transform
 * @member {Number} Version
 */
ColumnPublishedTransformSummary.prototype['Version'] = undefined;






export default ColumnPublishedTransformSummary;

