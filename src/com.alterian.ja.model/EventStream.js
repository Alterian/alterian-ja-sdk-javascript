/**
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EventStreamField from './EventStreamField';
import EventStreamKey from './EventStreamKey';
import EventStreamModel from './EventStreamModel';
import Pattern from './Pattern';

/**
 * The EventStream model module.
 * @module com.alterian.ja.model/EventStream
 * @version 6.35.0
 */
class EventStream {
    /**
     * Constructs a new <code>EventStream</code>.
     * 
     * @alias module:com.alterian.ja.model/EventStream
     */
    constructor() { 
        
        EventStream.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EventStream</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:com.alterian.ja.model/EventStream} obj Optional instance to populate.
     * @return {module:com.alterian.ja.model/EventStream} The populated <code>EventStream</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventStream();

            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'Number');
            }
            if (data.hasOwnProperty('GroupId')) {
                obj['GroupId'] = ApiClient.convertToType(data['GroupId'], 'Number');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('DataSourceId')) {
                obj['DataSourceId'] = ApiClient.convertToType(data['DataSourceId'], 'Number');
            }
            if (data.hasOwnProperty('Table')) {
                obj['Table'] = ApiClient.convertToType(data['Table'], 'String');
            }
            if (data.hasOwnProperty('NumRows')) {
                obj['NumRows'] = ApiClient.convertToType(data['NumRows'], 'Number');
            }
            if (data.hasOwnProperty('IsFIFO')) {
                obj['IsFIFO'] = ApiClient.convertToType(data['IsFIFO'], 'Boolean');
            }
            if (data.hasOwnProperty('Keys')) {
                obj['Keys'] = ApiClient.convertToType(data['Keys'], [EventStreamKey]);
            }
            if (data.hasOwnProperty('Models')) {
                obj['Models'] = ApiClient.convertToType(data['Models'], [EventStreamModel]);
            }
            if (data.hasOwnProperty('DDEQueueName')) {
                obj['DDEQueueName'] = ApiClient.convertToType(data['DDEQueueName'], 'String');
            }
            if (data.hasOwnProperty('DDESiteId')) {
                obj['DDESiteId'] = ApiClient.convertToType(data['DDESiteId'], 'Number');
            }
            if (data.hasOwnProperty('CreationDate')) {
                obj['CreationDate'] = ApiClient.convertToType(data['CreationDate'], 'Date');
            }
            if (data.hasOwnProperty('QueueLockId')) {
                obj['QueueLockId'] = ApiClient.convertToType(data['QueueLockId'], 'String');
            }
            if (data.hasOwnProperty('DatabaseName')) {
                obj['DatabaseName'] = ApiClient.convertToType(data['DatabaseName'], 'String');
            }
            if (data.hasOwnProperty('DDEClient')) {
                obj['DDEClient'] = ApiClient.convertToType(data['DDEClient'], 'String');
            }
            if (data.hasOwnProperty('DDETarget')) {
                obj['DDETarget'] = ApiClient.convertToType(data['DDETarget'], 'String');
            }
            if (data.hasOwnProperty('Fields')) {
                obj['Fields'] = ApiClient.convertToType(data['Fields'], [EventStreamField]);
            }
            if (data.hasOwnProperty('Patterns')) {
                obj['Patterns'] = ApiClient.convertToType(data['Patterns'], [Pattern]);
            }
            if (data.hasOwnProperty('Status')) {
                obj['Status'] = ApiClient.convertToType(data['Status'], 'Number');
            }
            if (data.hasOwnProperty('QueueURL')) {
                obj['QueueURL'] = ApiClient.convertToType(data['QueueURL'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventStream</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventStream</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['Table'] && !(typeof data['Table'] === 'string' || data['Table'] instanceof String)) {
            throw new Error("Expected the field `Table` to be a primitive type in the JSON string but got " + data['Table']);
        }
        if (data['Keys']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Keys'])) {
                throw new Error("Expected the field `Keys` to be an array in the JSON data but got " + data['Keys']);
            }
            // validate the optional field `Keys` (array)
            for (const item of data['Keys']) {
                EventStreamKey.validateJSON(item);
            };
        }
        if (data['Models']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Models'])) {
                throw new Error("Expected the field `Models` to be an array in the JSON data but got " + data['Models']);
            }
            // validate the optional field `Models` (array)
            for (const item of data['Models']) {
                EventStreamModel.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['DDEQueueName'] && !(typeof data['DDEQueueName'] === 'string' || data['DDEQueueName'] instanceof String)) {
            throw new Error("Expected the field `DDEQueueName` to be a primitive type in the JSON string but got " + data['DDEQueueName']);
        }
        // ensure the json data is a string
        if (data['QueueLockId'] && !(typeof data['QueueLockId'] === 'string' || data['QueueLockId'] instanceof String)) {
            throw new Error("Expected the field `QueueLockId` to be a primitive type in the JSON string but got " + data['QueueLockId']);
        }
        // ensure the json data is a string
        if (data['DatabaseName'] && !(typeof data['DatabaseName'] === 'string' || data['DatabaseName'] instanceof String)) {
            throw new Error("Expected the field `DatabaseName` to be a primitive type in the JSON string but got " + data['DatabaseName']);
        }
        // ensure the json data is a string
        if (data['DDEClient'] && !(typeof data['DDEClient'] === 'string' || data['DDEClient'] instanceof String)) {
            throw new Error("Expected the field `DDEClient` to be a primitive type in the JSON string but got " + data['DDEClient']);
        }
        // ensure the json data is a string
        if (data['DDETarget'] && !(typeof data['DDETarget'] === 'string' || data['DDETarget'] instanceof String)) {
            throw new Error("Expected the field `DDETarget` to be a primitive type in the JSON string but got " + data['DDETarget']);
        }
        if (data['Fields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Fields'])) {
                throw new Error("Expected the field `Fields` to be an array in the JSON data but got " + data['Fields']);
            }
            // validate the optional field `Fields` (array)
            for (const item of data['Fields']) {
                EventStreamField.validateJSON(item);
            };
        }
        if (data['Patterns']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Patterns'])) {
                throw new Error("Expected the field `Patterns` to be an array in the JSON data but got " + data['Patterns']);
            }
            // validate the optional field `Patterns` (array)
            for (const item of data['Patterns']) {
                Pattern.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['QueueURL'] && !(typeof data['QueueURL'] === 'string' || data['QueueURL'] instanceof String)) {
            throw new Error("Expected the field `QueueURL` to be a primitive type in the JSON string but got " + data['QueueURL']);
        }

        return true;
    }


}



/**
 * 
 * @member {Number} Id
 */
EventStream.prototype['Id'] = undefined;

/**
 * 
 * @member {Number} GroupId
 */
EventStream.prototype['GroupId'] = undefined;

/**
 * 
 * @member {String} Name
 */
EventStream.prototype['Name'] = undefined;

/**
 * 
 * @member {Number} DataSourceId
 */
EventStream.prototype['DataSourceId'] = undefined;

/**
 * Returns back the full name of the table which stored the event stream information (includes the database name)
 * @member {String} Table
 */
EventStream.prototype['Table'] = undefined;

/**
 * 
 * @member {Number} NumRows
 */
EventStream.prototype['NumRows'] = undefined;

/**
 * 
 * @member {Boolean} IsFIFO
 */
EventStream.prototype['IsFIFO'] = undefined;

/**
 * 
 * @member {Array.<module:com.alterian.ja.model/EventStreamKey>} Keys
 */
EventStream.prototype['Keys'] = undefined;

/**
 * 
 * @member {Array.<module:com.alterian.ja.model/EventStreamModel>} Models
 */
EventStream.prototype['Models'] = undefined;

/**
 * 
 * @member {String} DDEQueueName
 */
EventStream.prototype['DDEQueueName'] = undefined;

/**
 * 
 * @member {Number} DDESiteId
 */
EventStream.prototype['DDESiteId'] = undefined;

/**
 * 
 * @member {Date} CreationDate
 */
EventStream.prototype['CreationDate'] = undefined;

/**
 * 
 * @member {String} QueueLockId
 */
EventStream.prototype['QueueLockId'] = undefined;

/**
 * 
 * @member {String} DatabaseName
 */
EventStream.prototype['DatabaseName'] = undefined;

/**
 * 
 * @member {String} DDEClient
 */
EventStream.prototype['DDEClient'] = undefined;

/**
 * 
 * @member {String} DDETarget
 */
EventStream.prototype['DDETarget'] = undefined;

/**
 * 
 * @member {Array.<module:com.alterian.ja.model/EventStreamField>} Fields
 */
EventStream.prototype['Fields'] = undefined;

/**
 * 
 * @member {Array.<module:com.alterian.ja.model/Pattern>} Patterns
 */
EventStream.prototype['Patterns'] = undefined;

/**
 * Quick status on the stream.  Currently 0 = created, -1 means there is a problem and 1 means the stream is pulling data
 * @member {Number} Status
 */
EventStream.prototype['Status'] = undefined;

/**
 * URL for the queue, based upon your DDE instance details
 * @member {String} QueueURL
 */
EventStream.prototype['QueueURL'] = undefined;






export default EventStream;

