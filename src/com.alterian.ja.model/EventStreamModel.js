/**
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EventStreamModel model module.
 * @module com.alterian.ja.model/EventStreamModel
 * @version 6.35.0
 */
class EventStreamModel {
    /**
     * Constructs a new <code>EventStreamModel</code>.
     * 
     * @alias module:com.alterian.ja.model/EventStreamModel
     */
    constructor() { 
        
        EventStreamModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EventStreamModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:com.alterian.ja.model/EventStreamModel} obj Optional instance to populate.
     * @return {module:com.alterian.ja.model/EventStreamModel} The populated <code>EventStreamModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventStreamModel();

            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'Number');
            }
            if (data.hasOwnProperty('QueueId')) {
                obj['QueueId'] = ApiClient.convertToType(data['QueueId'], 'Number');
            }
            if (data.hasOwnProperty('DatasourceId')) {
                obj['DatasourceId'] = ApiClient.convertToType(data['DatasourceId'], 'Number');
            }
            if (data.hasOwnProperty('UserId')) {
                obj['UserId'] = ApiClient.convertToType(data['UserId'], 'Number');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Started')) {
                obj['Started'] = ApiClient.convertToType(data['Started'], 'Date');
            }
            if (data.hasOwnProperty('Completed')) {
                obj['Completed'] = ApiClient.convertToType(data['Completed'], 'Date');
            }
            if (data.hasOwnProperty('TrainingOptions')) {
                obj['TrainingOptions'] = ApiClient.convertToType(data['TrainingOptions'], 'String');
            }
            if (data.hasOwnProperty('EngineModelName')) {
                obj['EngineModelName'] = ApiClient.convertToType(data['EngineModelName'], 'String');
            }
            if (data.hasOwnProperty('EngineModelConfig')) {
                obj['EngineModelConfig'] = ApiClient.convertToType(data['EngineModelConfig'], 'String');
            }
            if (data.hasOwnProperty('Status')) {
                obj['Status'] = ApiClient.convertToType(data['Status'], 'String');
            }
            if (data.hasOwnProperty('TestAccuracy')) {
                obj['TestAccuracy'] = ApiClient.convertToType(data['TestAccuracy'], 'Number');
            }
            if (data.hasOwnProperty('TestlLoss')) {
                obj['TestlLoss'] = ApiClient.convertToType(data['TestlLoss'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventStreamModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventStreamModel</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['TrainingOptions'] && !(typeof data['TrainingOptions'] === 'string' || data['TrainingOptions'] instanceof String)) {
            throw new Error("Expected the field `TrainingOptions` to be a primitive type in the JSON string but got " + data['TrainingOptions']);
        }
        // ensure the json data is a string
        if (data['EngineModelName'] && !(typeof data['EngineModelName'] === 'string' || data['EngineModelName'] instanceof String)) {
            throw new Error("Expected the field `EngineModelName` to be a primitive type in the JSON string but got " + data['EngineModelName']);
        }
        // ensure the json data is a string
        if (data['EngineModelConfig'] && !(typeof data['EngineModelConfig'] === 'string' || data['EngineModelConfig'] instanceof String)) {
            throw new Error("Expected the field `EngineModelConfig` to be a primitive type in the JSON string but got " + data['EngineModelConfig']);
        }
        // ensure the json data is a string
        if (data['Status'] && !(typeof data['Status'] === 'string' || data['Status'] instanceof String)) {
            throw new Error("Expected the field `Status` to be a primitive type in the JSON string but got " + data['Status']);
        }

        return true;
    }


}



/**
 * 
 * @member {Number} Id
 */
EventStreamModel.prototype['Id'] = undefined;

/**
 * 
 * @member {Number} QueueId
 */
EventStreamModel.prototype['QueueId'] = undefined;

/**
 * 
 * @member {Number} DatasourceId
 */
EventStreamModel.prototype['DatasourceId'] = undefined;

/**
 * 
 * @member {Number} UserId
 */
EventStreamModel.prototype['UserId'] = undefined;

/**
 * 
 * @member {String} Name
 */
EventStreamModel.prototype['Name'] = undefined;

/**
 * 
 * @member {Date} Started
 */
EventStreamModel.prototype['Started'] = undefined;

/**
 * 
 * @member {Date} Completed
 */
EventStreamModel.prototype['Completed'] = undefined;

/**
 * 
 * @member {String} TrainingOptions
 */
EventStreamModel.prototype['TrainingOptions'] = undefined;

/**
 * 
 * @member {String} EngineModelName
 */
EventStreamModel.prototype['EngineModelName'] = undefined;

/**
 * 
 * @member {String} EngineModelConfig
 */
EventStreamModel.prototype['EngineModelConfig'] = undefined;

/**
 * 
 * @member {String} Status
 */
EventStreamModel.prototype['Status'] = undefined;

/**
 * Final test accuracy stat
 * @member {Number} TestAccuracy
 */
EventStreamModel.prototype['TestAccuracy'] = undefined;

/**
 * Final test loss stat
 * @member {Number} TestlLoss
 */
EventStreamModel.prototype['TestlLoss'] = undefined;






export default EventStreamModel;

