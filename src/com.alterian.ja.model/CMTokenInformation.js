/**
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CMTokenInformation model module.
 * @module com.alterian.ja.model/CMTokenInformation
 * @version 6.35.0
 */
class CMTokenInformation {
    /**
     * Constructs a new <code>CMTokenInformation</code>.
     * Definition of a token for the CM system.  A token is a GUID which is passed to ALL calls into CM and this token typically has a @see(ALUser) assigned to it to enforce permissions.  Some methods require an SA [system admin] token to call.             Those calls which have permissions MUST have a user token provided.
     * @alias module:com.alterian.ja.model/CMTokenInformation
     */
    constructor() { 
        
        CMTokenInformation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CMTokenInformation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:com.alterian.ja.model/CMTokenInformation} obj Optional instance to populate.
     * @return {module:com.alterian.ja.model/CMTokenInformation} The populated <code>CMTokenInformation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CMTokenInformation();

            if (data.hasOwnProperty('ID')) {
                obj['ID'] = ApiClient.convertToType(data['ID'], 'Number');
            }
            if (data.hasOwnProperty('LoginID')) {
                obj['LoginID'] = ApiClient.convertToType(data['LoginID'], 'String');
            }
            if (data.hasOwnProperty('Token')) {
                obj['Token'] = ApiClient.convertToType(data['Token'], 'String');
            }
            if (data.hasOwnProperty('TimezoneID')) {
                obj['TimezoneID'] = ApiClient.convertToType(data['TimezoneID'], 'Number');
            }
            if (data.hasOwnProperty('UserID')) {
                obj['UserID'] = ApiClient.convertToType(data['UserID'], 'Number');
            }
            if (data.hasOwnProperty('ClientID')) {
                obj['ClientID'] = ApiClient.convertToType(data['ClientID'], 'Number');
            }
            if (data.hasOwnProperty('LastActivity')) {
                obj['LastActivity'] = ApiClient.convertToType(data['LastActivity'], 'Date');
            }
            if (data.hasOwnProperty('Created')) {
                obj['Created'] = ApiClient.convertToType(data['Created'], 'Date');
            }
            if (data.hasOwnProperty('Culture')) {
                obj['Culture'] = ApiClient.convertToType(data['Culture'], 'String');
            }
            if (data.hasOwnProperty('IsStatic')) {
                obj['IsStatic'] = ApiClient.convertToType(data['IsStatic'], 'Boolean');
            }
            if (data.hasOwnProperty('IsSAtoken')) {
                obj['IsSAtoken'] = ApiClient.convertToType(data['IsSAtoken'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CMTokenInformation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CMTokenInformation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['LoginID'] && !(typeof data['LoginID'] === 'string' || data['LoginID'] instanceof String)) {
            throw new Error("Expected the field `LoginID` to be a primitive type in the JSON string but got " + data['LoginID']);
        }
        // ensure the json data is a string
        if (data['Token'] && !(typeof data['Token'] === 'string' || data['Token'] instanceof String)) {
            throw new Error("Expected the field `Token` to be a primitive type in the JSON string but got " + data['Token']);
        }
        // ensure the json data is a string
        if (data['Culture'] && !(typeof data['Culture'] === 'string' || data['Culture'] instanceof String)) {
            throw new Error("Expected the field `Culture` to be a primitive type in the JSON string but got " + data['Culture']);
        }

        return true;
    }


}



/**
 * Internal ID of the token
 * @member {Number} ID
 */
CMTokenInformation.prototype['ID'] = undefined;

/**
 * Authentication system's login ID for this token [if applicable]
 * @member {String} LoginID
 */
CMTokenInformation.prototype['LoginID'] = undefined;

/**
 * Actual GUID of the token.  This is what you would use to pass to API methods.
 * @member {String} Token
 */
CMTokenInformation.prototype['Token'] = undefined;

/**
 * Timezone of the user associated with this token
 * @member {Number} TimezoneID
 */
CMTokenInformation.prototype['TimezoneID'] = undefined;

/**
 * User associated with this token
 * @member {Number} UserID
 */
CMTokenInformation.prototype['UserID'] = undefined;

/**
 * Client associated with this token
 * @member {Number} ClientID
 */
CMTokenInformation.prototype['ClientID'] = undefined;

/**
 * Last time this token was actually used for something
 * @member {Date} LastActivity
 */
CMTokenInformation.prototype['LastActivity'] = undefined;

/**
 * When this token was created
 * @member {Date} Created
 */
CMTokenInformation.prototype['Created'] = undefined;

/**
 * The culture of the user associated with this token
 * @member {String} Culture
 */
CMTokenInformation.prototype['Culture'] = undefined;

/**
 * Is this token a static token?  If so, it won't be purged as part of the normal purge process
 * @member {Boolean} IsStatic
 */
CMTokenInformation.prototype['IsStatic'] = undefined;

/**
 * Is this an SA token?  If so, it will have access to more system admin functions.
 * @member {Boolean} IsSAtoken
 */
CMTokenInformation.prototype['IsSAtoken'] = undefined;






export default CMTokenInformation;

