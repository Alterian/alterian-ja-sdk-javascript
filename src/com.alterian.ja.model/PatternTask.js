/**
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PatternTaskState from './PatternTaskState';
import PatternTaskType from './PatternTaskType';

/**
 * The PatternTask model module.
 * @module com.alterian.ja.model/PatternTask
 * @version 6.35.0
 */
class PatternTask {
    /**
     * Constructs a new <code>PatternTask</code>.
     * 
     * @alias module:com.alterian.ja.model/PatternTask
     */
    constructor() { 
        
        PatternTask.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PatternTask</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:com.alterian.ja.model/PatternTask} obj Optional instance to populate.
     * @return {module:com.alterian.ja.model/PatternTask} The populated <code>PatternTask</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PatternTask();

            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'Number');
            }
            if (data.hasOwnProperty('Created')) {
                obj['Created'] = ApiClient.convertToType(data['Created'], 'Date');
            }
            if (data.hasOwnProperty('Started')) {
                obj['Started'] = ApiClient.convertToType(data['Started'], 'Date');
            }
            if (data.hasOwnProperty('Finished')) {
                obj['Finished'] = ApiClient.convertToType(data['Finished'], 'Date');
            }
            if (data.hasOwnProperty('TaskType')) {
                obj['TaskType'] = PatternTaskType.constructFromObject(data['TaskType']);
            }
            if (data.hasOwnProperty('State')) {
                obj['State'] = PatternTaskState.constructFromObject(data['State']);
            }
            if (data.hasOwnProperty('LogText')) {
                obj['LogText'] = ApiClient.convertToType(data['LogText'], 'String');
            }
            if (data.hasOwnProperty('PatternId')) {
                obj['PatternId'] = ApiClient.convertToType(data['PatternId'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PatternTask</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PatternTask</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['LogText'] && !(typeof data['LogText'] === 'string' || data['LogText'] instanceof String)) {
            throw new Error("Expected the field `LogText` to be a primitive type in the JSON string but got " + data['LogText']);
        }

        return true;
    }


}



/**
 * 
 * @member {Number} Id
 */
PatternTask.prototype['Id'] = undefined;

/**
 * 
 * @member {Date} Created
 */
PatternTask.prototype['Created'] = undefined;

/**
 * 
 * @member {Date} Started
 */
PatternTask.prototype['Started'] = undefined;

/**
 * 
 * @member {Date} Finished
 */
PatternTask.prototype['Finished'] = undefined;

/**
 * @member {module:com.alterian.ja.model/PatternTaskType} TaskType
 */
PatternTask.prototype['TaskType'] = undefined;

/**
 * @member {module:com.alterian.ja.model/PatternTaskState} State
 */
PatternTask.prototype['State'] = undefined;

/**
 * 
 * @member {String} LogText
 */
PatternTask.prototype['LogText'] = undefined;

/**
 * 
 * @member {Number} PatternId
 */
PatternTask.prototype['PatternId'] = undefined;






export default PatternTask;

