/**
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ALDataSourceColumn from './ALDataSourceColumn';
import ALDatasourceJoin from './ALDatasourceJoin';
import ALDatasourceLink from './ALDatasourceLink';
import ALDatasourcePrimaryKey from './ALDatasourcePrimaryKey';
import DatasourceAttribute from './DatasourceAttribute';

/**
 * The ALDataSourceTable model module.
 * @module com.alterian.ja.model/ALDataSourceTable
 * @version 6.35.0
 */
class ALDataSourceTable {
    /**
     * Constructs a new <code>ALDataSourceTable</code>.
     * Contains information about a database table.
     * @alias module:com.alterian.ja.model/ALDataSourceTable
     */
    constructor() { 
        
        ALDataSourceTable.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ALDataSourceTable</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:com.alterian.ja.model/ALDataSourceTable} obj Optional instance to populate.
     * @return {module:com.alterian.ja.model/ALDataSourceTable} The populated <code>ALDataSourceTable</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ALDataSourceTable();

            if (data.hasOwnProperty('ID')) {
                obj['ID'] = ApiClient.convertToType(data['ID'], 'Number');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('NameEx')) {
                obj['NameEx'] = ApiClient.convertToType(data['NameEx'], 'String');
            }
            if (data.hasOwnProperty('Enabled')) {
                obj['Enabled'] = ApiClient.convertToType(data['Enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('Visible')) {
                obj['Visible'] = ApiClient.convertToType(data['Visible'], 'Boolean');
            }
            if (data.hasOwnProperty('AccessView')) {
                obj['AccessView'] = ApiClient.convertToType(data['AccessView'], 'Boolean');
            }
            if (data.hasOwnProperty('AccessModify')) {
                obj['AccessModify'] = ApiClient.convertToType(data['AccessModify'], 'Boolean');
            }
            if (data.hasOwnProperty('Attributes')) {
                obj['Attributes'] = ApiClient.convertToType(data['Attributes'], [DatasourceAttribute]);
            }
            if (data.hasOwnProperty('DatabaseID')) {
                obj['DatabaseID'] = ApiClient.convertToType(data['DatabaseID'], 'Number');
            }
            if (data.hasOwnProperty('NativeName')) {
                obj['NativeName'] = ApiClient.convertToType(data['NativeName'], 'String');
            }
            if (data.hasOwnProperty('Columns')) {
                obj['Columns'] = ApiClient.convertToType(data['Columns'], [ALDataSourceColumn]);
            }
            if (data.hasOwnProperty('DatasourceTypeID')) {
                obj['DatasourceTypeID'] = ApiClient.convertToType(data['DatasourceTypeID'], 'Number');
            }
            if (data.hasOwnProperty('PrimaryKey')) {
                obj['PrimaryKey'] = ALDatasourcePrimaryKey.constructFromObject(data['PrimaryKey']);
            }
            if (data.hasOwnProperty('ResolverTableID')) {
                obj['ResolverTableID'] = ApiClient.convertToType(data['ResolverTableID'], 'Number');
            }
            if (data.hasOwnProperty('Joins')) {
                obj['Joins'] = ApiClient.convertToType(data['Joins'], [ALDatasourceJoin]);
            }
            if (data.hasOwnProperty('Links')) {
                obj['Links'] = ApiClient.convertToType(data['Links'], [ALDatasourceLink]);
            }
            if (data.hasOwnProperty('FullNativeName')) {
                obj['FullNativeName'] = ApiClient.convertToType(data['FullNativeName'], 'String');
            }
            if (data.hasOwnProperty('DatasourceId')) {
                obj['DatasourceId'] = ApiClient.convertToType(data['DatasourceId'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ALDataSourceTable</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ALDataSourceTable</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['NameEx'] && !(typeof data['NameEx'] === 'string' || data['NameEx'] instanceof String)) {
            throw new Error("Expected the field `NameEx` to be a primitive type in the JSON string but got " + data['NameEx']);
        }
        if (data['Attributes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Attributes'])) {
                throw new Error("Expected the field `Attributes` to be an array in the JSON data but got " + data['Attributes']);
            }
            // validate the optional field `Attributes` (array)
            for (const item of data['Attributes']) {
                DatasourceAttribute.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['NativeName'] && !(typeof data['NativeName'] === 'string' || data['NativeName'] instanceof String)) {
            throw new Error("Expected the field `NativeName` to be a primitive type in the JSON string but got " + data['NativeName']);
        }
        if (data['Columns']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Columns'])) {
                throw new Error("Expected the field `Columns` to be an array in the JSON data but got " + data['Columns']);
            }
            // validate the optional field `Columns` (array)
            for (const item of data['Columns']) {
                ALDataSourceColumn.validateJSON(item);
            };
        }
        // validate the optional field `PrimaryKey`
        if (data['PrimaryKey']) { // data not null
          ALDatasourcePrimaryKey.validateJSON(data['PrimaryKey']);
        }
        if (data['Joins']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Joins'])) {
                throw new Error("Expected the field `Joins` to be an array in the JSON data but got " + data['Joins']);
            }
            // validate the optional field `Joins` (array)
            for (const item of data['Joins']) {
                ALDatasourceJoin.validateJSON(item);
            };
        }
        if (data['Links']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Links'])) {
                throw new Error("Expected the field `Links` to be an array in the JSON data but got " + data['Links']);
            }
            // validate the optional field `Links` (array)
            for (const item of data['Links']) {
                ALDatasourceLink.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['FullNativeName'] && !(typeof data['FullNativeName'] === 'string' || data['FullNativeName'] instanceof String)) {
            throw new Error("Expected the field `FullNativeName` to be a primitive type in the JSON string but got " + data['FullNativeName']);
        }

        return true;
    }


}



/**
 * Unique ID of the datasource
 * @member {Number} ID
 */
ALDataSourceTable.prototype['ID'] = undefined;

/**
 * Name of the datasource [must be unique]
 * @member {String} Name
 */
ALDataSourceTable.prototype['Name'] = undefined;

/**
 * Full name of this table, which includes in the datasource and the native name for the table in the pattern (datasource).[database].[table]
 * @member {String} NameEx
 */
ALDataSourceTable.prototype['NameEx'] = undefined;

/**
 * Whether or not this datasource is enabled
 * @member {Boolean} Enabled
 */
ALDataSourceTable.prototype['Enabled'] = undefined;

/**
 * Whether or not this datasource is visible
 * @member {Boolean} Visible
 */
ALDataSourceTable.prototype['Visible'] = undefined;

/**
 * Can the user view this datasource
 * @member {Boolean} AccessView
 */
ALDataSourceTable.prototype['AccessView'] = undefined;

/**
 * Not currently used
 * @member {Boolean} AccessModify
 */
ALDataSourceTable.prototype['AccessModify'] = undefined;

/**
 * Attributes for this datasource.  @see(DatasourceAttribute)
 * @member {Array.<module:com.alterian.ja.model/DatasourceAttribute>} Attributes
 */
ALDataSourceTable.prototype['Attributes'] = undefined;

/**
 * The ID of the database that this table belongs to.
 * @member {Number} DatabaseID
 */
ALDataSourceTable.prototype['DatabaseID'] = undefined;

/**
 * The fully qualified name as used by the underlying datasource type.
 * @member {String} NativeName
 */
ALDataSourceTable.prototype['NativeName'] = undefined;

/**
 * 
 * @member {Array.<module:com.alterian.ja.model/ALDataSourceColumn>} Columns
 */
ALDataSourceTable.prototype['Columns'] = undefined;

/**
 * What kind of datasource is this a table from?  See @see(GetDataSourceTypes) to fetch a list of the available datasource types.
 * @member {Number} DatasourceTypeID
 */
ALDataSourceTable.prototype['DatasourceTypeID'] = undefined;

/**
 * @member {module:com.alterian.ja.model/ALDatasourcePrimaryKey} PrimaryKey
 */
ALDataSourceTable.prototype['PrimaryKey'] = undefined;

/**
 * 
 * @member {Number} ResolverTableID
 */
ALDataSourceTable.prototype['ResolverTableID'] = undefined;

/**
 * List which columns are part of any defined join between this table and linked tables.
 * @member {Array.<module:com.alterian.ja.model/ALDatasourceJoin>} Joins
 */
ALDataSourceTable.prototype['Joins'] = undefined;

/**
 * What other tables can this table be linked to?
 * @member {Array.<module:com.alterian.ja.model/ALDatasourceLink>} Links
 */
ALDataSourceTable.prototype['Links'] = undefined;

/**
 * The entire native name of this item -- usually includes database and table
 * @member {String} FullNativeName
 */
ALDataSourceTable.prototype['FullNativeName'] = undefined;

/**
 * ID of the Datasource
 * @member {Number} DatasourceId
 */
ALDataSourceTable.prototype['DatasourceId'] = undefined;






export default ALDataSourceTable;

