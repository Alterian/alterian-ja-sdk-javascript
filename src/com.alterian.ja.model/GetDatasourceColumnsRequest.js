/**
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import APICursor from './APICursor';

/**
 * The GetDatasourceColumnsRequest model module.
 * @module com.alterian.ja.model/GetDatasourceColumnsRequest
 * @version 6.35.0
 */
class GetDatasourceColumnsRequest {
    /**
     * Constructs a new <code>GetDatasourceColumnsRequest</code>.
     * @alias module:com.alterian.ja.model/GetDatasourceColumnsRequest
     */
    constructor() { 
        
        GetDatasourceColumnsRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GetDatasourceColumnsRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:com.alterian.ja.model/GetDatasourceColumnsRequest} obj Optional instance to populate.
     * @return {module:com.alterian.ja.model/GetDatasourceColumnsRequest} The populated <code>GetDatasourceColumnsRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetDatasourceColumnsRequest();

            if (data.hasOwnProperty('Cursor')) {
                obj['Cursor'] = APICursor.constructFromObject(data['Cursor']);
            }
            if (data.hasOwnProperty('IncludeDisabled')) {
                obj['IncludeDisabled'] = ApiClient.convertToType(data['IncludeDisabled'], 'Boolean');
            }
            if (data.hasOwnProperty('IncludeInvisible')) {
                obj['IncludeInvisible'] = ApiClient.convertToType(data['IncludeInvisible'], 'Boolean');
            }
            if (data.hasOwnProperty('MinimalResults')) {
                obj['MinimalResults'] = ApiClient.convertToType(data['MinimalResults'], 'Boolean');
            }
            if (data.hasOwnProperty('NameFilter')) {
                obj['NameFilter'] = ApiClient.convertToType(data['NameFilter'], 'String');
            }
            if (data.hasOwnProperty('TableID')) {
                obj['TableID'] = ApiClient.convertToType(data['TableID'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetDatasourceColumnsRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetDatasourceColumnsRequest</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Cursor`
        if (data['Cursor']) { // data not null
          APICursor.validateJSON(data['Cursor']);
        }
        // ensure the json data is a string
        if (data['NameFilter'] && !(typeof data['NameFilter'] === 'string' || data['NameFilter'] instanceof String)) {
            throw new Error("Expected the field `NameFilter` to be a primitive type in the JSON string but got " + data['NameFilter']);
        }

        return true;
    }


}



/**
 * @member {module:com.alterian.ja.model/APICursor} Cursor
 */
GetDatasourceColumnsRequest.prototype['Cursor'] = undefined;

/**
 * Should disabled columns be included in the output?Default false
 * @member {Boolean} IncludeDisabled
 */
GetDatasourceColumnsRequest.prototype['IncludeDisabled'] = undefined;

/**
 * Should invisible columns be included in the output? Default false
 * @member {Boolean} IncludeInvisible
 */
GetDatasourceColumnsRequest.prototype['IncludeInvisible'] = undefined;

/**
 * Exclude attributes, etc. from the results
 * @member {Boolean} MinimalResults
 */
GetDatasourceColumnsRequest.prototype['MinimalResults'] = undefined;

/**
 * Optionally filter on the name
 * @member {String} NameFilter
 */
GetDatasourceColumnsRequest.prototype['NameFilter'] = undefined;

/**
 * Supply a table ID to filter the result to just the columns within this table. Ignore this parameter to fetch all columns, which can be very slow.
 * @member {Number} TableID
 */
GetDatasourceColumnsRequest.prototype['TableID'] = undefined;






export default GetDatasourceColumnsRequest;

