/**
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Folder model module.
 * @module com.alterian.ja.model/Folder
 * @version 6.35.0
 */
class Folder {
    /**
     * Constructs a new <code>Folder</code>.
     * A folder is a logical container for items which match the foldertype.  All folders have security applied to them, with the exception of @see(ALUser) and @see(ALUserGroup) folders.
     * @alias module:com.alterian.ja.model/Folder
     */
    constructor() { 
        
        Folder.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Folder</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:com.alterian.ja.model/Folder} obj Optional instance to populate.
     * @return {module:com.alterian.ja.model/Folder} The populated <code>Folder</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Folder();

            if (data.hasOwnProperty('ID')) {
                obj['ID'] = ApiClient.convertToType(data['ID'], 'Number');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('SubFolders')) {
                obj['SubFolders'] = ApiClient.convertToType(data['SubFolders'], [Folder]);
            }
            if (data.hasOwnProperty('Items')) {
                obj['Items'] = ApiClient.convertToType(data['Items'], [Object]);
            }
            if (data.hasOwnProperty('System')) {
                obj['System'] = ApiClient.convertToType(data['System'], 'Boolean');
            }
            if (data.hasOwnProperty('ParentID')) {
                obj['ParentID'] = ApiClient.convertToType(data['ParentID'], 'Number');
            }
            if (data.hasOwnProperty('AccessView')) {
                obj['AccessView'] = ApiClient.convertToType(data['AccessView'], 'Boolean');
            }
            if (data.hasOwnProperty('AccessModify')) {
                obj['AccessModify'] = ApiClient.convertToType(data['AccessModify'], 'Boolean');
            }
            if (data.hasOwnProperty('OwnerID')) {
                obj['OwnerID'] = ApiClient.convertToType(data['OwnerID'], 'Number');
            }
            if (data.hasOwnProperty('Hidden')) {
                obj['Hidden'] = ApiClient.convertToType(data['Hidden'], 'Boolean');
            }
            if (data.hasOwnProperty('AncestorFolderIDs')) {
                obj['AncestorFolderIDs'] = ApiClient.convertToType(data['AncestorFolderIDs'], ['Number']);
            }
            if (data.hasOwnProperty('ChildCount')) {
                obj['ChildCount'] = ApiClient.convertToType(data['ChildCount'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Folder</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Folder</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        if (data['SubFolders']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['SubFolders'])) {
                throw new Error("Expected the field `SubFolders` to be an array in the JSON data but got " + data['SubFolders']);
            }
            // validate the optional field `SubFolders` (array)
            for (const item of data['SubFolders']) {
                Folder.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['Items'])) {
            throw new Error("Expected the field `Items` to be an array in the JSON data but got " + data['Items']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['AncestorFolderIDs'])) {
            throw new Error("Expected the field `AncestorFolderIDs` to be an array in the JSON data but got " + data['AncestorFolderIDs']);
        }

        return true;
    }


}



/**
 * ID of the folder; always unique
 * @member {Number} ID
 */
Folder.prototype['ID'] = undefined;

/**
 * Name of the folder; only unique within a ParentID and FolderType
 * @member {String} Name
 */
Folder.prototype['Name'] = undefined;

/**
 * GUI helper property; not filled in by the API
 * @member {Array.<module:com.alterian.ja.model/Folder>} SubFolders
 */
Folder.prototype['SubFolders'] = undefined;

/**
 * GUI helper property; not filled in by the API
 * @member {Array.<Object>} Items
 */
Folder.prototype['Items'] = undefined;

/**
 * Is this a system folder?  You can't delete system folders
 * @member {Boolean} System
 */
Folder.prototype['System'] = undefined;

/**
 * Parent of this folder; null means it is a root folder
 * @member {Number} ParentID
 */
Folder.prototype['ParentID'] = undefined;

/**
 * Can the user view this folder
 * @member {Boolean} AccessView
 */
Folder.prototype['AccessView'] = undefined;

/**
 * Can the user modify this folder in some way [rename, etc.]
 * @member {Boolean} AccessModify
 */
Folder.prototype['AccessModify'] = undefined;

/**
 * The owner of this folder.  This typically starts out as the creator of the folder.
 * @member {Number} OwnerID
 */
Folder.prototype['OwnerID'] = undefined;

/**
 * Has this folder been flagged as \"hidden\"
 * @member {Boolean} Hidden
 */
Folder.prototype['Hidden'] = undefined;

/**
 * The ids of all the folders under the root that are ancestors of this one, ordered from parent to child             Only populated by the GetFolder API
 * @member {Array.<Number>} AncestorFolderIDs
 */
Folder.prototype['AncestorFolderIDs'] = undefined;

/**
 * Count of the folders immediate children
 * @member {Number} ChildCount
 */
Folder.prototype['ChildCount'] = undefined;






export default Folder;

