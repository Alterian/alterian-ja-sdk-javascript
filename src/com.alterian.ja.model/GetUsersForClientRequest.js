/**
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import APICursor from './APICursor';

/**
 * The GetUsersForClientRequest model module.
 * @module com.alterian.ja.model/GetUsersForClientRequest
 * @version 6.35.0
 */
class GetUsersForClientRequest {
    /**
     * Constructs a new <code>GetUsersForClientRequest</code>.
     * @alias module:com.alterian.ja.model/GetUsersForClientRequest
     */
    constructor() { 
        
        GetUsersForClientRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GetUsersForClientRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:com.alterian.ja.model/GetUsersForClientRequest} obj Optional instance to populate.
     * @return {module:com.alterian.ja.model/GetUsersForClientRequest} The populated <code>GetUsersForClientRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetUsersForClientRequest();

            if (data.hasOwnProperty('ClientId')) {
                obj['ClientId'] = ApiClient.convertToType(data['ClientId'], 'Number');
            }
            if (data.hasOwnProperty('Cursor')) {
                obj['Cursor'] = APICursor.constructFromObject(data['Cursor']);
            }
            if (data.hasOwnProperty('FolderId')) {
                obj['FolderId'] = ApiClient.convertToType(data['FolderId'], 'Number');
            }
            if (data.hasOwnProperty('GroupId')) {
                obj['GroupId'] = ApiClient.convertToType(data['GroupId'], 'Number');
            }
            if (data.hasOwnProperty('IncludeChildren')) {
                obj['IncludeChildren'] = ApiClient.convertToType(data['IncludeChildren'], 'Boolean');
            }
            if (data.hasOwnProperty('IncludeDisabled')) {
                obj['IncludeDisabled'] = ApiClient.convertToType(data['IncludeDisabled'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetUsersForClientRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetUsersForClientRequest</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Cursor`
        if (data['Cursor']) { // data not null
          APICursor.validateJSON(data['Cursor']);
        }

        return true;
    }


}



/**
 * ClientId for which you would like to see users.
 * @member {Number} ClientId
 */
GetUsersForClientRequest.prototype['ClientId'] = undefined;

/**
 * @member {module:com.alterian.ja.model/APICursor} Cursor
 */
GetUsersForClientRequest.prototype['Cursor'] = undefined;

/**
 * Optionally get just the users in this folder. Provide NULL to list all users, but see IncludeChildren below
 * @member {Number} FolderId
 */
GetUsersForClientRequest.prototype['FolderId'] = undefined;

/**
 * Optionally get just the users in this group. Provide NULL to list all users
 * @member {Number} GroupId
 */
GetUsersForClientRequest.prototype['GroupId'] = undefined;

/**
 * If a folderID is supplied, show users in the supplied folder and all its subfolders. If a folderID is not supplied, show all users in all folders (true), or no folders (false)
 * @member {Boolean} IncludeChildren
 */
GetUsersForClientRequest.prototype['IncludeChildren'] = undefined;

/**
 * Include disabled users in the result
 * @member {Boolean} IncludeDisabled
 */
GetUsersForClientRequest.prototype['IncludeDisabled'] = undefined;






export default GetUsersForClientRequest;

