/**
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ColumnPublishedTransformSummary from './ColumnPublishedTransformSummary';
import EventStreamTransition from './EventStreamTransition';

/**
 * The QueryEventStreamResult model module.
 * @module com.alterian.ja.model/QueryEventStreamResult
 * @version 6.35.0
 */
class QueryEventStreamResult {
    /**
     * Constructs a new <code>QueryEventStreamResult</code>.
     * 
     * @alias module:com.alterian.ja.model/QueryEventStreamResult
     */
    constructor() { 
        
        QueryEventStreamResult.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>QueryEventStreamResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:com.alterian.ja.model/QueryEventStreamResult} obj Optional instance to populate.
     * @return {module:com.alterian.ja.model/QueryEventStreamResult} The populated <code>QueryEventStreamResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QueryEventStreamResult();

            if (data.hasOwnProperty('Events')) {
                obj['Events'] = ApiClient.convertToType(data['Events'], ['String']);
            }
            if (data.hasOwnProperty('SecondaryEvents')) {
                obj['SecondaryEvents'] = ApiClient.convertToType(data['SecondaryEvents'], ['String']);
            }
            if (data.hasOwnProperty('Transitions')) {
                obj['Transitions'] = ApiClient.convertToType(data['Transitions'], [EventStreamTransition]);
            }
            if (data.hasOwnProperty('Transforms')) {
                obj['Transforms'] = ApiClient.convertToType(data['Transforms'], [ColumnPublishedTransformSummary]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QueryEventStreamResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QueryEventStreamResult</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['Events'])) {
            throw new Error("Expected the field `Events` to be an array in the JSON data but got " + data['Events']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['SecondaryEvents'])) {
            throw new Error("Expected the field `SecondaryEvents` to be an array in the JSON data but got " + data['SecondaryEvents']);
        }
        if (data['Transitions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Transitions'])) {
                throw new Error("Expected the field `Transitions` to be an array in the JSON data but got " + data['Transitions']);
            }
            // validate the optional field `Transitions` (array)
            for (const item of data['Transitions']) {
                EventStreamTransition.validateJSON(item);
            };
        }
        if (data['Transforms']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Transforms'])) {
                throw new Error("Expected the field `Transforms` to be an array in the JSON data but got " + data['Transforms']);
            }
            // validate the optional field `Transforms` (array)
            for (const item of data['Transforms']) {
                ColumnPublishedTransformSummary.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * 
 * @member {Array.<String>} Events
 */
QueryEventStreamResult.prototype['Events'] = undefined;

/**
 * 
 * @member {Array.<String>} SecondaryEvents
 */
QueryEventStreamResult.prototype['SecondaryEvents'] = undefined;

/**
 * 
 * @member {Array.<module:com.alterian.ja.model/EventStreamTransition>} Transitions
 */
QueryEventStreamResult.prototype['Transitions'] = undefined;

/**
 * Indicates the transforms that were used in the Sankey
 * @member {Array.<module:com.alterian.ja.model/ColumnPublishedTransformSummary>} Transforms
 */
QueryEventStreamResult.prototype['Transforms'] = undefined;






export default QueryEventStreamResult;

