/**
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SequencePredictorPredictionOptions model module.
 * @module com.alterian.ja.model/SequencePredictorPredictionOptions
 * @version 6.35.0
 */
class SequencePredictorPredictionOptions {
    /**
     * Constructs a new <code>SequencePredictorPredictionOptions</code>.
     * 
     * @alias module:com.alterian.ja.model/SequencePredictorPredictionOptions
     */
    constructor() { 
        
        SequencePredictorPredictionOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SequencePredictorPredictionOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:com.alterian.ja.model/SequencePredictorPredictionOptions} obj Optional instance to populate.
     * @return {module:com.alterian.ja.model/SequencePredictorPredictionOptions} The populated <code>SequencePredictorPredictionOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SequencePredictorPredictionOptions();

            if (data.hasOwnProperty('PredictionName')) {
                obj['PredictionName'] = ApiClient.convertToType(data['PredictionName'], 'String');
            }
            if (data.hasOwnProperty('PredictionSeedOutputOption')) {
                obj['PredictionSeedOutputOption'] = ApiClient.convertToType(data['PredictionSeedOutputOption'], 'Number');
            }
            if (data.hasOwnProperty('PredictionSelectionMode')) {
                obj['PredictionSelectionMode'] = ApiClient.convertToType(data['PredictionSelectionMode'], 'Number');
            }
            if (data.hasOwnProperty('NumberOfPredictions')) {
                obj['NumberOfPredictions'] = ApiClient.convertToType(data['NumberOfPredictions'], 'Number');
            }
            if (data.hasOwnProperty('IsDataDebugRequired')) {
                obj['IsDataDebugRequired'] = ApiClient.convertToType(data['IsDataDebugRequired'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SequencePredictorPredictionOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SequencePredictorPredictionOptions</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['PredictionName'] && !(typeof data['PredictionName'] === 'string' || data['PredictionName'] instanceof String)) {
            throw new Error("Expected the field `PredictionName` to be a primitive type in the JSON string but got " + data['PredictionName']);
        }

        return true;
    }


}



/**
 * Name for the generated prediction
 * @member {String} PredictionName
 */
SequencePredictorPredictionOptions.prototype['PredictionName'] = undefined;

/**
 * Indicates what proportion of the prediction seed to include in the prediction that is output             0 - None 1- All
 * @member {Number} PredictionSeedOutputOption
 */
SequencePredictorPredictionOptions.prototype['PredictionSeedOutputOption'] = undefined;

/**
 * Whether to always select the most probable next step or to select randomised distribution around the most probable step             0=Maximum probability , 1=Randomized maximum probability ('Fuzzy' predictions - yields a more realistic looking range of outputs)
 * @member {Number} PredictionSelectionMode
 */
SequencePredictorPredictionOptions.prototype['PredictionSelectionMode'] = undefined;

/**
 * Number of events to predict
 * @member {Number} NumberOfPredictions
 */
SequencePredictorPredictionOptions.prototype['NumberOfPredictions'] = undefined;

/**
 * Turn this on to leave intermediate tables in place for the purposes of debugging a model                          For 'fuzzy mode' predictons this will also cause some extra columns for 'Most Likely Event' and 'Most Likely Event Probability' to be added to the output for comparison
 * @member {Boolean} IsDataDebugRequired
 */
SequencePredictorPredictionOptions.prototype['IsDataDebugRequired'] = undefined;






export default SequencePredictorPredictionOptions;

