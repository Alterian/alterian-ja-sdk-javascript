/**
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateWebSpoonRequest model module.
 * @module com.alterian.ja.model/CreateWebSpoonRequest
 * @version 6.35.0
 */
class CreateWebSpoonRequest {
    /**
     * Constructs a new <code>CreateWebSpoonRequest</code>.
     * @alias module:com.alterian.ja.model/CreateWebSpoonRequest
     */
    constructor() { 
        
        CreateWebSpoonRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CreateWebSpoonRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:com.alterian.ja.model/CreateWebSpoonRequest} obj Optional instance to populate.
     * @return {module:com.alterian.ja.model/CreateWebSpoonRequest} The populated <code>CreateWebSpoonRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateWebSpoonRequest();

            if (data.hasOwnProperty('AllowMultiple')) {
                obj['AllowMultiple'] = ApiClient.convertToType(data['AllowMultiple'], 'Boolean');
            }
            if (data.hasOwnProperty('JAURL')) {
                obj['JAURL'] = ApiClient.convertToType(data['JAURL'], 'String');
            }
            if (data.hasOwnProperty('JOUrl')) {
                obj['JOUrl'] = ApiClient.convertToType(data['JOUrl'], 'String');
            }
            if (data.hasOwnProperty('JOUser')) {
                obj['JOUser'] = ApiClient.convertToType(data['JOUser'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateWebSpoonRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateWebSpoonRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['JAURL'] && !(typeof data['JAURL'] === 'string' || data['JAURL'] instanceof String)) {
            throw new Error("Expected the field `JAURL` to be a primitive type in the JSON string but got " + data['JAURL']);
        }
        // ensure the json data is a string
        if (data['JOUrl'] && !(typeof data['JOUrl'] === 'string' || data['JOUrl'] instanceof String)) {
            throw new Error("Expected the field `JOUrl` to be a primitive type in the JSON string but got " + data['JOUrl']);
        }
        // ensure the json data is a string
        if (data['JOUser'] && !(typeof data['JOUser'] === 'string' || data['JOUser'] instanceof String)) {
            throw new Error("Expected the field `JOUser` to be a primitive type in the JSON string but got " + data['JOUser']);
        }

        return true;
    }


}



/**
 * If false, the system will error if there is already a task for the user
 * @member {Boolean} AllowMultiple
 */
CreateWebSpoonRequest.prototype['AllowMultiple'] = undefined;

/**
 * Your analytics server URL, like https://cx-dev-v01.alterian.net
 * @member {String} JAURL
 */
CreateWebSpoonRequest.prototype['JAURL'] = undefined;

/**
 * The orchestration instance URL to which your analytics system is connected; this is normally something like https://dde.alterian.net
 * @member {String} JOUrl
 */
CreateWebSpoonRequest.prototype['JOUrl'] = undefined;

/**
 * Your analytics\\orchestration user (note, these should match but, if they do not, it must be the orchestration user name)
 * @member {String} JOUser
 */
CreateWebSpoonRequest.prototype['JOUser'] = undefined;






export default CreateWebSpoonRequest;

