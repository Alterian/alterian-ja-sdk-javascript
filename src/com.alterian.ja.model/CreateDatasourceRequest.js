/**
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DatasourceAttribute from './DatasourceAttribute';

/**
 * The CreateDatasourceRequest model module.
 * @module com.alterian.ja.model/CreateDatasourceRequest
 * @version 6.35.0
 */
class CreateDatasourceRequest {
    /**
     * Constructs a new <code>CreateDatasourceRequest</code>.
     * @alias module:com.alterian.ja.model/CreateDatasourceRequest
     */
    constructor() { 
        
        CreateDatasourceRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CreateDatasourceRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:com.alterian.ja.model/CreateDatasourceRequest} obj Optional instance to populate.
     * @return {module:com.alterian.ja.model/CreateDatasourceRequest} The populated <code>CreateDatasourceRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateDatasourceRequest();

            if (data.hasOwnProperty('Attributes')) {
                obj['Attributes'] = ApiClient.convertToType(data['Attributes'], [DatasourceAttribute]);
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Project')) {
                obj['Project'] = ApiClient.convertToType(data['Project'], 'String');
            }
            if (data.hasOwnProperty('Server')) {
                obj['Server'] = ApiClient.convertToType(data['Server'], 'String');
            }
            if (data.hasOwnProperty('SystemDataLocation')) {
                obj['SystemDataLocation'] = ApiClient.convertToType(data['SystemDataLocation'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateDatasourceRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateDatasourceRequest</code>.
     */
    static validateJSON(data) {
        if (data['Attributes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Attributes'])) {
                throw new Error("Expected the field `Attributes` to be an array in the JSON data but got " + data['Attributes']);
            }
            // validate the optional field `Attributes` (array)
            for (const item of data['Attributes']) {
                DatasourceAttribute.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['Project'] && !(typeof data['Project'] === 'string' || data['Project'] instanceof String)) {
            throw new Error("Expected the field `Project` to be a primitive type in the JSON string but got " + data['Project']);
        }
        // ensure the json data is a string
        if (data['Server'] && !(typeof data['Server'] === 'string' || data['Server'] instanceof String)) {
            throw new Error("Expected the field `Server` to be a primitive type in the JSON string but got " + data['Server']);
        }
        // ensure the json data is a string
        if (data['SystemDataLocation'] && !(typeof data['SystemDataLocation'] === 'string' || data['SystemDataLocation'] instanceof String)) {
            throw new Error("Expected the field `SystemDataLocation` to be a primitive type in the JSON string but got " + data['SystemDataLocation']);
        }

        return true;
    }


}



/**
 * Optional additional attributes.  If not supplied, most datasource attributes will be populated with sensible defaults.
 * @member {Array.<module:com.alterian.ja.model/DatasourceAttribute>} Attributes
 */
CreateDatasourceRequest.prototype['Attributes'] = undefined;

/**
 * Name of the datasource
 * @member {String} Name
 */
CreateDatasourceRequest.prototype['Name'] = undefined;

/**
 * Name of the engine project
 * @member {String} Project
 */
CreateDatasourceRequest.prototype['Project'] = undefined;

/**
 * Server on which the engine project is located
 * @member {String} Server
 */
CreateDatasourceRequest.prototype['Server'] = undefined;

/**
 * If this parameter is specified, all IMS system data (e.g. metrics, campaign data, etc.) will be stored in this location.  Please note that if the project already has system generated data, it will not move that data to the new location.
 * @member {String} SystemDataLocation
 */
CreateDatasourceRequest.prototype['SystemDataLocation'] = undefined;






export default CreateDatasourceRequest;

