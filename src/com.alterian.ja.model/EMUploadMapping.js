/**
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EMClient from './EMClient';

/**
 * The EMUploadMapping model module.
 * @module com.alterian.ja.model/EMUploadMapping
 * @version 6.35.0
 */
class EMUploadMapping {
    /**
     * Constructs a new <code>EMUploadMapping</code>.
     * Provides an upload mapping into the EM system to a specific EM client and user
     * @alias module:com.alterian.ja.model/EMUploadMapping
     */
    constructor() { 
        
        EMUploadMapping.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EMUploadMapping</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:com.alterian.ja.model/EMUploadMapping} obj Optional instance to populate.
     * @return {module:com.alterian.ja.model/EMUploadMapping} The populated <code>EMUploadMapping</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EMUploadMapping();

            if (data.hasOwnProperty('ID')) {
                obj['ID'] = ApiClient.convertToType(data['ID'], 'Number');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('FolderID')) {
                obj['FolderID'] = ApiClient.convertToType(data['FolderID'], 'Number');
            }
            if (data.hasOwnProperty('EMUserID')) {
                obj['EMUserID'] = ApiClient.convertToType(data['EMUserID'], 'Number');
            }
            if (data.hasOwnProperty('Created')) {
                obj['Created'] = ApiClient.convertToType(data['Created'], 'Date');
            }
            if (data.hasOwnProperty('Modified')) {
                obj['Modified'] = ApiClient.convertToType(data['Modified'], 'Date');
            }
            if (data.hasOwnProperty('OwnerID')) {
                obj['OwnerID'] = ApiClient.convertToType(data['OwnerID'], 'Number');
            }
            if (data.hasOwnProperty('EMUserName')) {
                obj['EMUserName'] = ApiClient.convertToType(data['EMUserName'], 'String');
            }
            if (data.hasOwnProperty('CanEdit')) {
                obj['CanEdit'] = ApiClient.convertToType(data['CanEdit'], 'Number');
            }
            if (data.hasOwnProperty('EMClient')) {
                obj['EMClient'] = EMClient.constructFromObject(data['EMClient']);
            }
            if (data.hasOwnProperty('EMClientID')) {
                obj['EMClientID'] = ApiClient.convertToType(data['EMClientID'], 'Number');
            }
            if (data.hasOwnProperty('IsEnabled')) {
                obj['IsEnabled'] = ApiClient.convertToType(data['IsEnabled'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EMUploadMapping</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EMUploadMapping</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['EMUserName'] && !(typeof data['EMUserName'] === 'string' || data['EMUserName'] instanceof String)) {
            throw new Error("Expected the field `EMUserName` to be a primitive type in the JSON string but got " + data['EMUserName']);
        }
        // validate the optional field `EMClient`
        if (data['EMClient']) { // data not null
          EMClient.validateJSON(data['EMClient']);
        }

        return true;
    }


}



/**
 * Unique ID of this mapping
 * @member {Number} ID
 */
EMUploadMapping.prototype['ID'] = undefined;

/**
 * Name of this mapping
 * @member {String} Name
 */
EMUploadMapping.prototype['Name'] = undefined;

/**
 * Folder in which this mapping is located
 * @member {Number} FolderID
 */
EMUploadMapping.prototype['FolderID'] = undefined;

/**
 * EM User ID of this mapping
 * @member {Number} EMUserID
 */
EMUploadMapping.prototype['EMUserID'] = undefined;

/**
 * Date that this mapping was created
 * @member {Date} Created
 */
EMUploadMapping.prototype['Created'] = undefined;

/**
 * Date that this mapping was last modified
 * @member {Date} Modified
 */
EMUploadMapping.prototype['Modified'] = undefined;

/**
 * The owner\\creator of this EMMapping
 * @member {Number} OwnerID
 */
EMUploadMapping.prototype['OwnerID'] = undefined;

/**
 * A cache of the user name which maps to the EMUserID on the EM side.
 * @member {String} EMUserName
 */
EMUploadMapping.prototype['EMUserName'] = undefined;

/**
 * Does the Mapping have edit permissions for this user - cannot set this value using this property
 * @member {Number} CanEdit
 */
EMUploadMapping.prototype['CanEdit'] = undefined;

/**
 * @member {module:com.alterian.ja.model/EMClient} EMClient
 */
EMUploadMapping.prototype['EMClient'] = undefined;

/**
 * EM Client ID of this mapping
 * @member {Number} EMClientID
 */
EMUploadMapping.prototype['EMClientID'] = undefined;

/**
 * Is mapping enabled
 * @member {Boolean} IsEnabled
 */
EMUploadMapping.prototype['IsEnabled'] = undefined;






export default EMUploadMapping;

