/**
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import APICursor from './APICursor';

/**
 * The GetTokensRequest model module.
 * @module com.alterian.ja.model/GetTokensRequest
 * @version 6.35.0
 */
class GetTokensRequest {
    /**
     * Constructs a new <code>GetTokensRequest</code>.
     * @alias module:com.alterian.ja.model/GetTokensRequest
     */
    constructor() { 
        
        GetTokensRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GetTokensRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:com.alterian.ja.model/GetTokensRequest} obj Optional instance to populate.
     * @return {module:com.alterian.ja.model/GetTokensRequest} The populated <code>GetTokensRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetTokensRequest();

            if (data.hasOwnProperty('ClientID')) {
                obj['ClientID'] = ApiClient.convertToType(data['ClientID'], 'Number');
            }
            if (data.hasOwnProperty('Cursor')) {
                obj['Cursor'] = APICursor.constructFromObject(data['Cursor']);
            }
            if (data.hasOwnProperty('IncludeNonUser')) {
                obj['IncludeNonUser'] = ApiClient.convertToType(data['IncludeNonUser'], 'Boolean');
            }
            if (data.hasOwnProperty('IncludeSA')) {
                obj['IncludeSA'] = ApiClient.convertToType(data['IncludeSA'], 'Boolean');
            }
            if (data.hasOwnProperty('IncludeStandard')) {
                obj['IncludeStandard'] = ApiClient.convertToType(data['IncludeStandard'], 'Boolean');
            }
            if (data.hasOwnProperty('IncludeStatic')) {
                obj['IncludeStatic'] = ApiClient.convertToType(data['IncludeStatic'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetTokensRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetTokensRequest</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Cursor`
        if (data['Cursor']) { // data not null
          APICursor.validateJSON(data['Cursor']);
        }

        return true;
    }


}



/**
 * ClientID for which to list tokens.  If \"Token\" parameter is an SA token, \"ClientID\" is used; if the \"Token\" parameter is a regular token, the clientID of the token is used
 * @member {Number} ClientID
 */
GetTokensRequest.prototype['ClientID'] = undefined;

/**
 * @member {module:com.alterian.ja.model/APICursor} Cursor
 */
GetTokensRequest.prototype['Cursor'] = undefined;

/**
 * Include tokens which have no user set.  These types of tokens can't be used for the majority of API requests.
 * @member {Boolean} IncludeNonUser
 */
GetTokensRequest.prototype['IncludeNonUser'] = undefined;

/**
 * Include sa tokens in the returned list of tokens
 * @member {Boolean} IncludeSA
 */
GetTokensRequest.prototype['IncludeSA'] = undefined;

/**
 * Include regular tokens in the returned list of tokens -- warning, this can be quite large
 * @member {Boolean} IncludeStandard
 */
GetTokensRequest.prototype['IncludeStandard'] = undefined;

/**
 * Include static tokens in the returned list of tokens
 * @member {Boolean} IncludeStatic
 */
GetTokensRequest.prototype['IncludeStatic'] = undefined;






export default GetTokensRequest;

