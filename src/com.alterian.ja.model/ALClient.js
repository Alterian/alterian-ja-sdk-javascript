/**
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Package from './Package';

/**
 * The ALClient model module.
 * @module com.alterian.ja.model/ALClient
 * @version 6.35.0
 */
class ALClient {
    /**
     * Constructs a new <code>ALClient</code>.
     * A client represents a distinct set of users, documents and other data within a system.              Users and documents are unique within a client, and are isolated from other clients, so they cannot be shared between clients (except manually by export and import)             Note that multiple clients can use the same customer data by each creating a @see(ALDataSource) to the same customer database.             Each customer will typically have one client, but some large customers may have multiple clients             Each client has it&#39;s own SQLServer database to store information in.                The data is returned as a @see(ALClient) object
     * @alias module:com.alterian.ja.model/ALClient
     */
    constructor() { 
        
        ALClient.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ALClient</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:com.alterian.ja.model/ALClient} obj Optional instance to populate.
     * @return {module:com.alterian.ja.model/ALClient} The populated <code>ALClient</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ALClient();

            if (data.hasOwnProperty('ID')) {
                obj['ID'] = ApiClient.convertToType(data['ID'], 'Number');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Enabled')) {
                obj['Enabled'] = ApiClient.convertToType(data['Enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('Settings')) {
                obj['Settings'] = ApiClient.convertToType(data['Settings'], {'String': 'String'});
            }
            if (data.hasOwnProperty('Packages')) {
                obj['Packages'] = ApiClient.convertToType(data['Packages'], [Package]);
            }
            if (data.hasOwnProperty('ClientSetID')) {
                obj['ClientSetID'] = ApiClient.convertToType(data['ClientSetID'], 'Number');
            }
            if (data.hasOwnProperty('SiteId')) {
                obj['SiteId'] = ApiClient.convertToType(data['SiteId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ALClient</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ALClient</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['Packages'])) {
            throw new Error("Expected the field `Packages` to be an array in the JSON data but got " + data['Packages']);
        }
        // ensure the json data is a string
        if (data['SiteId'] && !(typeof data['SiteId'] === 'string' || data['SiteId'] instanceof String)) {
            throw new Error("Expected the field `SiteId` to be a primitive type in the JSON string but got " + data['SiteId']);
        }

        return true;
    }


}



/**
 * The ID of the client.
 * @member {Number} ID
 */
ALClient.prototype['ID'] = undefined;

/**
 * The name of the client.
 * @member {String} Name
 */
ALClient.prototype['Name'] = undefined;

/**
 * 
 * @member {Boolean} Enabled
 */
ALClient.prototype['Enabled'] = undefined;

/**
 * 
 * @member {Object.<String, String>} Settings
 */
ALClient.prototype['Settings'] = undefined;

/**
 * 
 * @member {Array.<module:com.alterian.ja.model/Package>} Packages
 */
ALClient.prototype['Packages'] = undefined;

/**
 * 
 * @member {Number} ClientSetID
 */
ALClient.prototype['ClientSetID'] = undefined;

/**
 * 
 * @member {String} SiteId
 */
ALClient.prototype['SiteId'] = undefined;






export default ALClient;

