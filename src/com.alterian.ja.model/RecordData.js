/**
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RecordColumn from './RecordColumn';

/**
 * The RecordData model module.
 * @module com.alterian.ja.model/RecordData
 * @version 6.35.0
 */
class RecordData {
    /**
     * Constructs a new <code>RecordData</code>.
     * Structure for holding the record data of a event stream.
     * @alias module:com.alterian.ja.model/RecordData
     */
    constructor() { 
        
        RecordData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RecordData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:com.alterian.ja.model/RecordData} obj Optional instance to populate.
     * @return {module:com.alterian.ja.model/RecordData} The populated <code>RecordData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RecordData();

            if (data.hasOwnProperty('TotalRows')) {
                obj['TotalRows'] = ApiClient.convertToType(data['TotalRows'], 'Number');
            }
            if (data.hasOwnProperty('RowsInView')) {
                obj['RowsInView'] = ApiClient.convertToType(data['RowsInView'], 'Number');
            }
            if (data.hasOwnProperty('ColumnsInView')) {
                obj['ColumnsInView'] = ApiClient.convertToType(data['ColumnsInView'], 'Number');
            }
            if (data.hasOwnProperty('Columns')) {
                obj['Columns'] = ApiClient.convertToType(data['Columns'], [RecordColumn]);
            }
            if (data.hasOwnProperty('Rows')) {
                obj['Rows'] = ApiClient.convertToType(data['Rows'], [['String']]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RecordData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RecordData</code>.
     */
    static validateJSON(data) {
        if (data['Columns']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Columns'])) {
                throw new Error("Expected the field `Columns` to be an array in the JSON data but got " + data['Columns']);
            }
            // validate the optional field `Columns` (array)
            for (const item of data['Columns']) {
                RecordColumn.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['Rows'])) {
            throw new Error("Expected the field `Rows` to be an array in the JSON data but got " + data['Rows']);
        }

        return true;
    }


}



/**
 * Total number of rows.
 * @member {Number} TotalRows
 */
RecordData.prototype['TotalRows'] = undefined;

/**
 * Number of rows in this view.
 * @member {Number} RowsInView
 */
RecordData.prototype['RowsInView'] = undefined;

/**
 * Number of columns in this view.
 * @member {Number} ColumnsInView
 */
RecordData.prototype['ColumnsInView'] = undefined;

/**
 * NameEx's of columns being displayed
 * @member {Array.<module:com.alterian.ja.model/RecordColumn>} Columns
 */
RecordData.prototype['Columns'] = undefined;

/**
 * The individual rows.
 * @member {Array.<Array.<String>>} Rows
 */
RecordData.prototype['Rows'] = undefined;






export default RecordData;

