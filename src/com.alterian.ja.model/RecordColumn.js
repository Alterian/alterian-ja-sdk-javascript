/**
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ColumnDataType from './ColumnDataType';

/**
 * The RecordColumn model module.
 * @module com.alterian.ja.model/RecordColumn
 * @version 6.35.0
 */
class RecordColumn {
    /**
     * Constructs a new <code>RecordColumn</code>.
     * Structure for holding the basic column information for a record
     * @alias module:com.alterian.ja.model/RecordColumn
     */
    constructor() { 
        
        RecordColumn.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RecordColumn</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:com.alterian.ja.model/RecordColumn} obj Optional instance to populate.
     * @return {module:com.alterian.ja.model/RecordColumn} The populated <code>RecordColumn</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RecordColumn();

            if (data.hasOwnProperty('Handle')) {
                obj['Handle'] = ApiClient.convertToType(data['Handle'], 'Number');
            }
            if (data.hasOwnProperty('NameEx')) {
                obj['NameEx'] = ApiClient.convertToType(data['NameEx'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ApiClient.convertToType(data['Type'], 'String');
            }
            if (data.hasOwnProperty('DataType')) {
                obj['DataType'] = ColumnDataType.constructFromObject(data['DataType']);
            }
            if (data.hasOwnProperty('IsIndexed')) {
                obj['IsIndexed'] = ApiClient.convertToType(data['IsIndexed'], 'Boolean');
            }
            if (data.hasOwnProperty('IsSortable')) {
                obj['IsSortable'] = ApiClient.convertToType(data['IsSortable'], 'Boolean');
            }
            if (data.hasOwnProperty('Width')) {
                obj['Width'] = ApiClient.convertToType(data['Width'], 'Number');
            }
            if (data.hasOwnProperty('RecordCount')) {
                obj['RecordCount'] = ApiClient.convertToType(data['RecordCount'], 'Number');
            }
            if (data.hasOwnProperty('Precision')) {
                obj['Precision'] = ApiClient.convertToType(data['Precision'], 'Number');
            }
            if (data.hasOwnProperty('Snapshot')) {
                obj['Snapshot'] = ApiClient.convertToType(data['Snapshot'], 'Boolean');
            }
            if (data.hasOwnProperty('DeleteOnDataChange')) {
                obj['DeleteOnDataChange'] = ApiClient.convertToType(data['DeleteOnDataChange'], 'Boolean');
            }
            if (data.hasOwnProperty('NumberofNulls')) {
                obj['NumberofNulls'] = ApiClient.convertToType(data['NumberofNulls'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RecordColumn</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RecordColumn</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['NameEx'] && !(typeof data['NameEx'] === 'string' || data['NameEx'] instanceof String)) {
            throw new Error("Expected the field `NameEx` to be a primitive type in the JSON string but got " + data['NameEx']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['Description'] && !(typeof data['Description'] === 'string' || data['Description'] instanceof String)) {
            throw new Error("Expected the field `Description` to be a primitive type in the JSON string but got " + data['Description']);
        }
        // ensure the json data is a string
        if (data['Type'] && !(typeof data['Type'] === 'string' || data['Type'] instanceof String)) {
            throw new Error("Expected the field `Type` to be a primitive type in the JSON string but got " + data['Type']);
        }

        return true;
    }


}



/**
 * The Engine Handle
 * @member {Number} Handle
 */
RecordColumn.prototype['Handle'] = undefined;

/**
 * The NameEx
 * @member {String} NameEx
 */
RecordColumn.prototype['NameEx'] = undefined;

/**
 * The Short Name
 * @member {String} Name
 */
RecordColumn.prototype['Name'] = undefined;

/**
 * The Description
 * @member {String} Description
 */
RecordColumn.prototype['Description'] = undefined;

/**
 * The column type expressed as a textual description (as per Engine sheet)
 * @member {String} Type
 */
RecordColumn.prototype['Type'] = undefined;

/**
 * @member {module:com.alterian.ja.model/ColumnDataType} DataType
 */
RecordColumn.prototype['DataType'] = undefined;

/**
 * 
 * @member {Boolean} IsIndexed
 */
RecordColumn.prototype['IsIndexed'] = undefined;

/**
 * Flag indicating if the column is sortable
 * @member {Boolean} IsSortable
 */
RecordColumn.prototype['IsSortable'] = undefined;

/**
 * Current maximum width of this column.
 * @member {Number} Width
 */
RecordColumn.prototype['Width'] = undefined;

/**
 * The total number of records in this column
 * @member {Number} RecordCount
 */
RecordColumn.prototype['RecordCount'] = undefined;

/**
 * Precision of this column, if it is a decimal type
 * @member {Number} Precision
 */
RecordColumn.prototype['Precision'] = undefined;

/**
 * Is this column a snapshotted column?
 * @member {Boolean} Snapshot
 */
RecordColumn.prototype['Snapshot'] = undefined;

/**
 * Will this column get deleted on data change?
 * @member {Boolean} DeleteOnDataChange
 */
RecordColumn.prototype['DeleteOnDataChange'] = undefined;

/**
 * The number of nulls in this column; if the column is engineered, etc. and has not been calculated, this will be -1
 * @member {Number} NumberofNulls
 */
RecordColumn.prototype['NumberofNulls'] = undefined;






export default RecordColumn;

