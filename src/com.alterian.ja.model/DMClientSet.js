/**
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DMClient from './DMClient';
import DMClientSettings from './DMClientSettings';
import DMDeliveryContext from './DMDeliveryContext';
import DMVMTA from './DMVMTA';

/**
 * The DMClientSet model module.
 * @module com.alterian.ja.model/DMClientSet
 * @version 6.35.0
 */
class DMClientSet {
    /**
     * Constructs a new <code>DMClientSet</code>.
     * 
     * @alias module:com.alterian.ja.model/DMClientSet
     */
    constructor() { 
        
        DMClientSet.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DMClientSet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:com.alterian.ja.model/DMClientSet} obj Optional instance to populate.
     * @return {module:com.alterian.ja.model/DMClientSet} The populated <code>DMClientSet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DMClientSet();

            if (data.hasOwnProperty('ID')) {
                obj['ID'] = ApiClient.convertToType(data['ID'], 'Number');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('SASeats')) {
                obj['SASeats'] = ApiClient.convertToType(data['SASeats'], 'Number');
            }
            if (data.hasOwnProperty('DefaultSettings')) {
                obj['DefaultSettings'] = DMClientSettings.constructFromObject(data['DefaultSettings']);
            }
            if (data.hasOwnProperty('Clients')) {
                obj['Clients'] = ApiClient.convertToType(data['Clients'], [DMClient]);
            }
            if (data.hasOwnProperty('VMTAs')) {
                obj['VMTAs'] = ApiClient.convertToType(data['VMTAs'], [DMVMTA]);
            }
            if (data.hasOwnProperty('DeliveryContexts')) {
                obj['DeliveryContexts'] = ApiClient.convertToType(data['DeliveryContexts'], [DMDeliveryContext]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DMClientSet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DMClientSet</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // validate the optional field `DefaultSettings`
        if (data['DefaultSettings']) { // data not null
          DMClientSettings.validateJSON(data['DefaultSettings']);
        }
        if (data['Clients']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Clients'])) {
                throw new Error("Expected the field `Clients` to be an array in the JSON data but got " + data['Clients']);
            }
            // validate the optional field `Clients` (array)
            for (const item of data['Clients']) {
                DMClient.validateJSON(item);
            };
        }
        if (data['VMTAs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['VMTAs'])) {
                throw new Error("Expected the field `VMTAs` to be an array in the JSON data but got " + data['VMTAs']);
            }
            // validate the optional field `VMTAs` (array)
            for (const item of data['VMTAs']) {
                DMVMTA.validateJSON(item);
            };
        }
        if (data['DeliveryContexts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['DeliveryContexts'])) {
                throw new Error("Expected the field `DeliveryContexts` to be an array in the JSON data but got " + data['DeliveryContexts']);
            }
            // validate the optional field `DeliveryContexts` (array)
            for (const item of data['DeliveryContexts']) {
                DMDeliveryContext.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * 
 * @member {Number} ID
 */
DMClientSet.prototype['ID'] = undefined;

/**
 * 
 * @member {String} Name
 */
DMClientSet.prototype['Name'] = undefined;

/**
 * 
 * @member {Number} SASeats
 */
DMClientSet.prototype['SASeats'] = undefined;

/**
 * @member {module:com.alterian.ja.model/DMClientSettings} DefaultSettings
 */
DMClientSet.prototype['DefaultSettings'] = undefined;

/**
 * 
 * @member {Array.<module:com.alterian.ja.model/DMClient>} Clients
 */
DMClientSet.prototype['Clients'] = undefined;

/**
 * 
 * @member {Array.<module:com.alterian.ja.model/DMVMTA>} VMTAs
 */
DMClientSet.prototype['VMTAs'] = undefined;

/**
 * 
 * @member {Array.<module:com.alterian.ja.model/DMDeliveryContext>} DeliveryContexts
 */
DMClientSet.prototype['DeliveryContexts'] = undefined;






export default DMClientSet;

