/**
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DMFieldStorageType from './DMFieldStorageType';
import DMFieldType from './DMFieldType';

/**
 * The DMField model module.
 * @module com.alterian.ja.model/DMField
 * @version 6.35.0
 */
class DMField {
    /**
     * Constructs a new <code>DMField</code>.
     * 
     * @alias module:com.alterian.ja.model/DMField
     */
    constructor() { 
        
        DMField.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DMField</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:com.alterian.ja.model/DMField} obj Optional instance to populate.
     * @return {module:com.alterian.ja.model/DMField} The populated <code>DMField</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DMField();

            if (data.hasOwnProperty('Created')) {
                obj['Created'] = ApiClient.convertToType(data['Created'], 'Date');
            }
            if (data.hasOwnProperty('FieldType')) {
                obj['FieldType'] = DMFieldType.constructFromObject(data['FieldType']);
            }
            if (data.hasOwnProperty('ID')) {
                obj['ID'] = ApiClient.convertToType(data['ID'], 'Number');
            }
            if (data.hasOwnProperty('IsSeed')) {
                obj['IsSeed'] = ApiClient.convertToType(data['IsSeed'], 'Boolean');
            }
            if (data.hasOwnProperty('ListField')) {
                obj['ListField'] = ApiClient.convertToType(data['ListField'], 'Boolean');
            }
            if (data.hasOwnProperty('Modified')) {
                obj['Modified'] = ApiClient.convertToType(data['Modified'], 'Date');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('PrimaryKey')) {
                obj['PrimaryKey'] = ApiClient.convertToType(data['PrimaryKey'], 'Boolean');
            }
            if (data.hasOwnProperty('SourceColumn')) {
                obj['SourceColumn'] = ApiClient.convertToType(data['SourceColumn'], 'String');
            }
            if (data.hasOwnProperty('StorageType')) {
                obj['StorageType'] = DMFieldStorageType.constructFromObject(data['StorageType']);
            }
            if (data.hasOwnProperty('UserAccess')) {
                obj['UserAccess'] = ApiClient.convertToType(data['UserAccess'], 'Boolean');
            }
            if (data.hasOwnProperty('UserOptOut')) {
                obj['UserOptOut'] = ApiClient.convertToType(data['UserOptOut'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DMField</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DMField</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['SourceColumn'] && !(typeof data['SourceColumn'] === 'string' || data['SourceColumn'] instanceof String)) {
            throw new Error("Expected the field `SourceColumn` to be a primitive type in the JSON string but got " + data['SourceColumn']);
        }

        return true;
    }


}



/**
 * 
 * @member {Date} Created
 */
DMField.prototype['Created'] = undefined;

/**
 * @member {module:com.alterian.ja.model/DMFieldType} FieldType
 */
DMField.prototype['FieldType'] = undefined;

/**
 * 
 * @member {Number} ID
 */
DMField.prototype['ID'] = undefined;

/**
 * 
 * @member {Boolean} IsSeed
 */
DMField.prototype['IsSeed'] = undefined;

/**
 * 
 * @member {Boolean} ListField
 */
DMField.prototype['ListField'] = undefined;

/**
 * 
 * @member {Date} Modified
 */
DMField.prototype['Modified'] = undefined;

/**
 * 
 * @member {String} Name
 */
DMField.prototype['Name'] = undefined;

/**
 * 
 * @member {Boolean} PrimaryKey
 */
DMField.prototype['PrimaryKey'] = undefined;

/**
 * 
 * @member {String} SourceColumn
 */
DMField.prototype['SourceColumn'] = undefined;

/**
 * @member {module:com.alterian.ja.model/DMFieldStorageType} StorageType
 */
DMField.prototype['StorageType'] = undefined;

/**
 * 
 * @member {Boolean} UserAccess
 */
DMField.prototype['UserAccess'] = undefined;

/**
 * 
 * @member {Boolean} UserOptOut
 */
DMField.prototype['UserOptOut'] = undefined;






export default DMField;

