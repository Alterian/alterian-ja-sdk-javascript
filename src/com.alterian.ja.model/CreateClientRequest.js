/**
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateClientRequest model module.
 * @module com.alterian.ja.model/CreateClientRequest
 * @version 6.35.0
 */
class CreateClientRequest {
    /**
     * Constructs a new <code>CreateClientRequest</code>.
     * @alias module:com.alterian.ja.model/CreateClientRequest
     */
    constructor() { 
        
        CreateClientRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CreateClientRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:com.alterian.ja.model/CreateClientRequest} obj Optional instance to populate.
     * @return {module:com.alterian.ja.model/CreateClientRequest} The populated <code>CreateClientRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateClientRequest();

            if (data.hasOwnProperty('ClientName')) {
                obj['ClientName'] = ApiClient.convertToType(data['ClientName'], 'String');
            }
            if (data.hasOwnProperty('ClientSetID')) {
                obj['ClientSetID'] = ApiClient.convertToType(data['ClientSetID'], 'Number');
            }
            if (data.hasOwnProperty('DatabaseName')) {
                obj['DatabaseName'] = ApiClient.convertToType(data['DatabaseName'], 'String');
            }
            if (data.hasOwnProperty('DatabaseServerID')) {
                obj['DatabaseServerID'] = ApiClient.convertToType(data['DatabaseServerID'], 'Number');
            }
            if (data.hasOwnProperty('SourceClientID')) {
                obj['SourceClientID'] = ApiClient.convertToType(data['SourceClientID'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateClientRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateClientRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['ClientName'] && !(typeof data['ClientName'] === 'string' || data['ClientName'] instanceof String)) {
            throw new Error("Expected the field `ClientName` to be a primitive type in the JSON string but got " + data['ClientName']);
        }
        // ensure the json data is a string
        if (data['DatabaseName'] && !(typeof data['DatabaseName'] === 'string' || data['DatabaseName'] instanceof String)) {
            throw new Error("Expected the field `DatabaseName` to be a primitive type in the JSON string but got " + data['DatabaseName']);
        }

        return true;
    }


}



/**
 * The name of the new client. Method will fail if this client name already exists within the specified @see(ALClientSet)
 * @member {String} ClientName
 */
CreateClientRequest.prototype['ClientName'] = undefined;

/**
 * The identifier of the @see(ALClientSet) that this client will be created within. Method will fail if this clientset cannot be found
 * @member {Number} ClientSetID
 */
CreateClientRequest.prototype['ClientSetID'] = undefined;

/**
 * The name of the SQLServer database that this client will create. Method will fail if this database already exists on the specified database server ID.  May only be 50 characters long and must not start with a number nor have special characters
 * @member {String} DatabaseName
 */
CreateClientRequest.prototype['DatabaseName'] = undefined;

/**
 * The identifier of the database server that the database will be created within. Method will fail if this database server cannot be found
 * @member {Number} DatabaseServerID
 */
CreateClientRequest.prototype['DatabaseServerID'] = undefined;

/**
 * 
 * @member {Number} SourceClientID
 */
CreateClientRequest.prototype['SourceClientID'] = undefined;






export default CreateClientRequest;

