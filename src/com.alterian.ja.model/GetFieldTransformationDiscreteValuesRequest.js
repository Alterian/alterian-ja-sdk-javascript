/**
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import APICursor from './APICursor';
import FieldTransformationSampleSettings from './FieldTransformationSampleSettings';

/**
 * The GetFieldTransformationDiscreteValuesRequest model module.
 * @module com.alterian.ja.model/GetFieldTransformationDiscreteValuesRequest
 * @version 6.35.0
 */
class GetFieldTransformationDiscreteValuesRequest {
    /**
     * Constructs a new <code>GetFieldTransformationDiscreteValuesRequest</code>.
     * @alias module:com.alterian.ja.model/GetFieldTransformationDiscreteValuesRequest
     */
    constructor() { 
        
        GetFieldTransformationDiscreteValuesRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GetFieldTransformationDiscreteValuesRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:com.alterian.ja.model/GetFieldTransformationDiscreteValuesRequest} obj Optional instance to populate.
     * @return {module:com.alterian.ja.model/GetFieldTransformationDiscreteValuesRequest} The populated <code>GetFieldTransformationDiscreteValuesRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetFieldTransformationDiscreteValuesRequest();

            if (data.hasOwnProperty('ColumnNameEx')) {
                obj['ColumnNameEx'] = ApiClient.convertToType(data['ColumnNameEx'], 'String');
            }
            if (data.hasOwnProperty('Cursor')) {
                obj['Cursor'] = APICursor.constructFromObject(data['Cursor']);
            }
            if (data.hasOwnProperty('DataSourceId')) {
                obj['DataSourceId'] = ApiClient.convertToType(data['DataSourceId'], 'Number');
            }
            if (data.hasOwnProperty('IsDataRefreshRequired')) {
                obj['IsDataRefreshRequired'] = ApiClient.convertToType(data['IsDataRefreshRequired'], 'Boolean');
            }
            if (data.hasOwnProperty('JSONTransforms')) {
                obj['JSONTransforms'] = ApiClient.convertToType(data['JSONTransforms'], 'String');
            }
            if (data.hasOwnProperty('SampleSettings')) {
                obj['SampleSettings'] = FieldTransformationSampleSettings.constructFromObject(data['SampleSettings']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetFieldTransformationDiscreteValuesRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetFieldTransformationDiscreteValuesRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['ColumnNameEx'] && !(typeof data['ColumnNameEx'] === 'string' || data['ColumnNameEx'] instanceof String)) {
            throw new Error("Expected the field `ColumnNameEx` to be a primitive type in the JSON string but got " + data['ColumnNameEx']);
        }
        // validate the optional field `Cursor`
        if (data['Cursor']) { // data not null
          APICursor.validateJSON(data['Cursor']);
        }
        // ensure the json data is a string
        if (data['JSONTransforms'] && !(typeof data['JSONTransforms'] === 'string' || data['JSONTransforms'] instanceof String)) {
            throw new Error("Expected the field `JSONTransforms` to be a primitive type in the JSON string but got " + data['JSONTransforms']);
        }
        // validate the optional field `SampleSettings`
        if (data['SampleSettings']) { // data not null
          FieldTransformationSampleSettings.validateJSON(data['SampleSettings']);
        }

        return true;
    }


}



/**
 * Source column to which transforms should be applied
 * @member {String} ColumnNameEx
 */
GetFieldTransformationDiscreteValuesRequest.prototype['ColumnNameEx'] = undefined;

/**
 * @member {module:com.alterian.ja.model/APICursor} Cursor
 */
GetFieldTransformationDiscreteValuesRequest.prototype['Cursor'] = undefined;

/**
 * Id of the datasource to which column belongs.
 * @member {Number} DataSourceId
 */
GetFieldTransformationDiscreteValuesRequest.prototype['DataSourceId'] = undefined;

/**
 * Indicate whether the request can be satisfied with an existing cached result or requires recreation with latest data (default false)
 * @member {Boolean} IsDataRefreshRequired
 */
GetFieldTransformationDiscreteValuesRequest.prototype['IsDataRefreshRequired'] = undefined;

/**
 * JSON array of transform to be applied e.g. [{{\\\"FrequencyReplace\\\":{{\\\"@minimum\\\":8035,\\\"@replacement\\\":\\\"My Replacement\\\"}}}}]. Note that attributes must be prefixed with @
 * @member {String} JSONTransforms
 */
GetFieldTransformationDiscreteValuesRequest.prototype['JSONTransforms'] = undefined;

/**
 * @member {module:com.alterian.ja.model/FieldTransformationSampleSettings} SampleSettings
 */
GetFieldTransformationDiscreteValuesRequest.prototype['SampleSettings'] = undefined;






export default GetFieldTransformationDiscreteValuesRequest;

