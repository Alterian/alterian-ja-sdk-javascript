/**
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DMEditorType from './DMEditorType';
import DMVariableType from './DMVariableType';
import DMVariableValue from './DMVariableValue';
import EMDocument from './EMDocument';

/**
 * The EMVariable model module.
 * @module com.alterian.ja.model/EMVariable
 * @version 6.35.0
 */
class EMVariable {
    /**
     * Constructs a new <code>EMVariable</code>.
     * 
     * @alias module:com.alterian.ja.model/EMVariable
     */
    constructor() { 
        
        EMVariable.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EMVariable</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:com.alterian.ja.model/EMVariable} obj Optional instance to populate.
     * @return {module:com.alterian.ja.model/EMVariable} The populated <code>EMVariable</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EMVariable();

            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('SampleValue')) {
                obj['SampleValue'] = ApiClient.convertToType(data['SampleValue'], 'String');
            }
            if (data.hasOwnProperty('UseDefaultForSample')) {
                obj['UseDefaultForSample'] = ApiClient.convertToType(data['UseDefaultForSample'], 'Boolean');
            }
            if (data.hasOwnProperty('UsedBy')) {
                obj['UsedBy'] = ApiClient.convertToType(data['UsedBy'], [EMDocument]);
            }
            if (data.hasOwnProperty('Created')) {
                obj['Created'] = ApiClient.convertToType(data['Created'], 'Date');
            }
            if (data.hasOwnProperty('DefaultField')) {
                obj['DefaultField'] = ApiClient.convertToType(data['DefaultField'], 'Number');
            }
            if (data.hasOwnProperty('DefaultValue')) {
                obj['DefaultValue'] = DMVariableValue.constructFromObject(data['DefaultValue']);
            }
            if (data.hasOwnProperty('EditorType')) {
                obj['EditorType'] = DMEditorType.constructFromObject(data['EditorType']);
            }
            if (data.hasOwnProperty('ForceMap')) {
                obj['ForceMap'] = ApiClient.convertToType(data['ForceMap'], 'Boolean');
            }
            if (data.hasOwnProperty('Hidden')) {
                obj['Hidden'] = ApiClient.convertToType(data['Hidden'], 'Boolean');
            }
            if (data.hasOwnProperty('ID')) {
                obj['ID'] = ApiClient.convertToType(data['ID'], 'Number');
            }
            if (data.hasOwnProperty('LookupCombo')) {
                obj['LookupCombo'] = ApiClient.convertToType(data['LookupCombo'], 'Number');
            }
            if (data.hasOwnProperty('LookupID')) {
                obj['LookupID'] = ApiClient.convertToType(data['LookupID'], 'Number');
            }
            if (data.hasOwnProperty('LookupResult')) {
                obj['LookupResult'] = ApiClient.convertToType(data['LookupResult'], 'Number');
            }
            if (data.hasOwnProperty('Modified')) {
                obj['Modified'] = ApiClient.convertToType(data['Modified'], 'Date');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('ParseName')) {
                obj['ParseName'] = ApiClient.convertToType(data['ParseName'], 'String');
            }
            if (data.hasOwnProperty('Readonly')) {
                obj['Readonly'] = ApiClient.convertToType(data['Readonly'], 'Boolean');
            }
            if (data.hasOwnProperty('Required')) {
                obj['Required'] = ApiClient.convertToType(data['Required'], 'Boolean');
            }
            if (data.hasOwnProperty('RowOrder')) {
                obj['RowOrder'] = ApiClient.convertToType(data['RowOrder'], 'Number');
            }
            if (data.hasOwnProperty('Shared')) {
                obj['Shared'] = ApiClient.convertToType(data['Shared'], 'Boolean');
            }
            if (data.hasOwnProperty('System')) {
                obj['System'] = ApiClient.convertToType(data['System'], 'Boolean');
            }
            if (data.hasOwnProperty('VariableType')) {
                obj['VariableType'] = DMVariableType.constructFromObject(data['VariableType']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EMVariable</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EMVariable</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Description'] && !(typeof data['Description'] === 'string' || data['Description'] instanceof String)) {
            throw new Error("Expected the field `Description` to be a primitive type in the JSON string but got " + data['Description']);
        }
        // ensure the json data is a string
        if (data['SampleValue'] && !(typeof data['SampleValue'] === 'string' || data['SampleValue'] instanceof String)) {
            throw new Error("Expected the field `SampleValue` to be a primitive type in the JSON string but got " + data['SampleValue']);
        }
        if (data['UsedBy']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['UsedBy'])) {
                throw new Error("Expected the field `UsedBy` to be an array in the JSON data but got " + data['UsedBy']);
            }
            // validate the optional field `UsedBy` (array)
            for (const item of data['UsedBy']) {
                EMDocument.validateJSON(item);
            };
        }
        // validate the optional field `DefaultValue`
        if (data['DefaultValue']) { // data not null
          DMVariableValue.validateJSON(data['DefaultValue']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['ParseName'] && !(typeof data['ParseName'] === 'string' || data['ParseName'] instanceof String)) {
            throw new Error("Expected the field `ParseName` to be a primitive type in the JSON string but got " + data['ParseName']);
        }

        return true;
    }


}



/**
 * 
 * @member {String} Description
 */
EMVariable.prototype['Description'] = undefined;

/**
 * 
 * @member {String} SampleValue
 */
EMVariable.prototype['SampleValue'] = undefined;

/**
 * 
 * @member {Boolean} UseDefaultForSample
 */
EMVariable.prototype['UseDefaultForSample'] = undefined;

/**
 * 
 * @member {Array.<module:com.alterian.ja.model/EMDocument>} UsedBy
 */
EMVariable.prototype['UsedBy'] = undefined;

/**
 * 
 * @member {Date} Created
 */
EMVariable.prototype['Created'] = undefined;

/**
 * 
 * @member {Number} DefaultField
 */
EMVariable.prototype['DefaultField'] = undefined;

/**
 * @member {module:com.alterian.ja.model/DMVariableValue} DefaultValue
 */
EMVariable.prototype['DefaultValue'] = undefined;

/**
 * @member {module:com.alterian.ja.model/DMEditorType} EditorType
 */
EMVariable.prototype['EditorType'] = undefined;

/**
 * 
 * @member {Boolean} ForceMap
 */
EMVariable.prototype['ForceMap'] = undefined;

/**
 * 
 * @member {Boolean} Hidden
 */
EMVariable.prototype['Hidden'] = undefined;

/**
 * 
 * @member {Number} ID
 */
EMVariable.prototype['ID'] = undefined;

/**
 * 
 * @member {Number} LookupCombo
 */
EMVariable.prototype['LookupCombo'] = undefined;

/**
 * 
 * @member {Number} LookupID
 */
EMVariable.prototype['LookupID'] = undefined;

/**
 * 
 * @member {Number} LookupResult
 */
EMVariable.prototype['LookupResult'] = undefined;

/**
 * 
 * @member {Date} Modified
 */
EMVariable.prototype['Modified'] = undefined;

/**
 * 
 * @member {String} Name
 */
EMVariable.prototype['Name'] = undefined;

/**
 * 
 * @member {String} ParseName
 */
EMVariable.prototype['ParseName'] = undefined;

/**
 * 
 * @member {Boolean} Readonly
 */
EMVariable.prototype['Readonly'] = undefined;

/**
 * 
 * @member {Boolean} Required
 */
EMVariable.prototype['Required'] = undefined;

/**
 * 
 * @member {Number} RowOrder
 */
EMVariable.prototype['RowOrder'] = undefined;

/**
 * 
 * @member {Boolean} Shared
 */
EMVariable.prototype['Shared'] = undefined;

/**
 * 
 * @member {Boolean} System
 */
EMVariable.prototype['System'] = undefined;

/**
 * @member {module:com.alterian.ja.model/DMVariableType} VariableType
 */
EMVariable.prototype['VariableType'] = undefined;






export default EMVariable;

