/**
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AUTHChangePasswordDefaultResponse from '../com.alterian.ja.model/AUTHChangePasswordDefaultResponse';
import EMAbortDeploymentRequest from '../com.alterian.ja.model/EMAbortDeploymentRequest';
import EMAuthenticateRequest from '../com.alterian.ja.model/EMAuthenticateRequest';
import EMDeleteListRequest from '../com.alterian.ja.model/EMDeleteListRequest';
import EMGetClientGroupUsersDefaultResponse from '../com.alterian.ja.model/EMGetClientGroupUsersDefaultResponse';
import EMGetClientGroupUsersRequest from '../com.alterian.ja.model/EMGetClientGroupUsersRequest';
import EMGetClientGroupsDefaultResponse from '../com.alterian.ja.model/EMGetClientGroupsDefaultResponse';
import EMGetClientGroupsRequest from '../com.alterian.ja.model/EMGetClientGroupsRequest';
import EMGetClientInfoDefaultResponse from '../com.alterian.ja.model/EMGetClientInfoDefaultResponse';
import EMGetClientInfoRequest from '../com.alterian.ja.model/EMGetClientInfoRequest';
import EMGetClientSetsDefaultResponse from '../com.alterian.ja.model/EMGetClientSetsDefaultResponse';
import EMGetClientSetsRequest from '../com.alterian.ja.model/EMGetClientSetsRequest';
import EMGetCreativeDefaultResponse from '../com.alterian.ja.model/EMGetCreativeDefaultResponse';
import EMGetCreativeFieldsDefaultResponse from '../com.alterian.ja.model/EMGetCreativeFieldsDefaultResponse';
import EMGetCreativeRequest from '../com.alterian.ja.model/EMGetCreativeRequest';
import EMGetCreativesDefaultResponse from '../com.alterian.ja.model/EMGetCreativesDefaultResponse';
import EMGetCreativesRequest from '../com.alterian.ja.model/EMGetCreativesRequest';
import EMGetEMServiceURLRequest from '../com.alterian.ja.model/EMGetEMServiceURLRequest';
import EMGetFoldersLazyDefaultResponse from '../com.alterian.ja.model/EMGetFoldersLazyDefaultResponse';
import EMGetFoldersLazyRequest from '../com.alterian.ja.model/EMGetFoldersLazyRequest';
import EMGetInboundAddressesDefaultResponse from '../com.alterian.ja.model/EMGetInboundAddressesDefaultResponse';
import EMGetInboundAddressesRequest from '../com.alterian.ja.model/EMGetInboundAddressesRequest';
import EMGetTemplateContentRequest from '../com.alterian.ja.model/EMGetTemplateContentRequest';
import EMGetUsersRequest from '../com.alterian.ja.model/EMGetUsersRequest';
import EMLogOffRequest from '../com.alterian.ja.model/EMLogOffRequest';
import EMPauseDeploymentRequest from '../com.alterian.ja.model/EMPauseDeploymentRequest';
import EMPrimaryKeysDefaultResponse from '../com.alterian.ja.model/EMPrimaryKeysDefaultResponse';
import EMPrimaryKeysRequest from '../com.alterian.ja.model/EMPrimaryKeysRequest';
import EMSetEMServiceURLRequest from '../com.alterian.ja.model/EMSetEMServiceURLRequest';
import EMTestEMServiceURLRequest from '../com.alterian.ja.model/EMTestEMServiceURLRequest';
import GetDataSourceEngineUserNameDefaultResponse from '../com.alterian.ja.model/GetDataSourceEngineUserNameDefaultResponse';

/**
* EMProxy service.
* @module api/EMProxyApi
* @version 6.35.0
*/
export default class EMProxyApi {

    /**
    * Constructs a new EMProxyApi. 
    * @alias module:api/EMProxyApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Proxy call to EM UserManager.asmx to abort a deployment
     * Proxy call to EM UserManager.asmx to abort a deployment
     * @param {module:com.alterian.ja.model/EMAbortDeploymentRequest} eMAbortDeploymentRequest Proxy call to EM UserManager.asmx to abort a deployment
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse} and HTTP response
     */
    eMAbortDeploymentWithHttpInfo(eMAbortDeploymentRequest) {
      let postBody = eMAbortDeploymentRequest;
      // verify the required parameter 'eMAbortDeploymentRequest' is set
      if (eMAbortDeploymentRequest === undefined || eMAbortDeploymentRequest === null) {
        throw new Error("Missing the required parameter 'eMAbortDeploymentRequest' when calling eMAbortDeployment");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHChangePasswordDefaultResponse;
      return this.apiClient.callApi(
        '/EM_AbortDeployment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Proxy call to EM UserManager.asmx to abort a deployment
     * Proxy call to EM UserManager.asmx to abort a deployment
     * @param {module:com.alterian.ja.model/EMAbortDeploymentRequest} eMAbortDeploymentRequest Proxy call to EM UserManager.asmx to abort a deployment
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse}
     */
    eMAbortDeployment(eMAbortDeploymentRequest) {
      return this.eMAbortDeploymentWithHttpInfo(eMAbortDeploymentRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Proxy call to EM Authenticate.asmx             public string AuthenticateEx(string Login, string Password, string NewPassword, bool BumpExisting, DateTime LocalTime, DMPasswordFormat PasswordFormat)
     * Proxy call to EM Authenticate.asmx             public string AuthenticateEx(string Login, string Password, string NewPassword, bool BumpExisting, DateTime LocalTime, DMPasswordFormat PasswordFormat)
     * @param {module:com.alterian.ja.model/EMAuthenticateRequest} eMAuthenticateRequest Proxy call to EM Authenticate.asmx             public string AuthenticateEx(string Login, string Password, string NewPassword, bool BumpExisting, DateTime LocalTime, DMPasswordFormat PasswordFormat)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/GetDataSourceEngineUserNameDefaultResponse} and HTTP response
     */
    eMAuthenticateWithHttpInfo(eMAuthenticateRequest) {
      let postBody = eMAuthenticateRequest;
      // verify the required parameter 'eMAuthenticateRequest' is set
      if (eMAuthenticateRequest === undefined || eMAuthenticateRequest === null) {
        throw new Error("Missing the required parameter 'eMAuthenticateRequest' when calling eMAuthenticate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetDataSourceEngineUserNameDefaultResponse;
      return this.apiClient.callApi(
        '/EM_Authenticate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Proxy call to EM Authenticate.asmx             public string AuthenticateEx(string Login, string Password, string NewPassword, bool BumpExisting, DateTime LocalTime, DMPasswordFormat PasswordFormat)
     * Proxy call to EM Authenticate.asmx             public string AuthenticateEx(string Login, string Password, string NewPassword, bool BumpExisting, DateTime LocalTime, DMPasswordFormat PasswordFormat)
     * @param {module:com.alterian.ja.model/EMAuthenticateRequest} eMAuthenticateRequest Proxy call to EM Authenticate.asmx             public string AuthenticateEx(string Login, string Password, string NewPassword, bool BumpExisting, DateTime LocalTime, DMPasswordFormat PasswordFormat)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/GetDataSourceEngineUserNameDefaultResponse}
     */
    eMAuthenticate(eMAuthenticateRequest) {
      return this.eMAuthenticateWithHttpInfo(eMAuthenticateRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes a list
     * Deletes a list
     * @param {module:com.alterian.ja.model/EMDeleteListRequest} eMDeleteListRequest Deletes a list
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse} and HTTP response
     */
    eMDeleteListWithHttpInfo(eMDeleteListRequest) {
      let postBody = eMDeleteListRequest;
      // verify the required parameter 'eMDeleteListRequest' is set
      if (eMDeleteListRequest === undefined || eMDeleteListRequest === null) {
        throw new Error("Missing the required parameter 'eMDeleteListRequest' when calling eMDeleteList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHChangePasswordDefaultResponse;
      return this.apiClient.callApi(
        '/EM_DeleteList', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes a list
     * Deletes a list
     * @param {module:com.alterian.ja.model/EMDeleteListRequest} eMDeleteListRequest Deletes a list
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse}
     */
    eMDeleteList(eMDeleteListRequest) {
      return this.eMDeleteListWithHttpInfo(eMDeleteListRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Proxy call to EM UserManager.asmx             public DMUserCollection GetClientGroupUsers(string Token, DMClient Client, int GroupID)
     * Proxy call to EM UserManager.asmx             public DMUserCollection GetClientGroupUsers(string Token, DMClient Client, int GroupID)
     * @param {module:com.alterian.ja.model/EMGetClientGroupUsersRequest} eMGetClientGroupUsersRequest Proxy call to EM UserManager.asmx             public DMUserCollection GetClientGroupUsers(string Token, DMClient Client, int GroupID)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/EMGetClientGroupUsersDefaultResponse} and HTTP response
     */
    eMGetClientGroupUsersWithHttpInfo(eMGetClientGroupUsersRequest) {
      let postBody = eMGetClientGroupUsersRequest;
      // verify the required parameter 'eMGetClientGroupUsersRequest' is set
      if (eMGetClientGroupUsersRequest === undefined || eMGetClientGroupUsersRequest === null) {
        throw new Error("Missing the required parameter 'eMGetClientGroupUsersRequest' when calling eMGetClientGroupUsers");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EMGetClientGroupUsersDefaultResponse;
      return this.apiClient.callApi(
        '/EM_GetClientGroupUsers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Proxy call to EM UserManager.asmx             public DMUserCollection GetClientGroupUsers(string Token, DMClient Client, int GroupID)
     * Proxy call to EM UserManager.asmx             public DMUserCollection GetClientGroupUsers(string Token, DMClient Client, int GroupID)
     * @param {module:com.alterian.ja.model/EMGetClientGroupUsersRequest} eMGetClientGroupUsersRequest Proxy call to EM UserManager.asmx             public DMUserCollection GetClientGroupUsers(string Token, DMClient Client, int GroupID)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/EMGetClientGroupUsersDefaultResponse}
     */
    eMGetClientGroupUsers(eMGetClientGroupUsersRequest) {
      return this.eMGetClientGroupUsersWithHttpInfo(eMGetClientGroupUsersRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Proxy call to the EM UserManager.asmx              DMGroupCollection GetClientGroups(string Token, DMClient Client, out DMNestedGroupCollection Nested)
     * Proxy call to the EM UserManager.asmx              DMGroupCollection GetClientGroups(string Token, DMClient Client, out DMNestedGroupCollection Nested)
     * @param {module:com.alterian.ja.model/EMGetClientGroupsRequest} eMGetClientGroupsRequest Proxy call to the EM UserManager.asmx              DMGroupCollection GetClientGroups(string Token, DMClient Client, out DMNestedGroupCollection Nested)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/EMGetClientGroupsDefaultResponse} and HTTP response
     */
    eMGetClientGroupsWithHttpInfo(eMGetClientGroupsRequest) {
      let postBody = eMGetClientGroupsRequest;
      // verify the required parameter 'eMGetClientGroupsRequest' is set
      if (eMGetClientGroupsRequest === undefined || eMGetClientGroupsRequest === null) {
        throw new Error("Missing the required parameter 'eMGetClientGroupsRequest' when calling eMGetClientGroups");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EMGetClientGroupsDefaultResponse;
      return this.apiClient.callApi(
        '/EM_GetClientGroups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Proxy call to the EM UserManager.asmx              DMGroupCollection GetClientGroups(string Token, DMClient Client, out DMNestedGroupCollection Nested)
     * Proxy call to the EM UserManager.asmx              DMGroupCollection GetClientGroups(string Token, DMClient Client, out DMNestedGroupCollection Nested)
     * @param {module:com.alterian.ja.model/EMGetClientGroupsRequest} eMGetClientGroupsRequest Proxy call to the EM UserManager.asmx              DMGroupCollection GetClientGroups(string Token, DMClient Client, out DMNestedGroupCollection Nested)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/EMGetClientGroupsDefaultResponse}
     */
    eMGetClientGroups(eMGetClientGroupsRequest) {
      return this.eMGetClientGroupsWithHttpInfo(eMGetClientGroupsRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Proxy call to EM Authenticate.asmx             public void GetClientInfo(string Token, out int ID, out string Name, out string ContentURL, out string Icon)
     * Proxy call to EM Authenticate.asmx             public void GetClientInfo(string Token, out int ID, out string Name, out string ContentURL, out string Icon)
     * @param {module:com.alterian.ja.model/EMGetClientInfoRequest} eMGetClientInfoRequest Proxy call to EM Authenticate.asmx             public void GetClientInfo(string Token, out int ID, out string Name, out string ContentURL, out string Icon)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/EMGetClientInfoDefaultResponse} and HTTP response
     */
    eMGetClientInfoWithHttpInfo(eMGetClientInfoRequest) {
      let postBody = eMGetClientInfoRequest;
      // verify the required parameter 'eMGetClientInfoRequest' is set
      if (eMGetClientInfoRequest === undefined || eMGetClientInfoRequest === null) {
        throw new Error("Missing the required parameter 'eMGetClientInfoRequest' when calling eMGetClientInfo");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EMGetClientInfoDefaultResponse;
      return this.apiClient.callApi(
        '/EM_GetClientInfo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Proxy call to EM Authenticate.asmx             public void GetClientInfo(string Token, out int ID, out string Name, out string ContentURL, out string Icon)
     * Proxy call to EM Authenticate.asmx             public void GetClientInfo(string Token, out int ID, out string Name, out string ContentURL, out string Icon)
     * @param {module:com.alterian.ja.model/EMGetClientInfoRequest} eMGetClientInfoRequest Proxy call to EM Authenticate.asmx             public void GetClientInfo(string Token, out int ID, out string Name, out string ContentURL, out string Icon)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/EMGetClientInfoDefaultResponse}
     */
    eMGetClientInfo(eMGetClientInfoRequest) {
      return this.eMGetClientInfoWithHttpInfo(eMGetClientInfoRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Proxy call to EM ClientManager.asmx             public DMClientSetCollection GetClientSets(string Token)
     * Proxy call to EM ClientManager.asmx             public DMClientSetCollection GetClientSets(string Token)
     * @param {module:com.alterian.ja.model/EMGetClientSetsRequest} eMGetClientSetsRequest Proxy call to EM ClientManager.asmx             public DMClientSetCollection GetClientSets(string Token)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/EMGetClientSetsDefaultResponse} and HTTP response
     */
    eMGetClientSetsWithHttpInfo(eMGetClientSetsRequest) {
      let postBody = eMGetClientSetsRequest;
      // verify the required parameter 'eMGetClientSetsRequest' is set
      if (eMGetClientSetsRequest === undefined || eMGetClientSetsRequest === null) {
        throw new Error("Missing the required parameter 'eMGetClientSetsRequest' when calling eMGetClientSets");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EMGetClientSetsDefaultResponse;
      return this.apiClient.callApi(
        '/EM_GetClientSets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Proxy call to EM ClientManager.asmx             public DMClientSetCollection GetClientSets(string Token)
     * Proxy call to EM ClientManager.asmx             public DMClientSetCollection GetClientSets(string Token)
     * @param {module:com.alterian.ja.model/EMGetClientSetsRequest} eMGetClientSetsRequest Proxy call to EM ClientManager.asmx             public DMClientSetCollection GetClientSets(string Token)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/EMGetClientSetsDefaultResponse}
     */
    eMGetClientSets(eMGetClientSetsRequest) {
      return this.eMGetClientSetsWithHttpInfo(eMGetClientSetsRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Proxy call to get EM creative
     * Proxy call to get EM creative
     * @param {module:com.alterian.ja.model/EMGetCreativeRequest} eMGetCreativeRequest Proxy call to get EM creative
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/EMGetCreativeDefaultResponse} and HTTP response
     */
    eMGetCreativeWithHttpInfo(eMGetCreativeRequest) {
      let postBody = eMGetCreativeRequest;
      // verify the required parameter 'eMGetCreativeRequest' is set
      if (eMGetCreativeRequest === undefined || eMGetCreativeRequest === null) {
        throw new Error("Missing the required parameter 'eMGetCreativeRequest' when calling eMGetCreative");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EMGetCreativeDefaultResponse;
      return this.apiClient.callApi(
        '/EM_GetCreative', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Proxy call to get EM creative
     * Proxy call to get EM creative
     * @param {module:com.alterian.ja.model/EMGetCreativeRequest} eMGetCreativeRequest Proxy call to get EM creative
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/EMGetCreativeDefaultResponse}
     */
    eMGetCreative(eMGetCreativeRequest) {
      return this.eMGetCreativeWithHttpInfo(eMGetCreativeRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Proxy call to get EM creative fields
     * Proxy call to get EM creative fields
     * @param {module:com.alterian.ja.model/EMGetCreativeRequest} eMGetCreativeRequest Proxy call to get EM creative fields
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/EMGetCreativeFieldsDefaultResponse} and HTTP response
     */
    eMGetCreativeFieldsWithHttpInfo(eMGetCreativeRequest) {
      let postBody = eMGetCreativeRequest;
      // verify the required parameter 'eMGetCreativeRequest' is set
      if (eMGetCreativeRequest === undefined || eMGetCreativeRequest === null) {
        throw new Error("Missing the required parameter 'eMGetCreativeRequest' when calling eMGetCreativeFields");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EMGetCreativeFieldsDefaultResponse;
      return this.apiClient.callApi(
        '/EM_GetCreativeFields', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Proxy call to get EM creative fields
     * Proxy call to get EM creative fields
     * @param {module:com.alterian.ja.model/EMGetCreativeRequest} eMGetCreativeRequest Proxy call to get EM creative fields
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/EMGetCreativeFieldsDefaultResponse}
     */
    eMGetCreativeFields(eMGetCreativeRequest) {
      return this.eMGetCreativeFieldsWithHttpInfo(eMGetCreativeRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Proxy call to get EM creatives
     * Proxy call to get EM creatives
     * @param {module:com.alterian.ja.model/EMGetCreativesRequest} eMGetCreativesRequest Proxy call to get EM creatives
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/EMGetCreativesDefaultResponse} and HTTP response
     */
    eMGetCreativesWithHttpInfo(eMGetCreativesRequest) {
      let postBody = eMGetCreativesRequest;
      // verify the required parameter 'eMGetCreativesRequest' is set
      if (eMGetCreativesRequest === undefined || eMGetCreativesRequest === null) {
        throw new Error("Missing the required parameter 'eMGetCreativesRequest' when calling eMGetCreatives");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EMGetCreativesDefaultResponse;
      return this.apiClient.callApi(
        '/EM_GetCreatives', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Proxy call to get EM creatives
     * Proxy call to get EM creatives
     * @param {module:com.alterian.ja.model/EMGetCreativesRequest} eMGetCreativesRequest Proxy call to get EM creatives
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/EMGetCreativesDefaultResponse}
     */
    eMGetCreatives(eMGetCreativesRequest) {
      return this.eMGetCreativesWithHttpInfo(eMGetCreativesRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns back the EM Service URL for the siteID requested.
     * Returns back the EM Service URL for the siteID requested.
     * @param {module:com.alterian.ja.model/EMGetEMServiceURLRequest} eMGetEMServiceURLRequest Returns back the EM Service URL for the siteID requested.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/GetDataSourceEngineUserNameDefaultResponse} and HTTP response
     */
    eMGetEMServiceURLWithHttpInfo(eMGetEMServiceURLRequest) {
      let postBody = eMGetEMServiceURLRequest;
      // verify the required parameter 'eMGetEMServiceURLRequest' is set
      if (eMGetEMServiceURLRequest === undefined || eMGetEMServiceURLRequest === null) {
        throw new Error("Missing the required parameter 'eMGetEMServiceURLRequest' when calling eMGetEMServiceURL");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetDataSourceEngineUserNameDefaultResponse;
      return this.apiClient.callApi(
        '/EM_GetEMServiceURL', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns back the EM Service URL for the siteID requested.
     * Returns back the EM Service URL for the siteID requested.
     * @param {module:com.alterian.ja.model/EMGetEMServiceURLRequest} eMGetEMServiceURLRequest Returns back the EM Service URL for the siteID requested.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/GetDataSourceEngineUserNameDefaultResponse}
     */
    eMGetEMServiceURL(eMGetEMServiceURLRequest) {
      return this.eMGetEMServiceURLWithHttpInfo(eMGetEMServiceURLRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Return the regular expression string used to validate an email address. This is the same expression used by Email Manager.
     * Return the regular expression string used to validate an email address. This is the same expression used by Email Manager.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/GetDataSourceEngineUserNameDefaultResponse} and HTTP response
     */
    eMGetEmailValidationExpressionWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDataSourceEngineUserNameDefaultResponse;
      return this.apiClient.callApi(
        '/EM_GetEmailValidationExpression', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Return the regular expression string used to validate an email address. This is the same expression used by Email Manager.
     * Return the regular expression string used to validate an email address. This is the same expression used by Email Manager.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/GetDataSourceEngineUserNameDefaultResponse}
     */
    eMGetEmailValidationExpression() {
      return this.eMGetEmailValidationExpressionWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns an object containing the list of folders in the specified folder, together with a string representation of the folder hierarchy.
     * Returns an object containing the list of folders in the specified folder, together with a string representation of the folder hierarchy.
     * @param {module:com.alterian.ja.model/EMGetFoldersLazyRequest} eMGetFoldersLazyRequest Returns an object containing the list of folders in the specified folder, together with a string representation of the folder hierarchy.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/EMGetFoldersLazyDefaultResponse} and HTTP response
     */
    eMGetFoldersLazyWithHttpInfo(eMGetFoldersLazyRequest) {
      let postBody = eMGetFoldersLazyRequest;
      // verify the required parameter 'eMGetFoldersLazyRequest' is set
      if (eMGetFoldersLazyRequest === undefined || eMGetFoldersLazyRequest === null) {
        throw new Error("Missing the required parameter 'eMGetFoldersLazyRequest' when calling eMGetFoldersLazy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EMGetFoldersLazyDefaultResponse;
      return this.apiClient.callApi(
        '/EM_GetFoldersLazy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns an object containing the list of folders in the specified folder, together with a string representation of the folder hierarchy.
     * Returns an object containing the list of folders in the specified folder, together with a string representation of the folder hierarchy.
     * @param {module:com.alterian.ja.model/EMGetFoldersLazyRequest} eMGetFoldersLazyRequest Returns an object containing the list of folders in the specified folder, together with a string representation of the folder hierarchy.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/EMGetFoldersLazyDefaultResponse}
     */
    eMGetFoldersLazy(eMGetFoldersLazyRequest) {
      return this.eMGetFoldersLazyWithHttpInfo(eMGetFoldersLazyRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Proxy call to get inbound addresses
     * Proxy call to get inbound addresses
     * @param {module:com.alterian.ja.model/EMGetInboundAddressesRequest} eMGetInboundAddressesRequest Proxy call to get inbound addresses
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/EMGetInboundAddressesDefaultResponse} and HTTP response
     */
    eMGetInboundAddressesWithHttpInfo(eMGetInboundAddressesRequest) {
      let postBody = eMGetInboundAddressesRequest;
      // verify the required parameter 'eMGetInboundAddressesRequest' is set
      if (eMGetInboundAddressesRequest === undefined || eMGetInboundAddressesRequest === null) {
        throw new Error("Missing the required parameter 'eMGetInboundAddressesRequest' when calling eMGetInboundAddresses");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EMGetInboundAddressesDefaultResponse;
      return this.apiClient.callApi(
        '/EM_GetInboundAddresses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Proxy call to get inbound addresses
     * Proxy call to get inbound addresses
     * @param {module:com.alterian.ja.model/EMGetInboundAddressesRequest} eMGetInboundAddressesRequest Proxy call to get inbound addresses
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/EMGetInboundAddressesDefaultResponse}
     */
    eMGetInboundAddresses(eMGetInboundAddressesRequest) {
      return this.eMGetInboundAddressesWithHttpInfo(eMGetInboundAddressesRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Proxy call to get EM template content
     * Proxy call to get EM template content
     * @param {module:com.alterian.ja.model/EMGetTemplateContentRequest} eMGetTemplateContentRequest Proxy call to get EM template content
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/GetDataSourceEngineUserNameDefaultResponse} and HTTP response
     */
    eMGetTemplateContentWithHttpInfo(eMGetTemplateContentRequest) {
      let postBody = eMGetTemplateContentRequest;
      // verify the required parameter 'eMGetTemplateContentRequest' is set
      if (eMGetTemplateContentRequest === undefined || eMGetTemplateContentRequest === null) {
        throw new Error("Missing the required parameter 'eMGetTemplateContentRequest' when calling eMGetTemplateContent");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetDataSourceEngineUserNameDefaultResponse;
      return this.apiClient.callApi(
        '/EM_GetTemplateContent', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Proxy call to get EM template content
     * Proxy call to get EM template content
     * @param {module:com.alterian.ja.model/EMGetTemplateContentRequest} eMGetTemplateContentRequest Proxy call to get EM template content
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/GetDataSourceEngineUserNameDefaultResponse}
     */
    eMGetTemplateContent(eMGetTemplateContentRequest) {
      return this.eMGetTemplateContentWithHttpInfo(eMGetTemplateContentRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Proxy call to EM UserManager.asmx             public List(DMUser) GetUsers(string Token) Can use with existing EMToken or supply mapping Id for auto-login
     * Proxy call to EM UserManager.asmx             public List(DMUser) GetUsers(string Token) Can use with existing EMToken or supply mapping Id for auto-login
     * @param {module:com.alterian.ja.model/EMGetUsersRequest} eMGetUsersRequest Proxy call to EM UserManager.asmx             public List(DMUser) GetUsers(string Token) Can use with existing EMToken or supply mapping Id for auto-login
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/EMGetClientGroupUsersDefaultResponse} and HTTP response
     */
    eMGetUsersWithHttpInfo(eMGetUsersRequest) {
      let postBody = eMGetUsersRequest;
      // verify the required parameter 'eMGetUsersRequest' is set
      if (eMGetUsersRequest === undefined || eMGetUsersRequest === null) {
        throw new Error("Missing the required parameter 'eMGetUsersRequest' when calling eMGetUsers");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EMGetClientGroupUsersDefaultResponse;
      return this.apiClient.callApi(
        '/EM_GetUsers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Proxy call to EM UserManager.asmx             public List(DMUser) GetUsers(string Token) Can use with existing EMToken or supply mapping Id for auto-login
     * Proxy call to EM UserManager.asmx             public List(DMUser) GetUsers(string Token) Can use with existing EMToken or supply mapping Id for auto-login
     * @param {module:com.alterian.ja.model/EMGetUsersRequest} eMGetUsersRequest Proxy call to EM UserManager.asmx             public List(DMUser) GetUsers(string Token) Can use with existing EMToken or supply mapping Id for auto-login
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/EMGetClientGroupUsersDefaultResponse}
     */
    eMGetUsers(eMGetUsersRequest) {
      return this.eMGetUsersWithHttpInfo(eMGetUsersRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Proxy call to EM Authenticate.asmx             public bool IsSysAdmin(string Token)
     * Proxy call to EM Authenticate.asmx             public bool IsSysAdmin(string Token)
     * @param {module:com.alterian.ja.model/EMGetClientInfoRequest} eMGetClientInfoRequest Proxy call to EM Authenticate.asmx             public bool IsSysAdmin(string Token)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse} and HTTP response
     */
    eMIsSysAdminWithHttpInfo(eMGetClientInfoRequest) {
      let postBody = eMGetClientInfoRequest;
      // verify the required parameter 'eMGetClientInfoRequest' is set
      if (eMGetClientInfoRequest === undefined || eMGetClientInfoRequest === null) {
        throw new Error("Missing the required parameter 'eMGetClientInfoRequest' when calling eMIsSysAdmin");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHChangePasswordDefaultResponse;
      return this.apiClient.callApi(
        '/EM_IsSysAdmin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Proxy call to EM Authenticate.asmx             public bool IsSysAdmin(string Token)
     * Proxy call to EM Authenticate.asmx             public bool IsSysAdmin(string Token)
     * @param {module:com.alterian.ja.model/EMGetClientInfoRequest} eMGetClientInfoRequest Proxy call to EM Authenticate.asmx             public bool IsSysAdmin(string Token)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse}
     */
    eMIsSysAdmin(eMGetClientInfoRequest) {
      return this.eMIsSysAdminWithHttpInfo(eMGetClientInfoRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Proxy call to EM Authenticate.asmx             public void Logout(string Token)             Logs the user associated with the token provided out of the system.
     * Proxy call to EM Authenticate.asmx             public void Logout(string Token)             Logs the user associated with the token provided out of the system.
     * @param {module:com.alterian.ja.model/EMLogOffRequest} eMLogOffRequest Proxy call to EM Authenticate.asmx             public void Logout(string Token)             Logs the user associated with the token provided out of the system.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse} and HTTP response
     */
    eMLogOffWithHttpInfo(eMLogOffRequest) {
      let postBody = eMLogOffRequest;
      // verify the required parameter 'eMLogOffRequest' is set
      if (eMLogOffRequest === undefined || eMLogOffRequest === null) {
        throw new Error("Missing the required parameter 'eMLogOffRequest' when calling eMLogOff");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHChangePasswordDefaultResponse;
      return this.apiClient.callApi(
        '/EM_LogOff', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Proxy call to EM Authenticate.asmx             public void Logout(string Token)             Logs the user associated with the token provided out of the system.
     * Proxy call to EM Authenticate.asmx             public void Logout(string Token)             Logs the user associated with the token provided out of the system.
     * @param {module:com.alterian.ja.model/EMLogOffRequest} eMLogOffRequest Proxy call to EM Authenticate.asmx             public void Logout(string Token)             Logs the user associated with the token provided out of the system.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse}
     */
    eMLogOff(eMLogOffRequest) {
      return this.eMLogOffWithHttpInfo(eMLogOffRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Proxy call to EM UserManager.asmx to pause a deployment
     * Proxy call to EM UserManager.asmx to pause a deployment
     * @param {module:com.alterian.ja.model/EMPauseDeploymentRequest} eMPauseDeploymentRequest Proxy call to EM UserManager.asmx to pause a deployment
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse} and HTTP response
     */
    eMPauseDeploymentWithHttpInfo(eMPauseDeploymentRequest) {
      let postBody = eMPauseDeploymentRequest;
      // verify the required parameter 'eMPauseDeploymentRequest' is set
      if (eMPauseDeploymentRequest === undefined || eMPauseDeploymentRequest === null) {
        throw new Error("Missing the required parameter 'eMPauseDeploymentRequest' when calling eMPauseDeployment");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHChangePasswordDefaultResponse;
      return this.apiClient.callApi(
        '/EM_PauseDeployment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Proxy call to EM UserManager.asmx to pause a deployment
     * Proxy call to EM UserManager.asmx to pause a deployment
     * @param {module:com.alterian.ja.model/EMPauseDeploymentRequest} eMPauseDeploymentRequest Proxy call to EM UserManager.asmx to pause a deployment
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse}
     */
    eMPauseDeployment(eMPauseDeploymentRequest) {
      return this.eMPauseDeploymentWithHttpInfo(eMPauseDeploymentRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns back the primary keys for a specific EM client
     * Returns back the primary keys for a specific EM client
     * @param {module:com.alterian.ja.model/EMPrimaryKeysRequest} eMPrimaryKeysRequest Returns back the primary keys for a specific EM client
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/EMPrimaryKeysDefaultResponse} and HTTP response
     */
    eMPrimaryKeysWithHttpInfo(eMPrimaryKeysRequest) {
      let postBody = eMPrimaryKeysRequest;
      // verify the required parameter 'eMPrimaryKeysRequest' is set
      if (eMPrimaryKeysRequest === undefined || eMPrimaryKeysRequest === null) {
        throw new Error("Missing the required parameter 'eMPrimaryKeysRequest' when calling eMPrimaryKeys");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EMPrimaryKeysDefaultResponse;
      return this.apiClient.callApi(
        '/EM_PrimaryKeys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns back the primary keys for a specific EM client
     * Returns back the primary keys for a specific EM client
     * @param {module:com.alterian.ja.model/EMPrimaryKeysRequest} eMPrimaryKeysRequest Returns back the primary keys for a specific EM client
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/EMPrimaryKeysDefaultResponse}
     */
    eMPrimaryKeys(eMPrimaryKeysRequest) {
      return this.eMPrimaryKeysWithHttpInfo(eMPrimaryKeysRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Sets the URL used to connect to the EM instance
     * Sets the URL used to connect to the EM instance
     * @param {module:com.alterian.ja.model/EMSetEMServiceURLRequest} eMSetEMServiceURLRequest Sets the URL used to connect to the EM instance
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse} and HTTP response
     */
    eMSetEMServiceURLWithHttpInfo(eMSetEMServiceURLRequest) {
      let postBody = eMSetEMServiceURLRequest;
      // verify the required parameter 'eMSetEMServiceURLRequest' is set
      if (eMSetEMServiceURLRequest === undefined || eMSetEMServiceURLRequest === null) {
        throw new Error("Missing the required parameter 'eMSetEMServiceURLRequest' when calling eMSetEMServiceURL");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHChangePasswordDefaultResponse;
      return this.apiClient.callApi(
        '/EM_SetEMServiceURL', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Sets the URL used to connect to the EM instance
     * Sets the URL used to connect to the EM instance
     * @param {module:com.alterian.ja.model/EMSetEMServiceURLRequest} eMSetEMServiceURLRequest Sets the URL used to connect to the EM instance
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse}
     */
    eMSetEMServiceURL(eMSetEMServiceURLRequest) {
      return this.eMSetEMServiceURLWithHttpInfo(eMSetEMServiceURLRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Tests the EM Service URL
     * Tests the EM Service URL
     * @param {module:com.alterian.ja.model/EMTestEMServiceURLRequest} eMTestEMServiceURLRequest Tests the EM Service URL
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse} and HTTP response
     */
    eMTestEMServiceURLWithHttpInfo(eMTestEMServiceURLRequest) {
      let postBody = eMTestEMServiceURLRequest;
      // verify the required parameter 'eMTestEMServiceURLRequest' is set
      if (eMTestEMServiceURLRequest === undefined || eMTestEMServiceURLRequest === null) {
        throw new Error("Missing the required parameter 'eMTestEMServiceURLRequest' when calling eMTestEMServiceURL");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHChangePasswordDefaultResponse;
      return this.apiClient.callApi(
        '/EM_TestEMServiceURL', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Tests the EM Service URL
     * Tests the EM Service URL
     * @param {module:com.alterian.ja.model/EMTestEMServiceURLRequest} eMTestEMServiceURLRequest Tests the EM Service URL
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse}
     */
    eMTestEMServiceURL(eMTestEMServiceURLRequest) {
      return this.eMTestEMServiceURLWithHttpInfo(eMTestEMServiceURLRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
