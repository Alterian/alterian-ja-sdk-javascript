/**
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AUTHChangePasswordDefaultResponse from '../com.alterian.ja.model/AUTHChangePasswordDefaultResponse';
import AUTHCreateLoginDefaultResponse from '../com.alterian.ja.model/AUTHCreateLoginDefaultResponse';
import CreateImpersonationTokenRequest from '../com.alterian.ja.model/CreateImpersonationTokenRequest';
import CreateStaticTokenRequest from '../com.alterian.ja.model/CreateStaticTokenRequest';
import DeleteStaticTokenRequest from '../com.alterian.ja.model/DeleteStaticTokenRequest';
import GetTokensDefaultResponse from '../com.alterian.ja.model/GetTokensDefaultResponse';
import GetTokensRequest from '../com.alterian.ja.model/GetTokensRequest';
import UpdateStaticTokenRequest from '../com.alterian.ja.model/UpdateStaticTokenRequest';

/**
* Token service.
* @module api/TokenApi
* @version 6.35.0
*/
export default class TokenApi {

    /**
    * Constructs a new TokenApi. 
    * @alias module:api/TokenApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Using an SA token, create an impersonation token for the specific client and, optionally, user
     * Using an SA token, create an impersonation token for the specific client and, optionally, user
     * @param {module:com.alterian.ja.model/CreateImpersonationTokenRequest} createImpersonationTokenRequest Using an SA token, create an impersonation token for the specific client and, optionally, user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHCreateLoginDefaultResponse} and HTTP response
     */
    createImpersonationTokenWithHttpInfo(createImpersonationTokenRequest) {
      let postBody = createImpersonationTokenRequest;
      // verify the required parameter 'createImpersonationTokenRequest' is set
      if (createImpersonationTokenRequest === undefined || createImpersonationTokenRequest === null) {
        throw new Error("Missing the required parameter 'createImpersonationTokenRequest' when calling createImpersonationToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHCreateLoginDefaultResponse;
      return this.apiClient.callApi(
        '/CreateImpersonationToken', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Using an SA token, create an impersonation token for the specific client and, optionally, user
     * Using an SA token, create an impersonation token for the specific client and, optionally, user
     * @param {module:com.alterian.ja.model/CreateImpersonationTokenRequest} createImpersonationTokenRequest Using an SA token, create an impersonation token for the specific client and, optionally, user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHCreateLoginDefaultResponse}
     */
    createImpersonationToken(createImpersonationTokenRequest) {
      return this.createImpersonationTokenWithHttpInfo(createImpersonationTokenRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a static token for API usage
     * Create a static token for API usage
     * @param {module:com.alterian.ja.model/CreateStaticTokenRequest} createStaticTokenRequest Create a static token for API usage
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHCreateLoginDefaultResponse} and HTTP response
     */
    createStaticTokenWithHttpInfo(createStaticTokenRequest) {
      let postBody = createStaticTokenRequest;
      // verify the required parameter 'createStaticTokenRequest' is set
      if (createStaticTokenRequest === undefined || createStaticTokenRequest === null) {
        throw new Error("Missing the required parameter 'createStaticTokenRequest' when calling createStaticToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHCreateLoginDefaultResponse;
      return this.apiClient.callApi(
        '/CreateStaticToken', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a static token for API usage
     * Create a static token for API usage
     * @param {module:com.alterian.ja.model/CreateStaticTokenRequest} createStaticTokenRequest Create a static token for API usage
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHCreateLoginDefaultResponse}
     */
    createStaticToken(createStaticTokenRequest) {
      return this.createStaticTokenWithHttpInfo(createStaticTokenRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove a static token.  Any automation or other application which is using this token will cease to function.
     * Remove a static token.  Any automation or other application which is using this token will cease to function.
     * @param {module:com.alterian.ja.model/DeleteStaticTokenRequest} deleteStaticTokenRequest Remove a static token.  Any automation or other application which is using this token will cease to function.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse} and HTTP response
     */
    deleteStaticTokenWithHttpInfo(deleteStaticTokenRequest) {
      let postBody = deleteStaticTokenRequest;
      // verify the required parameter 'deleteStaticTokenRequest' is set
      if (deleteStaticTokenRequest === undefined || deleteStaticTokenRequest === null) {
        throw new Error("Missing the required parameter 'deleteStaticTokenRequest' when calling deleteStaticToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHChangePasswordDefaultResponse;
      return this.apiClient.callApi(
        '/DeleteStaticToken', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove a static token.  Any automation or other application which is using this token will cease to function.
     * Remove a static token.  Any automation or other application which is using this token will cease to function.
     * @param {module:com.alterian.ja.model/DeleteStaticTokenRequest} deleteStaticTokenRequest Remove a static token.  Any automation or other application which is using this token will cease to function.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse}
     */
    deleteStaticToken(deleteStaticTokenRequest) {
      return this.deleteStaticTokenWithHttpInfo(deleteStaticTokenRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Request a list of tokens.
     * Request a list of tokens.
     * @param {module:com.alterian.ja.model/GetTokensRequest} getTokensRequest Request a list of tokens.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/GetTokensDefaultResponse} and HTTP response
     */
    getTokensWithHttpInfo(getTokensRequest) {
      let postBody = getTokensRequest;
      // verify the required parameter 'getTokensRequest' is set
      if (getTokensRequest === undefined || getTokensRequest === null) {
        throw new Error("Missing the required parameter 'getTokensRequest' when calling getTokens");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetTokensDefaultResponse;
      return this.apiClient.callApi(
        '/GetTokens', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Request a list of tokens.
     * Request a list of tokens.
     * @param {module:com.alterian.ja.model/GetTokensRequest} getTokensRequest Request a list of tokens.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/GetTokensDefaultResponse}
     */
    getTokens(getTokensRequest) {
      return this.getTokensWithHttpInfo(getTokensRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Change the UserID mapping for a static token
     * Change the UserID mapping for a static token
     * @param {module:com.alterian.ja.model/UpdateStaticTokenRequest} updateStaticTokenRequest Change the UserID mapping for a static token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse} and HTTP response
     */
    updateStaticTokenWithHttpInfo(updateStaticTokenRequest) {
      let postBody = updateStaticTokenRequest;
      // verify the required parameter 'updateStaticTokenRequest' is set
      if (updateStaticTokenRequest === undefined || updateStaticTokenRequest === null) {
        throw new Error("Missing the required parameter 'updateStaticTokenRequest' when calling updateStaticToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHChangePasswordDefaultResponse;
      return this.apiClient.callApi(
        '/UpdateStaticToken', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Change the UserID mapping for a static token
     * Change the UserID mapping for a static token
     * @param {module:com.alterian.ja.model/UpdateStaticTokenRequest} updateStaticTokenRequest Change the UserID mapping for a static token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse}
     */
    updateStaticToken(updateStaticTokenRequest) {
      return this.updateStaticTokenWithHttpInfo(updateStaticTokenRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
