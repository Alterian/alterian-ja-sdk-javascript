/**
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AUTHChangePasswordDefaultResponse from '../com.alterian.ja.model/AUTHChangePasswordDefaultResponse';
import CreateClientDefaultResponse from '../com.alterian.ja.model/CreateClientDefaultResponse';
import CreateEMMappingRequest from '../com.alterian.ja.model/CreateEMMappingRequest';
import CreateEMSessionDefaultResponse from '../com.alterian.ja.model/CreateEMSessionDefaultResponse';
import CreateEMSessionRequest from '../com.alterian.ja.model/CreateEMSessionRequest';
import DeleteEMMappingRequest from '../com.alterian.ja.model/DeleteEMMappingRequest';
import GetClientSetsRequest from '../com.alterian.ja.model/GetClientSetsRequest';
import GetEMDownloadMappingsDefaultResponse from '../com.alterian.ja.model/GetEMDownloadMappingsDefaultResponse';
import GetEMMappingDefaultResponse from '../com.alterian.ja.model/GetEMMappingDefaultResponse';
import GetEMMappingRequest from '../com.alterian.ja.model/GetEMMappingRequest';
import GetEMMappingsDefaultResponse from '../com.alterian.ja.model/GetEMMappingsDefaultResponse';
import GetEMMappingsRequest from '../com.alterian.ja.model/GetEMMappingsRequest';
import MoveEMMappingRequest from '../com.alterian.ja.model/MoveEMMappingRequest';
import RenameEMMappingRequest from '../com.alterian.ja.model/RenameEMMappingRequest';

/**
* EmailManagerMapping service.
* @module api/EmailManagerMappingApi
* @version 6.35.0
*/
export default class EmailManagerMappingApi {

    /**
    * Constructs a new EmailManagerMappingApi. 
    * @alias module:api/EmailManagerMappingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Added a new @see(EMUploadMapping) into the system, returning back the ID of the new mapping.  Note that @see(EMMapping)s must be uniquely named.
     * Added a new @see(EMUploadMapping) into the system, returning back the ID of the new mapping.  Note that @see(EMMapping)s must be uniquely named.
     * @param {module:com.alterian.ja.model/CreateEMMappingRequest} createEMMappingRequest Added a new @see(EMUploadMapping) into the system, returning back the ID of the new mapping.  Note that @see(EMMapping)s must be uniquely named.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/CreateClientDefaultResponse} and HTTP response
     */
    createEMMappingWithHttpInfo(createEMMappingRequest) {
      let postBody = createEMMappingRequest;
      // verify the required parameter 'createEMMappingRequest' is set
      if (createEMMappingRequest === undefined || createEMMappingRequest === null) {
        throw new Error("Missing the required parameter 'createEMMappingRequest' when calling createEMMapping");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateClientDefaultResponse;
      return this.apiClient.callApi(
        '/CreateEMMapping', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Added a new @see(EMUploadMapping) into the system, returning back the ID of the new mapping.  Note that @see(EMMapping)s must be uniquely named.
     * Added a new @see(EMUploadMapping) into the system, returning back the ID of the new mapping.  Note that @see(EMMapping)s must be uniquely named.
     * @param {module:com.alterian.ja.model/CreateEMMappingRequest} createEMMappingRequest Added a new @see(EMUploadMapping) into the system, returning back the ID of the new mapping.  Note that @see(EMMapping)s must be uniquely named.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/CreateClientDefaultResponse}
     */
    createEMMapping(createEMMappingRequest) {
      return this.createEMMappingWithHttpInfo(createEMMappingRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Connects to a mapping's EM system and provides back the application details [including token and other settings]
     * Connects to a mapping's EM system and provides back the application details [including token and other settings]
     * @param {module:com.alterian.ja.model/CreateEMSessionRequest} createEMSessionRequest Connects to a mapping's EM system and provides back the application details [including token and other settings]
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/CreateEMSessionDefaultResponse} and HTTP response
     */
    createEMSessionWithHttpInfo(createEMSessionRequest) {
      let postBody = createEMSessionRequest;
      // verify the required parameter 'createEMSessionRequest' is set
      if (createEMSessionRequest === undefined || createEMSessionRequest === null) {
        throw new Error("Missing the required parameter 'createEMSessionRequest' when calling createEMSession");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateEMSessionDefaultResponse;
      return this.apiClient.callApi(
        '/CreateEMSession', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Connects to a mapping's EM system and provides back the application details [including token and other settings]
     * Connects to a mapping's EM system and provides back the application details [including token and other settings]
     * @param {module:com.alterian.ja.model/CreateEMSessionRequest} createEMSessionRequest Connects to a mapping's EM system and provides back the application details [including token and other settings]
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/CreateEMSessionDefaultResponse}
     */
    createEMSession(createEMSessionRequest) {
      return this.createEMSessionWithHttpInfo(createEMSessionRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes an @see(EMUploadMapping) from the system.  If a mapping which is currently in use is deleted, campaigns which rely upon it will cease to function.
     * Deletes an @see(EMUploadMapping) from the system.  If a mapping which is currently in use is deleted, campaigns which rely upon it will cease to function.
     * @param {module:com.alterian.ja.model/DeleteEMMappingRequest} deleteEMMappingRequest Deletes an @see(EMUploadMapping) from the system.  If a mapping which is currently in use is deleted, campaigns which rely upon it will cease to function.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse} and HTTP response
     */
    deleteEMMappingWithHttpInfo(deleteEMMappingRequest) {
      let postBody = deleteEMMappingRequest;
      // verify the required parameter 'deleteEMMappingRequest' is set
      if (deleteEMMappingRequest === undefined || deleteEMMappingRequest === null) {
        throw new Error("Missing the required parameter 'deleteEMMappingRequest' when calling deleteEMMapping");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHChangePasswordDefaultResponse;
      return this.apiClient.callApi(
        '/DeleteEMMapping', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes an @see(EMUploadMapping) from the system.  If a mapping which is currently in use is deleted, campaigns which rely upon it will cease to function.
     * Deletes an @see(EMUploadMapping) from the system.  If a mapping which is currently in use is deleted, campaigns which rely upon it will cease to function.
     * @param {module:com.alterian.ja.model/DeleteEMMappingRequest} deleteEMMappingRequest Deletes an @see(EMUploadMapping) from the system.  If a mapping which is currently in use is deleted, campaigns which rely upon it will cease to function.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse}
     */
    deleteEMMapping(deleteEMMappingRequest) {
      return this.deleteEMMappingWithHttpInfo(deleteEMMappingRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Return back a list of the @see(EMDownloadMapping)s which the token can view.
     * Return back a list of the @see(EMDownloadMapping)s which the token can view.
     * @param {module:com.alterian.ja.model/GetClientSetsRequest} getClientSetsRequest Return back a list of the @see(EMDownloadMapping)s which the token can view.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/GetEMDownloadMappingsDefaultResponse} and HTTP response
     */
    getEMDownloadMappingsWithHttpInfo(getClientSetsRequest) {
      let postBody = getClientSetsRequest;
      // verify the required parameter 'getClientSetsRequest' is set
      if (getClientSetsRequest === undefined || getClientSetsRequest === null) {
        throw new Error("Missing the required parameter 'getClientSetsRequest' when calling getEMDownloadMappings");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetEMDownloadMappingsDefaultResponse;
      return this.apiClient.callApi(
        '/GetEMDownloadMappings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Return back a list of the @see(EMDownloadMapping)s which the token can view.
     * Return back a list of the @see(EMDownloadMapping)s which the token can view.
     * @param {module:com.alterian.ja.model/GetClientSetsRequest} getClientSetsRequest Return back a list of the @see(EMDownloadMapping)s which the token can view.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/GetEMDownloadMappingsDefaultResponse}
     */
    getEMDownloadMappings(getClientSetsRequest) {
      return this.getEMDownloadMappingsWithHttpInfo(getClientSetsRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns back a single @see(EMUploadMapping) by its ID.
     * Returns back a single @see(EMUploadMapping) by its ID.
     * @param {module:com.alterian.ja.model/GetEMMappingRequest} getEMMappingRequest Returns back a single @see(EMUploadMapping) by its ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/GetEMMappingDefaultResponse} and HTTP response
     */
    getEMMappingWithHttpInfo(getEMMappingRequest) {
      let postBody = getEMMappingRequest;
      // verify the required parameter 'getEMMappingRequest' is set
      if (getEMMappingRequest === undefined || getEMMappingRequest === null) {
        throw new Error("Missing the required parameter 'getEMMappingRequest' when calling getEMMapping");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetEMMappingDefaultResponse;
      return this.apiClient.callApi(
        '/GetEMMapping', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns back a single @see(EMUploadMapping) by its ID.
     * Returns back a single @see(EMUploadMapping) by its ID.
     * @param {module:com.alterian.ja.model/GetEMMappingRequest} getEMMappingRequest Returns back a single @see(EMUploadMapping) by its ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/GetEMMappingDefaultResponse}
     */
    getEMMapping(getEMMappingRequest) {
      return this.getEMMappingWithHttpInfo(getEMMappingRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Return back a list of the @see(EMUploadMapping)s which the token can view.
     * Return back a list of the @see(EMUploadMapping)s which the token can view.
     * @param {module:com.alterian.ja.model/GetEMMappingsRequest} getEMMappingsRequest Return back a list of the @see(EMUploadMapping)s which the token can view.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/GetEMMappingsDefaultResponse} and HTTP response
     */
    getEMMappingsWithHttpInfo(getEMMappingsRequest) {
      let postBody = getEMMappingsRequest;
      // verify the required parameter 'getEMMappingsRequest' is set
      if (getEMMappingsRequest === undefined || getEMMappingsRequest === null) {
        throw new Error("Missing the required parameter 'getEMMappingsRequest' when calling getEMMappings");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetEMMappingsDefaultResponse;
      return this.apiClient.callApi(
        '/GetEMMappings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Return back a list of the @see(EMUploadMapping)s which the token can view.
     * Return back a list of the @see(EMUploadMapping)s which the token can view.
     * @param {module:com.alterian.ja.model/GetEMMappingsRequest} getEMMappingsRequest Return back a list of the @see(EMUploadMapping)s which the token can view.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/GetEMMappingsDefaultResponse}
     */
    getEMMappings(getEMMappingsRequest) {
      return this.getEMMappingsWithHttpInfo(getEMMappingsRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Provides a way to easily move an @see(EMUploadMapping) from one folder to another.  Note that @see(EMMapping)s must be uniquely named within a folder.
     * Provides a way to easily move an @see(EMUploadMapping) from one folder to another.  Note that @see(EMMapping)s must be uniquely named within a folder.
     * @param {module:com.alterian.ja.model/MoveEMMappingRequest} moveEMMappingRequest Provides a way to easily move an @see(EMUploadMapping) from one folder to another.  Note that @see(EMMapping)s must be uniquely named within a folder.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse} and HTTP response
     */
    moveEMMappingWithHttpInfo(moveEMMappingRequest) {
      let postBody = moveEMMappingRequest;
      // verify the required parameter 'moveEMMappingRequest' is set
      if (moveEMMappingRequest === undefined || moveEMMappingRequest === null) {
        throw new Error("Missing the required parameter 'moveEMMappingRequest' when calling moveEMMapping");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHChangePasswordDefaultResponse;
      return this.apiClient.callApi(
        '/MoveEMMapping', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Provides a way to easily move an @see(EMUploadMapping) from one folder to another.  Note that @see(EMMapping)s must be uniquely named within a folder.
     * Provides a way to easily move an @see(EMUploadMapping) from one folder to another.  Note that @see(EMMapping)s must be uniquely named within a folder.
     * @param {module:com.alterian.ja.model/MoveEMMappingRequest} moveEMMappingRequest Provides a way to easily move an @see(EMUploadMapping) from one folder to another.  Note that @see(EMMapping)s must be uniquely named within a folder.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse}
     */
    moveEMMapping(moveEMMappingRequest) {
      return this.moveEMMappingWithHttpInfo(moveEMMappingRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Provides a way to easily rename an @see(EMUploadMapping).  Note that @see(EMMapping)s must be uniquely named.
     * Provides a way to easily rename an @see(EMUploadMapping).  Note that @see(EMMapping)s must be uniquely named.
     * @param {module:com.alterian.ja.model/RenameEMMappingRequest} renameEMMappingRequest Provides a way to easily rename an @see(EMUploadMapping).  Note that @see(EMMapping)s must be uniquely named.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse} and HTTP response
     */
    renameEMMappingWithHttpInfo(renameEMMappingRequest) {
      let postBody = renameEMMappingRequest;
      // verify the required parameter 'renameEMMappingRequest' is set
      if (renameEMMappingRequest === undefined || renameEMMappingRequest === null) {
        throw new Error("Missing the required parameter 'renameEMMappingRequest' when calling renameEMMapping");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHChangePasswordDefaultResponse;
      return this.apiClient.callApi(
        '/RenameEMMapping', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Provides a way to easily rename an @see(EMUploadMapping).  Note that @see(EMMapping)s must be uniquely named.
     * Provides a way to easily rename an @see(EMUploadMapping).  Note that @see(EMMapping)s must be uniquely named.
     * @param {module:com.alterian.ja.model/RenameEMMappingRequest} renameEMMappingRequest Provides a way to easily rename an @see(EMUploadMapping).  Note that @see(EMMapping)s must be uniquely named.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse}
     */
    renameEMMapping(renameEMMappingRequest) {
      return this.renameEMMappingWithHttpInfo(renameEMMappingRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates an @see(EMUploadMapping) so you can change the name, folder, etc.  Note that @see(EMMapping)s must be uniquely named.
     * Updates an @see(EMUploadMapping) so you can change the name, folder, etc.  Note that @see(EMMapping)s must be uniquely named.
     * @param {module:com.alterian.ja.model/CreateEMMappingRequest} createEMMappingRequest Updates an @see(EMUploadMapping) so you can change the name, folder, etc.  Note that @see(EMMapping)s must be uniquely named.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse} and HTTP response
     */
    updateEMMappingWithHttpInfo(createEMMappingRequest) {
      let postBody = createEMMappingRequest;
      // verify the required parameter 'createEMMappingRequest' is set
      if (createEMMappingRequest === undefined || createEMMappingRequest === null) {
        throw new Error("Missing the required parameter 'createEMMappingRequest' when calling updateEMMapping");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHChangePasswordDefaultResponse;
      return this.apiClient.callApi(
        '/UpdateEMMapping', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates an @see(EMUploadMapping) so you can change the name, folder, etc.  Note that @see(EMMapping)s must be uniquely named.
     * Updates an @see(EMUploadMapping) so you can change the name, folder, etc.  Note that @see(EMMapping)s must be uniquely named.
     * @param {module:com.alterian.ja.model/CreateEMMappingRequest} createEMMappingRequest Updates an @see(EMUploadMapping) so you can change the name, folder, etc.  Note that @see(EMMapping)s must be uniquely named.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse}
     */
    updateEMMapping(createEMMappingRequest) {
      return this.updateEMMappingWithHttpInfo(createEMMappingRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
