/**
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AUTHChangePasswordDefaultResponse from '../com.alterian.ja.model/AUTHChangePasswordDefaultResponse';
import ClearPermissionsRequest from '../com.alterian.ja.model/ClearPermissionsRequest';
import GetAvailablePermissionsDefaultResponse from '../com.alterian.ja.model/GetAvailablePermissionsDefaultResponse';
import GetGroupsWithPermissionDefaultResponse from '../com.alterian.ja.model/GetGroupsWithPermissionDefaultResponse';
import GetGroupsWithPermissionRequest from '../com.alterian.ja.model/GetGroupsWithPermissionRequest';
import GetPermissionsDefaultResponse from '../com.alterian.ja.model/GetPermissionsDefaultResponse';
import GetPermissionsRequest from '../com.alterian.ja.model/GetPermissionsRequest';
import GetPermittedUsersAndGroupsRequest from '../com.alterian.ja.model/GetPermittedUsersAndGroupsRequest';
import GetResourcesDefaultResponse from '../com.alterian.ja.model/GetResourcesDefaultResponse';
import GetUsersWithPermissionRequest from '../com.alterian.ja.model/GetUsersWithPermissionRequest';
import SetPermissionsRequest from '../com.alterian.ja.model/SetPermissionsRequest';
import TakeOwnershipPermissionRequest from '../com.alterian.ja.model/TakeOwnershipPermissionRequest';

/**
* Permissions service.
* @module api/PermissionsApi
* @version 6.35.0
*/
export default class PermissionsApi {

    /**
    * Constructs a new PermissionsApi. 
    * @alias module:api/PermissionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Clear the permissions for the specific security ID
     * Clear the permissions for the specific security ID
     * @param {module:com.alterian.ja.model/ClearPermissionsRequest} clearPermissionsRequest Clear the permissions for the specific security ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse} and HTTP response
     */
    clearPermissionsWithHttpInfo(clearPermissionsRequest) {
      let postBody = clearPermissionsRequest;
      // verify the required parameter 'clearPermissionsRequest' is set
      if (clearPermissionsRequest === undefined || clearPermissionsRequest === null) {
        throw new Error("Missing the required parameter 'clearPermissionsRequest' when calling clearPermissions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHChangePasswordDefaultResponse;
      return this.apiClient.callApi(
        '/ClearPermissions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Clear the permissions for the specific security ID
     * Clear the permissions for the specific security ID
     * @param {module:com.alterian.ja.model/ClearPermissionsRequest} clearPermissionsRequest Clear the permissions for the specific security ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse}
     */
    clearPermissions(clearPermissionsRequest) {
      return this.clearPermissionsWithHttpInfo(clearPermissionsRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets a list of the permissions; this is a simple list and does not include permission values, etc.
     * Gets a list of the permissions; this is a simple list and does not include permission values, etc.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/GetAvailablePermissionsDefaultResponse} and HTTP response
     */
    getAvailablePermissionsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAvailablePermissionsDefaultResponse;
      return this.apiClient.callApi(
        '/GetAvailablePermissions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Gets a list of the permissions; this is a simple list and does not include permission values, etc.
     * Gets a list of the permissions; this is a simple list and does not include permission values, etc.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/GetAvailablePermissionsDefaultResponse}
     */
    getAvailablePermissions() {
      return this.getAvailablePermissionsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List the groups which have been granted the specified permission
     * List the groups which have been granted the specified permission
     * @param {module:com.alterian.ja.model/GetGroupsWithPermissionRequest} getGroupsWithPermissionRequest List the groups which have been granted the specified permission
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/GetGroupsWithPermissionDefaultResponse} and HTTP response
     */
    getGroupsWithPermissionWithHttpInfo(getGroupsWithPermissionRequest) {
      let postBody = getGroupsWithPermissionRequest;
      // verify the required parameter 'getGroupsWithPermissionRequest' is set
      if (getGroupsWithPermissionRequest === undefined || getGroupsWithPermissionRequest === null) {
        throw new Error("Missing the required parameter 'getGroupsWithPermissionRequest' when calling getGroupsWithPermission");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetGroupsWithPermissionDefaultResponse;
      return this.apiClient.callApi(
        '/GetGroupsWithPermission', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List the groups which have been granted the specified permission
     * List the groups which have been granted the specified permission
     * @param {module:com.alterian.ja.model/GetGroupsWithPermissionRequest} getGroupsWithPermissionRequest List the groups which have been granted the specified permission
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/GetGroupsWithPermissionDefaultResponse}
     */
    getGroupsWithPermission(getGroupsWithPermissionRequest) {
      return this.getGroupsWithPermissionWithHttpInfo(getGroupsWithPermissionRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Given a particular item, fetch a list of permissions on that item for a given user or group.
     * Given a particular item, fetch a list of permissions on that item for a given user or group.
     * @param {module:com.alterian.ja.model/GetPermissionsRequest} getPermissionsRequest Given a particular item, fetch a list of permissions on that item for a given user or group.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/GetPermissionsDefaultResponse} and HTTP response
     */
    getPermissionsWithHttpInfo(getPermissionsRequest) {
      let postBody = getPermissionsRequest;
      // verify the required parameter 'getPermissionsRequest' is set
      if (getPermissionsRequest === undefined || getPermissionsRequest === null) {
        throw new Error("Missing the required parameter 'getPermissionsRequest' when calling getPermissions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetPermissionsDefaultResponse;
      return this.apiClient.callApi(
        '/GetPermissions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Given a particular item, fetch a list of permissions on that item for a given user or group.
     * Given a particular item, fetch a list of permissions on that item for a given user or group.
     * @param {module:com.alterian.ja.model/GetPermissionsRequest} getPermissionsRequest Given a particular item, fetch a list of permissions on that item for a given user or group.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/GetPermissionsDefaultResponse}
     */
    getPermissions(getPermissionsRequest) {
      return this.getPermissionsWithHttpInfo(getPermissionsRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List the users and groups which have direct or indirect access to the specified item
     * List the users and groups which have direct or indirect access to the specified item
     * @param {module:com.alterian.ja.model/GetPermittedUsersAndGroupsRequest} getPermittedUsersAndGroupsRequest List the users and groups which have direct or indirect access to the specified item
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/GetGroupsWithPermissionDefaultResponse} and HTTP response
     */
    getPermittedUsersAndGroupsWithHttpInfo(getPermittedUsersAndGroupsRequest) {
      let postBody = getPermittedUsersAndGroupsRequest;
      // verify the required parameter 'getPermittedUsersAndGroupsRequest' is set
      if (getPermittedUsersAndGroupsRequest === undefined || getPermittedUsersAndGroupsRequest === null) {
        throw new Error("Missing the required parameter 'getPermittedUsersAndGroupsRequest' when calling getPermittedUsersAndGroups");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetGroupsWithPermissionDefaultResponse;
      return this.apiClient.callApi(
        '/GetPermittedUsersAndGroups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List the users and groups which have direct or indirect access to the specified item
     * List the users and groups which have direct or indirect access to the specified item
     * @param {module:com.alterian.ja.model/GetPermittedUsersAndGroupsRequest} getPermittedUsersAndGroupsRequest List the users and groups which have direct or indirect access to the specified item
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/GetGroupsWithPermissionDefaultResponse}
     */
    getPermittedUsersAndGroups(getPermittedUsersAndGroupsRequest) {
      return this.getPermittedUsersAndGroupsWithHttpInfo(getPermittedUsersAndGroupsRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets a list of the resource types for permissions
     * Gets a list of the resource types for permissions
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/GetResourcesDefaultResponse} and HTTP response
     */
    getResourcesWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetResourcesDefaultResponse;
      return this.apiClient.callApi(
        '/GetResources', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Gets a list of the resource types for permissions
     * Gets a list of the resource types for permissions
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/GetResourcesDefaultResponse}
     */
    getResources() {
      return this.getResourcesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List the users which have been granted the specified permission
     * List the users which have been granted the specified permission
     * @param {module:com.alterian.ja.model/GetUsersWithPermissionRequest} getUsersWithPermissionRequest List the users which have been granted the specified permission
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/GetGroupsWithPermissionDefaultResponse} and HTTP response
     */
    getUsersWithPermissionWithHttpInfo(getUsersWithPermissionRequest) {
      let postBody = getUsersWithPermissionRequest;
      // verify the required parameter 'getUsersWithPermissionRequest' is set
      if (getUsersWithPermissionRequest === undefined || getUsersWithPermissionRequest === null) {
        throw new Error("Missing the required parameter 'getUsersWithPermissionRequest' when calling getUsersWithPermission");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetGroupsWithPermissionDefaultResponse;
      return this.apiClient.callApi(
        '/GetUsersWithPermission', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List the users which have been granted the specified permission
     * List the users which have been granted the specified permission
     * @param {module:com.alterian.ja.model/GetUsersWithPermissionRequest} getUsersWithPermissionRequest List the users which have been granted the specified permission
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/GetGroupsWithPermissionDefaultResponse}
     */
    getUsersWithPermission(getUsersWithPermissionRequest) {
      return this.getUsersWithPermissionWithHttpInfo(getUsersWithPermissionRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Set permissions for a particular item and securityID
     * Set permissions for a particular item and securityID
     * @param {module:com.alterian.ja.model/SetPermissionsRequest} setPermissionsRequest Set permissions for a particular item and securityID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse} and HTTP response
     */
    setPermissionsWithHttpInfo(setPermissionsRequest) {
      let postBody = setPermissionsRequest;
      // verify the required parameter 'setPermissionsRequest' is set
      if (setPermissionsRequest === undefined || setPermissionsRequest === null) {
        throw new Error("Missing the required parameter 'setPermissionsRequest' when calling setPermissions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHChangePasswordDefaultResponse;
      return this.apiClient.callApi(
        '/SetPermissions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Set permissions for a particular item and securityID
     * Set permissions for a particular item and securityID
     * @param {module:com.alterian.ja.model/SetPermissionsRequest} setPermissionsRequest Set permissions for a particular item and securityID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse}
     */
    setPermissions(setPermissionsRequest) {
      return this.setPermissionsWithHttpInfo(setPermissionsRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Change the owner of a particular item from the current owner to somebody else
     * Change the owner of a particular item from the current owner to somebody else
     * @param {module:com.alterian.ja.model/TakeOwnershipPermissionRequest} takeOwnershipPermissionRequest Change the owner of a particular item from the current owner to somebody else
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse} and HTTP response
     */
    takeOwnershipPermissionWithHttpInfo(takeOwnershipPermissionRequest) {
      let postBody = takeOwnershipPermissionRequest;
      // verify the required parameter 'takeOwnershipPermissionRequest' is set
      if (takeOwnershipPermissionRequest === undefined || takeOwnershipPermissionRequest === null) {
        throw new Error("Missing the required parameter 'takeOwnershipPermissionRequest' when calling takeOwnershipPermission");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHChangePasswordDefaultResponse;
      return this.apiClient.callApi(
        '/TakeOwnershipPermission', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Change the owner of a particular item from the current owner to somebody else
     * Change the owner of a particular item from the current owner to somebody else
     * @param {module:com.alterian.ja.model/TakeOwnershipPermissionRequest} takeOwnershipPermissionRequest Change the owner of a particular item from the current owner to somebody else
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse}
     */
    takeOwnershipPermission(takeOwnershipPermissionRequest) {
      return this.takeOwnershipPermissionWithHttpInfo(takeOwnershipPermissionRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
