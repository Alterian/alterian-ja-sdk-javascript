/**
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AUTHChangePasswordDefaultResponse from '../com.alterian.ja.model/AUTHChangePasswordDefaultResponse';
import CopyGroupRequest from '../com.alterian.ja.model/CopyGroupRequest';
import CreateClientDefaultResponse from '../com.alterian.ja.model/CreateClientDefaultResponse';
import CreateGroupRequest from '../com.alterian.ja.model/CreateGroupRequest';
import DeleteGroupRequest from '../com.alterian.ja.model/DeleteGroupRequest';
import GetGroupDefaultResponse from '../com.alterian.ja.model/GetGroupDefaultResponse';
import GetGroupMembersDefaultResponse from '../com.alterian.ja.model/GetGroupMembersDefaultResponse';
import GetGroupMembersRequest from '../com.alterian.ja.model/GetGroupMembersRequest';
import GetGroupRequest from '../com.alterian.ja.model/GetGroupRequest';
import GetGroupsDefaultResponse from '../com.alterian.ja.model/GetGroupsDefaultResponse';
import GetGroupsRequest from '../com.alterian.ja.model/GetGroupsRequest';

/**
* Groups service.
* @module api/GroupsApi
* @version 6.35.0
*/
export default class GroupsApi {

    /**
    * Constructs a new GroupsApi. 
    * @alias module:api/GroupsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Copy a group from one folder to another
     * Copy a group from one folder to another
     * @param {module:com.alterian.ja.model/CopyGroupRequest} copyGroupRequest Copy a group from one folder to another
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/CreateClientDefaultResponse} and HTTP response
     */
    copyGroupWithHttpInfo(copyGroupRequest) {
      let postBody = copyGroupRequest;
      // verify the required parameter 'copyGroupRequest' is set
      if (copyGroupRequest === undefined || copyGroupRequest === null) {
        throw new Error("Missing the required parameter 'copyGroupRequest' when calling copyGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateClientDefaultResponse;
      return this.apiClient.callApi(
        '/CopyGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Copy a group from one folder to another
     * Copy a group from one folder to another
     * @param {module:com.alterian.ja.model/CopyGroupRequest} copyGroupRequest Copy a group from one folder to another
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/CreateClientDefaultResponse}
     */
    copyGroup(copyGroupRequest) {
      return this.copyGroupWithHttpInfo(copyGroupRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a group
     * Create a group
     * @param {module:com.alterian.ja.model/CreateGroupRequest} createGroupRequest Create a group
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/CreateClientDefaultResponse} and HTTP response
     */
    createGroupWithHttpInfo(createGroupRequest) {
      let postBody = createGroupRequest;
      // verify the required parameter 'createGroupRequest' is set
      if (createGroupRequest === undefined || createGroupRequest === null) {
        throw new Error("Missing the required parameter 'createGroupRequest' when calling createGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateClientDefaultResponse;
      return this.apiClient.callApi(
        '/CreateGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a group
     * Create a group
     * @param {module:com.alterian.ja.model/CreateGroupRequest} createGroupRequest Create a group
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/CreateClientDefaultResponse}
     */
    createGroup(createGroupRequest) {
      return this.createGroupWithHttpInfo(createGroupRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a group
     * Delete a group
     * @param {module:com.alterian.ja.model/DeleteGroupRequest} deleteGroupRequest Delete a group
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse} and HTTP response
     */
    deleteGroupWithHttpInfo(deleteGroupRequest) {
      let postBody = deleteGroupRequest;
      // verify the required parameter 'deleteGroupRequest' is set
      if (deleteGroupRequest === undefined || deleteGroupRequest === null) {
        throw new Error("Missing the required parameter 'deleteGroupRequest' when calling deleteGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHChangePasswordDefaultResponse;
      return this.apiClient.callApi(
        '/DeleteGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a group
     * Delete a group
     * @param {module:com.alterian.ja.model/DeleteGroupRequest} deleteGroupRequest Delete a group
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse}
     */
    deleteGroup(deleteGroupRequest) {
      return this.deleteGroupWithHttpInfo(deleteGroupRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a group object
     * Get a group object
     * @param {module:com.alterian.ja.model/GetGroupRequest} getGroupRequest Get a group object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/GetGroupDefaultResponse} and HTTP response
     */
    getGroupWithHttpInfo(getGroupRequest) {
      let postBody = getGroupRequest;
      // verify the required parameter 'getGroupRequest' is set
      if (getGroupRequest === undefined || getGroupRequest === null) {
        throw new Error("Missing the required parameter 'getGroupRequest' when calling getGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetGroupDefaultResponse;
      return this.apiClient.callApi(
        '/GetGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a group object
     * Get a group object
     * @param {module:com.alterian.ja.model/GetGroupRequest} getGroupRequest Get a group object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/GetGroupDefaultResponse}
     */
    getGroup(getGroupRequest) {
      return this.getGroupWithHttpInfo(getGroupRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the members of a particular group
     * Get the members of a particular group
     * @param {module:com.alterian.ja.model/GetGroupMembersRequest} getGroupMembersRequest Get the members of a particular group
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/GetGroupMembersDefaultResponse} and HTTP response
     */
    getGroupMembersWithHttpInfo(getGroupMembersRequest) {
      let postBody = getGroupMembersRequest;
      // verify the required parameter 'getGroupMembersRequest' is set
      if (getGroupMembersRequest === undefined || getGroupMembersRequest === null) {
        throw new Error("Missing the required parameter 'getGroupMembersRequest' when calling getGroupMembers");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetGroupMembersDefaultResponse;
      return this.apiClient.callApi(
        '/GetGroupMembers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get the members of a particular group
     * Get the members of a particular group
     * @param {module:com.alterian.ja.model/GetGroupMembersRequest} getGroupMembersRequest Get the members of a particular group
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/GetGroupMembersDefaultResponse}
     */
    getGroupMembers(getGroupMembersRequest) {
      return this.getGroupMembersWithHttpInfo(getGroupMembersRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List groups in the client
     * List groups in the client
     * @param {module:com.alterian.ja.model/GetGroupsRequest} getGroupsRequest List groups in the client
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/GetGroupsDefaultResponse} and HTTP response
     */
    getGroupsWithHttpInfo(getGroupsRequest) {
      let postBody = getGroupsRequest;
      // verify the required parameter 'getGroupsRequest' is set
      if (getGroupsRequest === undefined || getGroupsRequest === null) {
        throw new Error("Missing the required parameter 'getGroupsRequest' when calling getGroups");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetGroupsDefaultResponse;
      return this.apiClient.callApi(
        '/GetGroups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List groups in the client
     * List groups in the client
     * @param {module:com.alterian.ja.model/GetGroupsRequest} getGroupsRequest List groups in the client
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/GetGroupsDefaultResponse}
     */
    getGroups(getGroupsRequest) {
      return this.getGroupsWithHttpInfo(getGroupsRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a group
     * Update a group
     * @param {module:com.alterian.ja.model/CreateGroupRequest} createGroupRequest Update a group
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse} and HTTP response
     */
    updateGroupWithHttpInfo(createGroupRequest) {
      let postBody = createGroupRequest;
      // verify the required parameter 'createGroupRequest' is set
      if (createGroupRequest === undefined || createGroupRequest === null) {
        throw new Error("Missing the required parameter 'createGroupRequest' when calling updateGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHChangePasswordDefaultResponse;
      return this.apiClient.callApi(
        '/UpdateGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a group
     * Update a group
     * @param {module:com.alterian.ja.model/CreateGroupRequest} createGroupRequest Update a group
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse}
     */
    updateGroup(createGroupRequest) {
      return this.updateGroupWithHttpInfo(createGroupRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
