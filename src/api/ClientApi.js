/**
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AUTHChangePasswordDefaultResponse from '../com.alterian.ja.model/AUTHChangePasswordDefaultResponse';
import CreateClientDefaultResponse from '../com.alterian.ja.model/CreateClientDefaultResponse';
import CreateClientRequest from '../com.alterian.ja.model/CreateClientRequest';
import DeleteClientRequest from '../com.alterian.ja.model/DeleteClientRequest';
import DisableClientRequest from '../com.alterian.ja.model/DisableClientRequest';
import GetBrandsDefaultResponse from '../com.alterian.ja.model/GetBrandsDefaultResponse';
import GetClientSettingsDefaultResponse from '../com.alterian.ja.model/GetClientSettingsDefaultResponse';
import GetClientSettingsRequest from '../com.alterian.ja.model/GetClientSettingsRequest';
import GetClientsRequest from '../com.alterian.ja.model/GetClientsRequest';
import GetCurrentClientDefaultResponse from '../com.alterian.ja.model/GetCurrentClientDefaultResponse';
import UpdateClientSettingsRequest from '../com.alterian.ja.model/UpdateClientSettingsRequest';

/**
* Client service.
* @module api/ClientApi
* @version 6.35.0
*/
export default class ClientApi {

    /**
    * Constructs a new ClientApi. 
    * @alias module:api/ClientApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a new @see(ALClient), with it's own unique database and set of users.
     * Create a new @see(ALClient), with it's own unique database and set of users.
     * @param {module:com.alterian.ja.model/CreateClientRequest} createClientRequest Create a new @see(ALClient), with it's own unique database and set of users.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/CreateClientDefaultResponse} and HTTP response
     */
    createClientWithHttpInfo(createClientRequest) {
      let postBody = createClientRequest;
      // verify the required parameter 'createClientRequest' is set
      if (createClientRequest === undefined || createClientRequest === null) {
        throw new Error("Missing the required parameter 'createClientRequest' when calling createClient");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateClientDefaultResponse;
      return this.apiClient.callApi(
        '/CreateClient', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a new @see(ALClient), with it's own unique database and set of users.
     * Create a new @see(ALClient), with it's own unique database and set of users.
     * @param {module:com.alterian.ja.model/CreateClientRequest} createClientRequest Create a new @see(ALClient), with it's own unique database and set of users.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/CreateClientDefaultResponse}
     */
    createClient(createClientRequest) {
      return this.createClientWithHttpInfo(createClientRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new @see(ALClient), with it's own unique database and set of users.             Additionally creates an example user / group with relevant permissions to design campaign factory campaigns.
     * Create a new @see(ALClient), with it's own unique database and set of users.             Additionally creates an example user / group with relevant permissions to design campaign factory campaigns.
     * @param {module:com.alterian.ja.model/CreateClientRequest} createClientRequest Create a new @see(ALClient), with it's own unique database and set of users.             Additionally creates an example user / group with relevant permissions to design campaign factory campaigns.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/CreateClientDefaultResponse} and HTTP response
     */
    createClientExWithHttpInfo(createClientRequest) {
      let postBody = createClientRequest;
      // verify the required parameter 'createClientRequest' is set
      if (createClientRequest === undefined || createClientRequest === null) {
        throw new Error("Missing the required parameter 'createClientRequest' when calling createClientEx");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateClientDefaultResponse;
      return this.apiClient.callApi(
        '/CreateClientEx', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a new @see(ALClient), with it's own unique database and set of users.             Additionally creates an example user / group with relevant permissions to design campaign factory campaigns.
     * Create a new @see(ALClient), with it's own unique database and set of users.             Additionally creates an example user / group with relevant permissions to design campaign factory campaigns.
     * @param {module:com.alterian.ja.model/CreateClientRequest} createClientRequest Create a new @see(ALClient), with it's own unique database and set of users.             Additionally creates an example user / group with relevant permissions to design campaign factory campaigns.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/CreateClientDefaultResponse}
     */
    createClientEx(createClientRequest) {
      return this.createClientExWithHttpInfo(createClientRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes a @see(ALClient).  Removes the client's database.  Note that the client must be disabled with @see(DisableClient) before calling this.
     * Deletes a @see(ALClient).  Removes the client's database.  Note that the client must be disabled with @see(DisableClient) before calling this.
     * @param {module:com.alterian.ja.model/DeleteClientRequest} deleteClientRequest Deletes a @see(ALClient).  Removes the client's database.  Note that the client must be disabled with @see(DisableClient) before calling this.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse} and HTTP response
     */
    deleteClientWithHttpInfo(deleteClientRequest) {
      let postBody = deleteClientRequest;
      // verify the required parameter 'deleteClientRequest' is set
      if (deleteClientRequest === undefined || deleteClientRequest === null) {
        throw new Error("Missing the required parameter 'deleteClientRequest' when calling deleteClient");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHChangePasswordDefaultResponse;
      return this.apiClient.callApi(
        '/DeleteClient', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes a @see(ALClient).  Removes the client's database.  Note that the client must be disabled with @see(DisableClient) before calling this.
     * Deletes a @see(ALClient).  Removes the client's database.  Note that the client must be disabled with @see(DisableClient) before calling this.
     * @param {module:com.alterian.ja.model/DeleteClientRequest} deleteClientRequest Deletes a @see(ALClient).  Removes the client's database.  Note that the client must be disabled with @see(DisableClient) before calling this.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse}
     */
    deleteClient(deleteClientRequest) {
      return this.deleteClientWithHttpInfo(deleteClientRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Mark an individual @see(ALClient) as disabled. Disabled clients will not allow users to log on, documents will not be processed etc.
     * Mark an individual @see(ALClient) as disabled. Disabled clients will not allow users to log on, documents will not be processed etc.
     * @param {module:com.alterian.ja.model/DisableClientRequest} disableClientRequest Mark an individual @see(ALClient) as disabled. Disabled clients will not allow users to log on, documents will not be processed etc.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse} and HTTP response
     */
    disableClientWithHttpInfo(disableClientRequest) {
      let postBody = disableClientRequest;
      // verify the required parameter 'disableClientRequest' is set
      if (disableClientRequest === undefined || disableClientRequest === null) {
        throw new Error("Missing the required parameter 'disableClientRequest' when calling disableClient");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHChangePasswordDefaultResponse;
      return this.apiClient.callApi(
        '/DisableClient', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Mark an individual @see(ALClient) as disabled. Disabled clients will not allow users to log on, documents will not be processed etc.
     * Mark an individual @see(ALClient) as disabled. Disabled clients will not allow users to log on, documents will not be processed etc.
     * @param {module:com.alterian.ja.model/DisableClientRequest} disableClientRequest Mark an individual @see(ALClient) as disabled. Disabled clients will not allow users to log on, documents will not be processed etc.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse}
     */
    disableClient(disableClientRequest) {
      return this.disableClientWithHttpInfo(disableClientRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Mark an individual @see(ALClient) as enabled. Enabled clients allow users to log on, documents will be processed etc.
     * Mark an individual @see(ALClient) as enabled. Enabled clients allow users to log on, documents will be processed etc.
     * @param {module:com.alterian.ja.model/DisableClientRequest} disableClientRequest Mark an individual @see(ALClient) as enabled. Enabled clients allow users to log on, documents will be processed etc.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse} and HTTP response
     */
    enableClientWithHttpInfo(disableClientRequest) {
      let postBody = disableClientRequest;
      // verify the required parameter 'disableClientRequest' is set
      if (disableClientRequest === undefined || disableClientRequest === null) {
        throw new Error("Missing the required parameter 'disableClientRequest' when calling enableClient");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHChangePasswordDefaultResponse;
      return this.apiClient.callApi(
        '/EnableClient', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Mark an individual @see(ALClient) as enabled. Enabled clients allow users to log on, documents will be processed etc.
     * Mark an individual @see(ALClient) as enabled. Enabled clients allow users to log on, documents will be processed etc.
     * @param {module:com.alterian.ja.model/DisableClientRequest} disableClientRequest Mark an individual @see(ALClient) as enabled. Enabled clients allow users to log on, documents will be processed etc.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse}
     */
    enableClient(disableClientRequest) {
      return this.enableClientWithHttpInfo(disableClientRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the settings for the specified Client
     * Returns the settings for the specified Client
     * @param {module:com.alterian.ja.model/GetClientSettingsRequest} getClientSettingsRequest Returns the settings for the specified Client
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/GetClientSettingsDefaultResponse} and HTTP response
     */
    getClientSettingsWithHttpInfo(getClientSettingsRequest) {
      let postBody = getClientSettingsRequest;
      // verify the required parameter 'getClientSettingsRequest' is set
      if (getClientSettingsRequest === undefined || getClientSettingsRequest === null) {
        throw new Error("Missing the required parameter 'getClientSettingsRequest' when calling getClientSettings");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetClientSettingsDefaultResponse;
      return this.apiClient.callApi(
        '/GetClientSettings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the settings for the specified Client
     * Returns the settings for the specified Client
     * @param {module:com.alterian.ja.model/GetClientSettingsRequest} getClientSettingsRequest Returns the settings for the specified Client
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/GetClientSettingsDefaultResponse}
     */
    getClientSettings(getClientSettingsRequest) {
      return this.getClientSettingsWithHttpInfo(getClientSettingsRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Return a list of clients that match the supplied (optional) filters.
     * Return a list of clients that match the supplied (optional) filters.
     * @param {module:com.alterian.ja.model/GetClientsRequest} getClientsRequest Return a list of clients that match the supplied (optional) filters.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/GetBrandsDefaultResponse} and HTTP response
     */
    getClientsWithHttpInfo(getClientsRequest) {
      let postBody = getClientsRequest;
      // verify the required parameter 'getClientsRequest' is set
      if (getClientsRequest === undefined || getClientsRequest === null) {
        throw new Error("Missing the required parameter 'getClientsRequest' when calling getClients");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetBrandsDefaultResponse;
      return this.apiClient.callApi(
        '/GetClients', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Return a list of clients that match the supplied (optional) filters.
     * Return a list of clients that match the supplied (optional) filters.
     * @param {module:com.alterian.ja.model/GetClientsRequest} getClientsRequest Return a list of clients that match the supplied (optional) filters.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/GetBrandsDefaultResponse}
     */
    getClients(getClientsRequest) {
      return this.getClientsWithHttpInfo(getClientsRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns back the client for the current token
     * Returns back the client for the current token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/GetCurrentClientDefaultResponse} and HTTP response
     */
    getCurrentClientWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetCurrentClientDefaultResponse;
      return this.apiClient.callApi(
        '/GetCurrentClient', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns back the client for the current token
     * Returns back the client for the current token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/GetCurrentClientDefaultResponse}
     */
    getCurrentClient() {
      return this.getCurrentClientWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the settings for the specified client. Warning: This API deletes any settings not included in the update request
     * Updates the settings for the specified client. Warning: This API deletes any settings not included in the update request
     * @param {module:com.alterian.ja.model/UpdateClientSettingsRequest} updateClientSettingsRequest Updates the settings for the specified client. Warning: This API deletes any settings not included in the update request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse} and HTTP response
     */
    updateClientSettingsWithHttpInfo(updateClientSettingsRequest) {
      let postBody = updateClientSettingsRequest;
      // verify the required parameter 'updateClientSettingsRequest' is set
      if (updateClientSettingsRequest === undefined || updateClientSettingsRequest === null) {
        throw new Error("Missing the required parameter 'updateClientSettingsRequest' when calling updateClientSettings");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHChangePasswordDefaultResponse;
      return this.apiClient.callApi(
        '/UpdateClientSettings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates the settings for the specified client. Warning: This API deletes any settings not included in the update request
     * Updates the settings for the specified client. Warning: This API deletes any settings not included in the update request
     * @param {module:com.alterian.ja.model/UpdateClientSettingsRequest} updateClientSettingsRequest Updates the settings for the specified client. Warning: This API deletes any settings not included in the update request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse}
     */
    updateClientSettings(updateClientSettingsRequest) {
      return this.updateClientSettingsWithHttpInfo(updateClientSettingsRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
