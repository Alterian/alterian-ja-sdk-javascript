/**
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AUTHChangePasswordDefaultResponse from '../com.alterian.ja.model/AUTHChangePasswordDefaultResponse';
import CreateClientDefaultResponse from '../com.alterian.ja.model/CreateClientDefaultResponse';
import CreateFolderRequest from '../com.alterian.ja.model/CreateFolderRequest';
import DeleteFolderRequest from '../com.alterian.ja.model/DeleteFolderRequest';
import GetFolderDefaultResponse from '../com.alterian.ja.model/GetFolderDefaultResponse';
import GetFolderRequest from '../com.alterian.ja.model/GetFolderRequest';
import GetFoldersDefaultResponse from '../com.alterian.ja.model/GetFoldersDefaultResponse';
import GetFoldersRequest from '../com.alterian.ja.model/GetFoldersRequest';
import MoveFolderRequest from '../com.alterian.ja.model/MoveFolderRequest';
import RenameFolderRequest from '../com.alterian.ja.model/RenameFolderRequest';

/**
* Folder service.
* @module api/FolderApi
* @version 6.35.0
*/
export default class FolderApi {

    /**
    * Constructs a new FolderApi. 
    * @alias module:api/FolderApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a @see(Folder)
     * Create a @see(Folder)
     * @param {module:com.alterian.ja.model/CreateFolderRequest} createFolderRequest Create a @see(Folder)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/CreateClientDefaultResponse} and HTTP response
     */
    createFolderWithHttpInfo(createFolderRequest) {
      let postBody = createFolderRequest;
      // verify the required parameter 'createFolderRequest' is set
      if (createFolderRequest === undefined || createFolderRequest === null) {
        throw new Error("Missing the required parameter 'createFolderRequest' when calling createFolder");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateClientDefaultResponse;
      return this.apiClient.callApi(
        '/CreateFolder', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a @see(Folder)
     * Create a @see(Folder)
     * @param {module:com.alterian.ja.model/CreateFolderRequest} createFolderRequest Create a @see(Folder)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/CreateClientDefaultResponse}
     */
    createFolder(createFolderRequest) {
      return this.createFolderWithHttpInfo(createFolderRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a @see(Folder)
     * Delete a @see(Folder)
     * @param {module:com.alterian.ja.model/DeleteFolderRequest} deleteFolderRequest Delete a @see(Folder)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse} and HTTP response
     */
    deleteFolderWithHttpInfo(deleteFolderRequest) {
      let postBody = deleteFolderRequest;
      // verify the required parameter 'deleteFolderRequest' is set
      if (deleteFolderRequest === undefined || deleteFolderRequest === null) {
        throw new Error("Missing the required parameter 'deleteFolderRequest' when calling deleteFolder");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHChangePasswordDefaultResponse;
      return this.apiClient.callApi(
        '/DeleteFolder', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a @see(Folder)
     * Delete a @see(Folder)
     * @param {module:com.alterian.ja.model/DeleteFolderRequest} deleteFolderRequest Delete a @see(Folder)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse}
     */
    deleteFolder(deleteFolderRequest) {
      return this.deleteFolderWithHttpInfo(deleteFolderRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a particular @see(Folder) by it's ID
     * Get a particular @see(Folder) by it's ID
     * @param {module:com.alterian.ja.model/GetFolderRequest} getFolderRequest Get a particular @see(Folder) by it's ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/GetFolderDefaultResponse} and HTTP response
     */
    getFolderWithHttpInfo(getFolderRequest) {
      let postBody = getFolderRequest;
      // verify the required parameter 'getFolderRequest' is set
      if (getFolderRequest === undefined || getFolderRequest === null) {
        throw new Error("Missing the required parameter 'getFolderRequest' when calling getFolder");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetFolderDefaultResponse;
      return this.apiClient.callApi(
        '/GetFolder', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a particular @see(Folder) by it's ID
     * Get a particular @see(Folder) by it's ID
     * @param {module:com.alterian.ja.model/GetFolderRequest} getFolderRequest Get a particular @see(Folder) by it's ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/GetFolderDefaultResponse}
     */
    getFolder(getFolderRequest) {
      return this.getFolderWithHttpInfo(getFolderRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Obtain a list of @see(Folder)s
     * Obtain a list of @see(Folder)s
     * @param {module:com.alterian.ja.model/GetFoldersRequest} getFoldersRequest Obtain a list of @see(Folder)s
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/GetFoldersDefaultResponse} and HTTP response
     */
    getFoldersWithHttpInfo(getFoldersRequest) {
      let postBody = getFoldersRequest;
      // verify the required parameter 'getFoldersRequest' is set
      if (getFoldersRequest === undefined || getFoldersRequest === null) {
        throw new Error("Missing the required parameter 'getFoldersRequest' when calling getFolders");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetFoldersDefaultResponse;
      return this.apiClient.callApi(
        '/GetFolders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Obtain a list of @see(Folder)s
     * Obtain a list of @see(Folder)s
     * @param {module:com.alterian.ja.model/GetFoldersRequest} getFoldersRequest Obtain a list of @see(Folder)s
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/GetFoldersDefaultResponse}
     */
    getFolders(getFoldersRequest) {
      return this.getFoldersWithHttpInfo(getFoldersRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Move a @see(Folder) from one @see(Folder) to another
     * Move a @see(Folder) from one @see(Folder) to another
     * @param {module:com.alterian.ja.model/MoveFolderRequest} moveFolderRequest Move a @see(Folder) from one @see(Folder) to another
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse} and HTTP response
     */
    moveFolderWithHttpInfo(moveFolderRequest) {
      let postBody = moveFolderRequest;
      // verify the required parameter 'moveFolderRequest' is set
      if (moveFolderRequest === undefined || moveFolderRequest === null) {
        throw new Error("Missing the required parameter 'moveFolderRequest' when calling moveFolder");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHChangePasswordDefaultResponse;
      return this.apiClient.callApi(
        '/MoveFolder', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Move a @see(Folder) from one @see(Folder) to another
     * Move a @see(Folder) from one @see(Folder) to another
     * @param {module:com.alterian.ja.model/MoveFolderRequest} moveFolderRequest Move a @see(Folder) from one @see(Folder) to another
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse}
     */
    moveFolder(moveFolderRequest) {
      return this.moveFolderWithHttpInfo(moveFolderRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Rename a @see(Folder)
     * Rename a @see(Folder)
     * @param {module:com.alterian.ja.model/RenameFolderRequest} renameFolderRequest Rename a @see(Folder)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse} and HTTP response
     */
    renameFolderWithHttpInfo(renameFolderRequest) {
      let postBody = renameFolderRequest;
      // verify the required parameter 'renameFolderRequest' is set
      if (renameFolderRequest === undefined || renameFolderRequest === null) {
        throw new Error("Missing the required parameter 'renameFolderRequest' when calling renameFolder");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHChangePasswordDefaultResponse;
      return this.apiClient.callApi(
        '/RenameFolder', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Rename a @see(Folder)
     * Rename a @see(Folder)
     * @param {module:com.alterian.ja.model/RenameFolderRequest} renameFolderRequest Rename a @see(Folder)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse}
     */
    renameFolder(renameFolderRequest) {
      return this.renameFolderWithHttpInfo(renameFolderRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
