/**
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AUTHChangePasswordDefaultResponse from '../com.alterian.ja.model/AUTHChangePasswordDefaultResponse';
import AUTHChangePasswordRequest from '../com.alterian.ja.model/AUTHChangePasswordRequest';
import AUTHCreateLoginDefaultResponse from '../com.alterian.ja.model/AUTHCreateLoginDefaultResponse';
import AUTHCreateLoginRequest from '../com.alterian.ja.model/AUTHCreateLoginRequest';
import AUTHDisableLoginRequest from '../com.alterian.ja.model/AUTHDisableLoginRequest';
import AUTHGetClientLoginsDefaultResponse from '../com.alterian.ja.model/AUTHGetClientLoginsDefaultResponse';
import AUTHGetClientLoginsRequest from '../com.alterian.ja.model/AUTHGetClientLoginsRequest';
import AUTHGetLoginPasswordRulesDefaultResponse from '../com.alterian.ja.model/AUTHGetLoginPasswordRulesDefaultResponse';
import AUTHGetLoginPasswordRulesRequest from '../com.alterian.ja.model/AUTHGetLoginPasswordRulesRequest';
import AUTHGetLoginsForUserRequest from '../com.alterian.ja.model/AUTHGetLoginsForUserRequest';
import AUTHGetLoginsRequest from '../com.alterian.ja.model/AUTHGetLoginsRequest';
import AUTHRenameLoginRequest from '../com.alterian.ja.model/AUTHRenameLoginRequest';
import AUTHSetLoginUserIdRequest from '../com.alterian.ja.model/AUTHSetLoginUserIdRequest';
import AUTHUpdateLoginRequest from '../com.alterian.ja.model/AUTHUpdateLoginRequest';

/**
* AuthServer service.
* @module api/AuthServerApi
* @version 6.35.0
*/
export default class AuthServerApi {

    /**
    * Constructs a new AuthServerApi. 
    * @alias module:api/AuthServerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Set a new password for tthe specified login
     * Set a new password for tthe specified login
     * @param {module:com.alterian.ja.model/AUTHChangePasswordRequest} aUTHChangePasswordRequest Set a new password for tthe specified login
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse} and HTTP response
     */
    aUTHChangePasswordWithHttpInfo(aUTHChangePasswordRequest) {
      let postBody = aUTHChangePasswordRequest;
      // verify the required parameter 'aUTHChangePasswordRequest' is set
      if (aUTHChangePasswordRequest === undefined || aUTHChangePasswordRequest === null) {
        throw new Error("Missing the required parameter 'aUTHChangePasswordRequest' when calling aUTHChangePassword");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHChangePasswordDefaultResponse;
      return this.apiClient.callApi(
        '/AUTH_ChangePassword', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Set a new password for tthe specified login
     * Set a new password for tthe specified login
     * @param {module:com.alterian.ja.model/AUTHChangePasswordRequest} aUTHChangePasswordRequest Set a new password for tthe specified login
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse}
     */
    aUTHChangePassword(aUTHChangePasswordRequest) {
      return this.aUTHChangePasswordWithHttpInfo(aUTHChangePasswordRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a login and associates it with the client
     * Creates a login and associates it with the client
     * @param {module:com.alterian.ja.model/AUTHCreateLoginRequest} aUTHCreateLoginRequest Creates a login and associates it with the client
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHCreateLoginDefaultResponse} and HTTP response
     */
    aUTHCreateLoginWithHttpInfo(aUTHCreateLoginRequest) {
      let postBody = aUTHCreateLoginRequest;
      // verify the required parameter 'aUTHCreateLoginRequest' is set
      if (aUTHCreateLoginRequest === undefined || aUTHCreateLoginRequest === null) {
        throw new Error("Missing the required parameter 'aUTHCreateLoginRequest' when calling aUTHCreateLogin");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHCreateLoginDefaultResponse;
      return this.apiClient.callApi(
        '/AUTH_CreateLogin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates a login and associates it with the client
     * Creates a login and associates it with the client
     * @param {module:com.alterian.ja.model/AUTHCreateLoginRequest} aUTHCreateLoginRequest Creates a login and associates it with the client
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHCreateLoginDefaultResponse}
     */
    aUTHCreateLogin(aUTHCreateLoginRequest) {
      return this.aUTHCreateLoginWithHttpInfo(aUTHCreateLoginRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Disable the specified login
     * Disable the specified login
     * @param {module:com.alterian.ja.model/AUTHDisableLoginRequest} aUTHDisableLoginRequest Disable the specified login
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse} and HTTP response
     */
    aUTHDisableLoginWithHttpInfo(aUTHDisableLoginRequest) {
      let postBody = aUTHDisableLoginRequest;
      // verify the required parameter 'aUTHDisableLoginRequest' is set
      if (aUTHDisableLoginRequest === undefined || aUTHDisableLoginRequest === null) {
        throw new Error("Missing the required parameter 'aUTHDisableLoginRequest' when calling aUTHDisableLogin");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHChangePasswordDefaultResponse;
      return this.apiClient.callApi(
        '/AUTH_DisableLogin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Disable the specified login
     * Disable the specified login
     * @param {module:com.alterian.ja.model/AUTHDisableLoginRequest} aUTHDisableLoginRequest Disable the specified login
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse}
     */
    aUTHDisableLogin(aUTHDisableLoginRequest) {
      return this.aUTHDisableLoginWithHttpInfo(aUTHDisableLoginRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Enable the specified login
     * Enable the specified login
     * @param {module:com.alterian.ja.model/AUTHDisableLoginRequest} aUTHDisableLoginRequest Enable the specified login
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse} and HTTP response
     */
    aUTHEnableLoginWithHttpInfo(aUTHDisableLoginRequest) {
      let postBody = aUTHDisableLoginRequest;
      // verify the required parameter 'aUTHDisableLoginRequest' is set
      if (aUTHDisableLoginRequest === undefined || aUTHDisableLoginRequest === null) {
        throw new Error("Missing the required parameter 'aUTHDisableLoginRequest' when calling aUTHEnableLogin");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHChangePasswordDefaultResponse;
      return this.apiClient.callApi(
        '/AUTH_EnableLogin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Enable the specified login
     * Enable the specified login
     * @param {module:com.alterian.ja.model/AUTHDisableLoginRequest} aUTHDisableLoginRequest Enable the specified login
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse}
     */
    aUTHEnableLogin(aUTHDisableLoginRequest) {
      return this.aUTHEnableLoginWithHttpInfo(aUTHDisableLoginRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Expire the password for the specified login
     * Expire the password for the specified login
     * @param {module:com.alterian.ja.model/AUTHDisableLoginRequest} aUTHDisableLoginRequest Expire the password for the specified login
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse} and HTTP response
     */
    aUTHExpirePasswordWithHttpInfo(aUTHDisableLoginRequest) {
      let postBody = aUTHDisableLoginRequest;
      // verify the required parameter 'aUTHDisableLoginRequest' is set
      if (aUTHDisableLoginRequest === undefined || aUTHDisableLoginRequest === null) {
        throw new Error("Missing the required parameter 'aUTHDisableLoginRequest' when calling aUTHExpirePassword");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHChangePasswordDefaultResponse;
      return this.apiClient.callApi(
        '/AUTH_ExpirePassword', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Expire the password for the specified login
     * Expire the password for the specified login
     * @param {module:com.alterian.ja.model/AUTHDisableLoginRequest} aUTHDisableLoginRequest Expire the password for the specified login
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse}
     */
    aUTHExpirePassword(aUTHDisableLoginRequest) {
      return this.aUTHExpirePasswordWithHttpInfo(aUTHDisableLoginRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a list of logins from the authentication system which are currently assigned to the token's client
     * Get a list of logins from the authentication system which are currently assigned to the token's client
     * @param {module:com.alterian.ja.model/AUTHGetClientLoginsRequest} aUTHGetClientLoginsRequest Get a list of logins from the authentication system which are currently assigned to the token's client
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHGetClientLoginsDefaultResponse} and HTTP response
     */
    aUTHGetClientLoginsWithHttpInfo(aUTHGetClientLoginsRequest) {
      let postBody = aUTHGetClientLoginsRequest;
      // verify the required parameter 'aUTHGetClientLoginsRequest' is set
      if (aUTHGetClientLoginsRequest === undefined || aUTHGetClientLoginsRequest === null) {
        throw new Error("Missing the required parameter 'aUTHGetClientLoginsRequest' when calling aUTHGetClientLogins");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHGetClientLoginsDefaultResponse;
      return this.apiClient.callApi(
        '/AUTH_GetClientLogins', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a list of logins from the authentication system which are currently assigned to the token's client
     * Get a list of logins from the authentication system which are currently assigned to the token's client
     * @param {module:com.alterian.ja.model/AUTHGetClientLoginsRequest} aUTHGetClientLoginsRequest Get a list of logins from the authentication system which are currently assigned to the token's client
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHGetClientLoginsDefaultResponse}
     */
    aUTHGetClientLogins(aUTHGetClientLoginsRequest) {
      return this.aUTHGetClientLoginsWithHttpInfo(aUTHGetClientLoginsRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Request the password policy rules from the authentication system
     * Request the password policy rules from the authentication system
     * @param {module:com.alterian.ja.model/AUTHGetLoginPasswordRulesRequest} aUTHGetLoginPasswordRulesRequest Request the password policy rules from the authentication system
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHGetLoginPasswordRulesDefaultResponse} and HTTP response
     */
    aUTHGetLoginPasswordRulesWithHttpInfo(aUTHGetLoginPasswordRulesRequest) {
      let postBody = aUTHGetLoginPasswordRulesRequest;
      // verify the required parameter 'aUTHGetLoginPasswordRulesRequest' is set
      if (aUTHGetLoginPasswordRulesRequest === undefined || aUTHGetLoginPasswordRulesRequest === null) {
        throw new Error("Missing the required parameter 'aUTHGetLoginPasswordRulesRequest' when calling aUTHGetLoginPasswordRules");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHGetLoginPasswordRulesDefaultResponse;
      return this.apiClient.callApi(
        '/AUTH_GetLoginPasswordRules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Request the password policy rules from the authentication system
     * Request the password policy rules from the authentication system
     * @param {module:com.alterian.ja.model/AUTHGetLoginPasswordRulesRequest} aUTHGetLoginPasswordRulesRequest Request the password policy rules from the authentication system
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHGetLoginPasswordRulesDefaultResponse}
     */
    aUTHGetLoginPasswordRules(aUTHGetLoginPasswordRulesRequest) {
      return this.aUTHGetLoginPasswordRulesWithHttpInfo(aUTHGetLoginPasswordRulesRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a list of logins from the authentication system which are currently assigned to the token's client and have no user associated with them
     * Get a list of logins from the authentication system which are currently assigned to the token's client and have no user associated with them
     * @param {module:com.alterian.ja.model/AUTHGetLoginsRequest} aUTHGetLoginsRequest Get a list of logins from the authentication system which are currently assigned to the token's client and have no user associated with them
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHGetClientLoginsDefaultResponse} and HTTP response
     */
    aUTHGetLoginsWithHttpInfo(aUTHGetLoginsRequest) {
      let postBody = aUTHGetLoginsRequest;
      // verify the required parameter 'aUTHGetLoginsRequest' is set
      if (aUTHGetLoginsRequest === undefined || aUTHGetLoginsRequest === null) {
        throw new Error("Missing the required parameter 'aUTHGetLoginsRequest' when calling aUTHGetLogins");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHGetClientLoginsDefaultResponse;
      return this.apiClient.callApi(
        '/AUTH_GetLogins', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a list of logins from the authentication system which are currently assigned to the token's client and have no user associated with them
     * Get a list of logins from the authentication system which are currently assigned to the token's client and have no user associated with them
     * @param {module:com.alterian.ja.model/AUTHGetLoginsRequest} aUTHGetLoginsRequest Get a list of logins from the authentication system which are currently assigned to the token's client and have no user associated with them
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHGetClientLoginsDefaultResponse}
     */
    aUTHGetLogins(aUTHGetLoginsRequest) {
      return this.aUTHGetLoginsWithHttpInfo(aUTHGetLoginsRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns back the login(s) associated with a particular userid and siteid
     * Returns back the login(s) associated with a particular userid and siteid
     * @param {module:com.alterian.ja.model/AUTHGetLoginsForUserRequest} aUTHGetLoginsForUserRequest Returns back the login(s) associated with a particular userid and siteid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHGetClientLoginsDefaultResponse} and HTTP response
     */
    aUTHGetLoginsForUserWithHttpInfo(aUTHGetLoginsForUserRequest) {
      let postBody = aUTHGetLoginsForUserRequest;
      // verify the required parameter 'aUTHGetLoginsForUserRequest' is set
      if (aUTHGetLoginsForUserRequest === undefined || aUTHGetLoginsForUserRequest === null) {
        throw new Error("Missing the required parameter 'aUTHGetLoginsForUserRequest' when calling aUTHGetLoginsForUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHGetClientLoginsDefaultResponse;
      return this.apiClient.callApi(
        '/AUTH_GetLoginsForUser', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns back the login(s) associated with a particular userid and siteid
     * Returns back the login(s) associated with a particular userid and siteid
     * @param {module:com.alterian.ja.model/AUTHGetLoginsForUserRequest} aUTHGetLoginsForUserRequest Returns back the login(s) associated with a particular userid and siteid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHGetClientLoginsDefaultResponse}
     */
    aUTHGetLoginsForUser(aUTHGetLoginsForUserRequest) {
      return this.aUTHGetLoginsForUserWithHttpInfo(aUTHGetLoginsForUserRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Rename the specified login
     * Rename the specified login
     * @param {module:com.alterian.ja.model/AUTHRenameLoginRequest} aUTHRenameLoginRequest Rename the specified login
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse} and HTTP response
     */
    aUTHRenameLoginWithHttpInfo(aUTHRenameLoginRequest) {
      let postBody = aUTHRenameLoginRequest;
      // verify the required parameter 'aUTHRenameLoginRequest' is set
      if (aUTHRenameLoginRequest === undefined || aUTHRenameLoginRequest === null) {
        throw new Error("Missing the required parameter 'aUTHRenameLoginRequest' when calling aUTHRenameLogin");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHChangePasswordDefaultResponse;
      return this.apiClient.callApi(
        '/AUTH_RenameLogin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Rename the specified login
     * Rename the specified login
     * @param {module:com.alterian.ja.model/AUTHRenameLoginRequest} aUTHRenameLoginRequest Rename the specified login
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse}
     */
    aUTHRenameLogin(aUTHRenameLoginRequest) {
      return this.aUTHRenameLoginWithHttpInfo(aUTHRenameLoginRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Associates an auth system login with a CM user ID
     * Associates an auth system login with a CM user ID
     * @param {module:com.alterian.ja.model/AUTHSetLoginUserIdRequest} aUTHSetLoginUserIdRequest Associates an auth system login with a CM user ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse} and HTTP response
     */
    aUTHSetLoginUserIdWithHttpInfo(aUTHSetLoginUserIdRequest) {
      let postBody = aUTHSetLoginUserIdRequest;
      // verify the required parameter 'aUTHSetLoginUserIdRequest' is set
      if (aUTHSetLoginUserIdRequest === undefined || aUTHSetLoginUserIdRequest === null) {
        throw new Error("Missing the required parameter 'aUTHSetLoginUserIdRequest' when calling aUTHSetLoginUserId");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHChangePasswordDefaultResponse;
      return this.apiClient.callApi(
        '/AUTH_SetLoginUserId', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Associates an auth system login with a CM user ID
     * Associates an auth system login with a CM user ID
     * @param {module:com.alterian.ja.model/AUTHSetLoginUserIdRequest} aUTHSetLoginUserIdRequest Associates an auth system login with a CM user ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse}
     */
    aUTHSetLoginUserId(aUTHSetLoginUserIdRequest) {
      return this.aUTHSetLoginUserIdWithHttpInfo(aUTHSetLoginUserIdRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the important components of a login, use expire, etc. to expire or delete a login
     * Updates the important components of a login, use expire, etc. to expire or delete a login
     * @param {module:com.alterian.ja.model/AUTHUpdateLoginRequest} aUTHUpdateLoginRequest Updates the important components of a login, use expire, etc. to expire or delete a login
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse} and HTTP response
     */
    aUTHUpdateLoginWithHttpInfo(aUTHUpdateLoginRequest) {
      let postBody = aUTHUpdateLoginRequest;
      // verify the required parameter 'aUTHUpdateLoginRequest' is set
      if (aUTHUpdateLoginRequest === undefined || aUTHUpdateLoginRequest === null) {
        throw new Error("Missing the required parameter 'aUTHUpdateLoginRequest' when calling aUTHUpdateLogin");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHChangePasswordDefaultResponse;
      return this.apiClient.callApi(
        '/AUTH_UpdateLogin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates the important components of a login, use expire, etc. to expire or delete a login
     * Updates the important components of a login, use expire, etc. to expire or delete a login
     * @param {module:com.alterian.ja.model/AUTHUpdateLoginRequest} aUTHUpdateLoginRequest Updates the important components of a login, use expire, etc. to expire or delete a login
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse}
     */
    aUTHUpdateLogin(aUTHUpdateLoginRequest) {
      return this.aUTHUpdateLoginWithHttpInfo(aUTHUpdateLoginRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
