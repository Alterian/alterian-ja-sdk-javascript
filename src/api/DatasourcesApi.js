/**
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AUTHChangePasswordDefaultResponse from '../com.alterian.ja.model/AUTHChangePasswordDefaultResponse';
import AreDatasourceCampaignsPausedDefaultResponse from '../com.alterian.ja.model/AreDatasourceCampaignsPausedDefaultResponse';
import AreDatasourceCampaignsPausedRequest from '../com.alterian.ja.model/AreDatasourceCampaignsPausedRequest';
import AreDatasourceJobsCompleteRequest from '../com.alterian.ja.model/AreDatasourceJobsCompleteRequest';
import CreateClientDefaultResponse from '../com.alterian.ja.model/CreateClientDefaultResponse';
import CreateDataSourceMappingRequest from '../com.alterian.ja.model/CreateDataSourceMappingRequest';
import CreateDatasourceRequest from '../com.alterian.ja.model/CreateDatasourceRequest';
import DeleteDatasourceRequest from '../com.alterian.ja.model/DeleteDatasourceRequest';
import DeleteFieldTransformListRequest from '../com.alterian.ja.model/DeleteFieldTransformListRequest';
import DeleteTransformRequest from '../com.alterian.ja.model/DeleteTransformRequest';
import DisableDatasourceRequest from '../com.alterian.ja.model/DisableDatasourceRequest';
import EnableDatasourceRequest from '../com.alterian.ja.model/EnableDatasourceRequest';
import GetClientSetsRequest from '../com.alterian.ja.model/GetClientSetsRequest';
import GetDataSourceAttributesDefaultResponse from '../com.alterian.ja.model/GetDataSourceAttributesDefaultResponse';
import GetDataSourceAttributesRequest from '../com.alterian.ja.model/GetDataSourceAttributesRequest';
import GetDataSourceEngineUserNameDefaultResponse from '../com.alterian.ja.model/GetDataSourceEngineUserNameDefaultResponse';
import GetDataSourceEngineUserNameRequest from '../com.alterian.ja.model/GetDataSourceEngineUserNameRequest';
import GetDataSourceItemsDefaultResponse from '../com.alterian.ja.model/GetDataSourceItemsDefaultResponse';
import GetDataSourceItemsRequest from '../com.alterian.ja.model/GetDataSourceItemsRequest';
import GetDataSourceMappingsDefaultResponse from '../com.alterian.ja.model/GetDataSourceMappingsDefaultResponse';
import GetDataSourceMappingsRequest from '../com.alterian.ja.model/GetDataSourceMappingsRequest';
import GetDataSourceTypesDefaultResponse from '../com.alterian.ja.model/GetDataSourceTypesDefaultResponse';
import GetDataSourceUsersDefaultResponse from '../com.alterian.ja.model/GetDataSourceUsersDefaultResponse';
import GetDataSourceUsersRequest from '../com.alterian.ja.model/GetDataSourceUsersRequest';
import GetDataSourcesDefaultResponse from '../com.alterian.ja.model/GetDataSourcesDefaultResponse';
import GetDataSourcesRequest from '../com.alterian.ja.model/GetDataSourcesRequest';
import GetDatasourceColumnDefaultResponse from '../com.alterian.ja.model/GetDatasourceColumnDefaultResponse';
import GetDatasourceColumnRequest from '../com.alterian.ja.model/GetDatasourceColumnRequest';
import GetDatasourceColumnsDefaultResponse from '../com.alterian.ja.model/GetDatasourceColumnsDefaultResponse';
import GetDatasourceColumnsRequest from '../com.alterian.ja.model/GetDatasourceColumnsRequest';
import GetDatasourceDatabasesDefaultResponse from '../com.alterian.ja.model/GetDatasourceDatabasesDefaultResponse';
import GetDatasourceDatabasesRequest from '../com.alterian.ja.model/GetDatasourceDatabasesRequest';
import GetDatasourceDefaultResponse from '../com.alterian.ja.model/GetDatasourceDefaultResponse';
import GetDatasourceFieldTypesDefaultResponse from '../com.alterian.ja.model/GetDatasourceFieldTypesDefaultResponse';
import GetDatasourceRequest from '../com.alterian.ja.model/GetDatasourceRequest';
import GetDatasourceTablesDefaultResponse from '../com.alterian.ja.model/GetDatasourceTablesDefaultResponse';
import GetDatasourceTablesRequest from '../com.alterian.ja.model/GetDatasourceTablesRequest';
import GetDecodeListDefaultResponse from '../com.alterian.ja.model/GetDecodeListDefaultResponse';
import GetDecodeListRequest from '../com.alterian.ja.model/GetDecodeListRequest';
import GetFieldTransformListDefaultResponse from '../com.alterian.ja.model/GetFieldTransformListDefaultResponse';
import GetFieldTransformListRequest from '../com.alterian.ja.model/GetFieldTransformListRequest';
import GetFieldTransformListsDefaultResponse from '../com.alterian.ja.model/GetFieldTransformListsDefaultResponse';
import GetProcessStatusDefaultResponse from '../com.alterian.ja.model/GetProcessStatusDefaultResponse';
import GetProcessStatusRequest from '../com.alterian.ja.model/GetProcessStatusRequest';
import GetTransformsRequest from '../com.alterian.ja.model/GetTransformsRequest';
import MarkDatasourceAsPendingDisableRequest from '../com.alterian.ja.model/MarkDatasourceAsPendingDisableRequest';
import PauseDatasourceCampaignsRequest from '../com.alterian.ja.model/PauseDatasourceCampaignsRequest';
import RefreshDatasourceRequest from '../com.alterian.ja.model/RefreshDatasourceRequest';
import ResumeDatasourceCampaignsRequest from '../com.alterian.ja.model/ResumeDatasourceCampaignsRequest';
import SaveDecodeListRequest from '../com.alterian.ja.model/SaveDecodeListRequest';
import SaveFieldTransformListRequest from '../com.alterian.ja.model/SaveFieldTransformListRequest';
import UpdateDatasourceRequest from '../com.alterian.ja.model/UpdateDatasourceRequest';

/**
* Datasources service.
* @module api/DatasourcesApi
* @version 6.35.0
*/
export default class DatasourcesApi {

    /**
    * Constructs a new DatasourcesApi. 
    * @alias module:api/DatasourcesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Pausing a datasource can take a while, as the campaigns and metrics in this datasource will need to complete their current action before pausing.              The @see(PauseDatasourceCampaigns) call will return immediately, but this method should be called repeatedly until the list of ID's returned is empty.             Note that the id's returned are the list of campaigns and metrics which are still running, and can be used in @see(GetCampaign) or @see(GetMetric) to get further details about the              campaign(s)/metric(s) that are preventing the datasource from pausing.
     * Pausing a datasource can take a while, as the campaigns and metrics in this datasource will need to complete their current action before pausing.              The @see(PauseDatasourceCampaigns) call will return immediately, but this method should be called repeatedly until the list of ID's returned is empty.             Note that the id's returned are the list of campaigns and metrics which are still running, and can be used in @see(GetCampaign) or @see(GetMetric) to get further details about the              campaign(s)/metric(s) that are preventing the datasource from pausing.
     * @param {module:com.alterian.ja.model/AreDatasourceCampaignsPausedRequest} areDatasourceCampaignsPausedRequest Pausing a datasource can take a while, as the campaigns and metrics in this datasource will need to complete their current action before pausing.              The @see(PauseDatasourceCampaigns) call will return immediately, but this method should be called repeatedly until the list of ID's returned is empty.             Note that the id's returned are the list of campaigns and metrics which are still running, and can be used in @see(GetCampaign) or @see(GetMetric) to get further details about the              campaign(s)/metric(s) that are preventing the datasource from pausing.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AreDatasourceCampaignsPausedDefaultResponse} and HTTP response
     */
    areDatasourceCampaignsPausedWithHttpInfo(areDatasourceCampaignsPausedRequest) {
      let postBody = areDatasourceCampaignsPausedRequest;
      // verify the required parameter 'areDatasourceCampaignsPausedRequest' is set
      if (areDatasourceCampaignsPausedRequest === undefined || areDatasourceCampaignsPausedRequest === null) {
        throw new Error("Missing the required parameter 'areDatasourceCampaignsPausedRequest' when calling areDatasourceCampaignsPaused");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AreDatasourceCampaignsPausedDefaultResponse;
      return this.apiClient.callApi(
        '/AreDatasourceCampaignsPaused', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Pausing a datasource can take a while, as the campaigns and metrics in this datasource will need to complete their current action before pausing.              The @see(PauseDatasourceCampaigns) call will return immediately, but this method should be called repeatedly until the list of ID's returned is empty.             Note that the id's returned are the list of campaigns and metrics which are still running, and can be used in @see(GetCampaign) or @see(GetMetric) to get further details about the              campaign(s)/metric(s) that are preventing the datasource from pausing.
     * Pausing a datasource can take a while, as the campaigns and metrics in this datasource will need to complete their current action before pausing.              The @see(PauseDatasourceCampaigns) call will return immediately, but this method should be called repeatedly until the list of ID's returned is empty.             Note that the id's returned are the list of campaigns and metrics which are still running, and can be used in @see(GetCampaign) or @see(GetMetric) to get further details about the              campaign(s)/metric(s) that are preventing the datasource from pausing.
     * @param {module:com.alterian.ja.model/AreDatasourceCampaignsPausedRequest} areDatasourceCampaignsPausedRequest Pausing a datasource can take a while, as the campaigns and metrics in this datasource will need to complete their current action before pausing.              The @see(PauseDatasourceCampaigns) call will return immediately, but this method should be called repeatedly until the list of ID's returned is empty.             Note that the id's returned are the list of campaigns and metrics which are still running, and can be used in @see(GetCampaign) or @see(GetMetric) to get further details about the              campaign(s)/metric(s) that are preventing the datasource from pausing.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AreDatasourceCampaignsPausedDefaultResponse}
     */
    areDatasourceCampaignsPaused(areDatasourceCampaignsPausedRequest) {
      return this.areDatasourceCampaignsPausedWithHttpInfo(areDatasourceCampaignsPausedRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Finishing off any in-progress jobs on a datasource can take a while, as the SEV loaders and archivers in this datasource will need to complete their current action before exiting.              The @see(MarkDatasourceAsPendingDisable) call will return immediately, but this method should be called repeatedly until the list of ID's returned is empty.             Note that the id's returned are the list of active jobs which are still running
     * Finishing off any in-progress jobs on a datasource can take a while, as the SEV loaders and archivers in this datasource will need to complete their current action before exiting.              The @see(MarkDatasourceAsPendingDisable) call will return immediately, but this method should be called repeatedly until the list of ID's returned is empty.             Note that the id's returned are the list of active jobs which are still running
     * @param {module:com.alterian.ja.model/AreDatasourceJobsCompleteRequest} areDatasourceJobsCompleteRequest Finishing off any in-progress jobs on a datasource can take a while, as the SEV loaders and archivers in this datasource will need to complete their current action before exiting.              The @see(MarkDatasourceAsPendingDisable) call will return immediately, but this method should be called repeatedly until the list of ID's returned is empty.             Note that the id's returned are the list of active jobs which are still running
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AreDatasourceCampaignsPausedDefaultResponse} and HTTP response
     */
    areDatasourceJobsCompleteWithHttpInfo(areDatasourceJobsCompleteRequest) {
      let postBody = areDatasourceJobsCompleteRequest;
      // verify the required parameter 'areDatasourceJobsCompleteRequest' is set
      if (areDatasourceJobsCompleteRequest === undefined || areDatasourceJobsCompleteRequest === null) {
        throw new Error("Missing the required parameter 'areDatasourceJobsCompleteRequest' when calling areDatasourceJobsComplete");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AreDatasourceCampaignsPausedDefaultResponse;
      return this.apiClient.callApi(
        '/AreDatasourceJobsComplete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Finishing off any in-progress jobs on a datasource can take a while, as the SEV loaders and archivers in this datasource will need to complete their current action before exiting.              The @see(MarkDatasourceAsPendingDisable) call will return immediately, but this method should be called repeatedly until the list of ID's returned is empty.             Note that the id's returned are the list of active jobs which are still running
     * Finishing off any in-progress jobs on a datasource can take a while, as the SEV loaders and archivers in this datasource will need to complete their current action before exiting.              The @see(MarkDatasourceAsPendingDisable) call will return immediately, but this method should be called repeatedly until the list of ID's returned is empty.             Note that the id's returned are the list of active jobs which are still running
     * @param {module:com.alterian.ja.model/AreDatasourceJobsCompleteRequest} areDatasourceJobsCompleteRequest Finishing off any in-progress jobs on a datasource can take a while, as the SEV loaders and archivers in this datasource will need to complete their current action before exiting.              The @see(MarkDatasourceAsPendingDisable) call will return immediately, but this method should be called repeatedly until the list of ID's returned is empty.             Note that the id's returned are the list of active jobs which are still running
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AreDatasourceCampaignsPausedDefaultResponse}
     */
    areDatasourceJobsComplete(areDatasourceJobsCompleteRequest) {
      return this.areDatasourceJobsCompleteWithHttpInfo(areDatasourceJobsCompleteRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add in a @see(DatasourceUserMapping).
     * Add in a @see(DatasourceUserMapping).
     * @param {module:com.alterian.ja.model/CreateDataSourceMappingRequest} createDataSourceMappingRequest Add in a @see(DatasourceUserMapping).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse} and HTTP response
     */
    createDataSourceMappingWithHttpInfo(createDataSourceMappingRequest) {
      let postBody = createDataSourceMappingRequest;
      // verify the required parameter 'createDataSourceMappingRequest' is set
      if (createDataSourceMappingRequest === undefined || createDataSourceMappingRequest === null) {
        throw new Error("Missing the required parameter 'createDataSourceMappingRequest' when calling createDataSourceMapping");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHChangePasswordDefaultResponse;
      return this.apiClient.callApi(
        '/CreateDataSourceMapping', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add in a @see(DatasourceUserMapping).
     * Add in a @see(DatasourceUserMapping).
     * @param {module:com.alterian.ja.model/CreateDataSourceMappingRequest} createDataSourceMappingRequest Add in a @see(DatasourceUserMapping).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse}
     */
    createDataSourceMapping(createDataSourceMappingRequest) {
      return this.createDataSourceMappingWithHttpInfo(createDataSourceMappingRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates an engine datasource configured to point at the specified server and project.
     * Creates an engine datasource configured to point at the specified server and project.
     * @param {module:com.alterian.ja.model/CreateDatasourceRequest} createDatasourceRequest Creates an engine datasource configured to point at the specified server and project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/CreateClientDefaultResponse} and HTTP response
     */
    createDatasourceWithHttpInfo(createDatasourceRequest) {
      let postBody = createDatasourceRequest;
      // verify the required parameter 'createDatasourceRequest' is set
      if (createDatasourceRequest === undefined || createDatasourceRequest === null) {
        throw new Error("Missing the required parameter 'createDatasourceRequest' when calling createDatasource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateClientDefaultResponse;
      return this.apiClient.callApi(
        '/CreateDatasource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates an engine datasource configured to point at the specified server and project.
     * Creates an engine datasource configured to point at the specified server and project.
     * @param {module:com.alterian.ja.model/CreateDatasourceRequest} createDatasourceRequest Creates an engine datasource configured to point at the specified server and project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/CreateClientDefaultResponse}
     */
    createDatasource(createDatasourceRequest) {
      return this.createDatasourceWithHttpInfo(createDatasourceRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove a @see(DatasourceUserMapping) from the system.  Once this is done, the particular @see(ALUser) will return back to using SYSTEM as the engine User
     * Remove a @see(DatasourceUserMapping) from the system.  Once this is done, the particular @see(ALUser) will return back to using SYSTEM as the engine User
     * @param {module:com.alterian.ja.model/CreateDataSourceMappingRequest} createDataSourceMappingRequest Remove a @see(DatasourceUserMapping) from the system.  Once this is done, the particular @see(ALUser) will return back to using SYSTEM as the engine User
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse} and HTTP response
     */
    deleteDataSourceMappingWithHttpInfo(createDataSourceMappingRequest) {
      let postBody = createDataSourceMappingRequest;
      // verify the required parameter 'createDataSourceMappingRequest' is set
      if (createDataSourceMappingRequest === undefined || createDataSourceMappingRequest === null) {
        throw new Error("Missing the required parameter 'createDataSourceMappingRequest' when calling deleteDataSourceMapping");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHChangePasswordDefaultResponse;
      return this.apiClient.callApi(
        '/DeleteDataSourceMapping', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove a @see(DatasourceUserMapping) from the system.  Once this is done, the particular @see(ALUser) will return back to using SYSTEM as the engine User
     * Remove a @see(DatasourceUserMapping) from the system.  Once this is done, the particular @see(ALUser) will return back to using SYSTEM as the engine User
     * @param {module:com.alterian.ja.model/CreateDataSourceMappingRequest} createDataSourceMappingRequest Remove a @see(DatasourceUserMapping) from the system.  Once this is done, the particular @see(ALUser) will return back to using SYSTEM as the engine User
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse}
     */
    deleteDataSourceMapping(createDataSourceMappingRequest) {
      return this.deleteDataSourceMappingWithHttpInfo(createDataSourceMappingRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes a datasource.  Please note that any document which accesses this datasource might not be able to opened.  This method will fail if there are any campaigns which are active against this datasource.
     * Deletes a datasource.  Please note that any document which accesses this datasource might not be able to opened.  This method will fail if there are any campaigns which are active against this datasource.
     * @param {module:com.alterian.ja.model/DeleteDatasourceRequest} deleteDatasourceRequest Deletes a datasource.  Please note that any document which accesses this datasource might not be able to opened.  This method will fail if there are any campaigns which are active against this datasource.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse} and HTTP response
     */
    deleteDatasourceWithHttpInfo(deleteDatasourceRequest) {
      let postBody = deleteDatasourceRequest;
      // verify the required parameter 'deleteDatasourceRequest' is set
      if (deleteDatasourceRequest === undefined || deleteDatasourceRequest === null) {
        throw new Error("Missing the required parameter 'deleteDatasourceRequest' when calling deleteDatasource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHChangePasswordDefaultResponse;
      return this.apiClient.callApi(
        '/DeleteDatasource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes a datasource.  Please note that any document which accesses this datasource might not be able to opened.  This method will fail if there are any campaigns which are active against this datasource.
     * Deletes a datasource.  Please note that any document which accesses this datasource might not be able to opened.  This method will fail if there are any campaigns which are active against this datasource.
     * @param {module:com.alterian.ja.model/DeleteDatasourceRequest} deleteDatasourceRequest Deletes a datasource.  Please note that any document which accesses this datasource might not be able to opened.  This method will fail if there are any campaigns which are active against this datasource.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse}
     */
    deleteDatasource(deleteDatasourceRequest) {
      return this.deleteDatasourceWithHttpInfo(deleteDatasourceRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete all versions of the specified transformation list
     * Delete all versions of the specified transformation list
     * @param {module:com.alterian.ja.model/DeleteFieldTransformListRequest} deleteFieldTransformListRequest Delete all versions of the specified transformation list
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse} and HTTP response
     */
    deleteFieldTransformListWithHttpInfo(deleteFieldTransformListRequest) {
      let postBody = deleteFieldTransformListRequest;
      // verify the required parameter 'deleteFieldTransformListRequest' is set
      if (deleteFieldTransformListRequest === undefined || deleteFieldTransformListRequest === null) {
        throw new Error("Missing the required parameter 'deleteFieldTransformListRequest' when calling deleteFieldTransformList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHChangePasswordDefaultResponse;
      return this.apiClient.callApi(
        '/DeleteFieldTransformList', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete all versions of the specified transformation list
     * Delete all versions of the specified transformation list
     * @param {module:com.alterian.ja.model/DeleteFieldTransformListRequest} deleteFieldTransformListRequest Delete all versions of the specified transformation list
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse}
     */
    deleteFieldTransformList(deleteFieldTransformListRequest) {
      return this.deleteFieldTransformListWithHttpInfo(deleteFieldTransformListRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete all versions of the specified transform
     * Delete all versions of the specified transform
     * @param {module:com.alterian.ja.model/DeleteTransformRequest} deleteTransformRequest Delete all versions of the specified transform
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse} and HTTP response
     */
    deleteTransformWithHttpInfo(deleteTransformRequest) {
      let postBody = deleteTransformRequest;
      // verify the required parameter 'deleteTransformRequest' is set
      if (deleteTransformRequest === undefined || deleteTransformRequest === null) {
        throw new Error("Missing the required parameter 'deleteTransformRequest' when calling deleteTransform");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHChangePasswordDefaultResponse;
      return this.apiClient.callApi(
        '/DeleteTransform', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete all versions of the specified transform
     * Delete all versions of the specified transform
     * @param {module:com.alterian.ja.model/DeleteTransformRequest} deleteTransformRequest Delete all versions of the specified transform
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse}
     */
    deleteTransform(deleteTransformRequest) {
      return this.deleteTransformWithHttpInfo(deleteTransformRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Marks a datasource as disabled and invisible.  Typically used as part of the load process.  Please note that once you mark a datasource as disabled, anything which relies upon it will cease to function so make sure you pause campaigns first using @see(PauseDatasourceCampaigns) and verify all campaign activity has ceased with @see(AreDatasourceCampaignsPaused)
     * Marks a datasource as disabled and invisible.  Typically used as part of the load process.  Please note that once you mark a datasource as disabled, anything which relies upon it will cease to function so make sure you pause campaigns first using @see(PauseDatasourceCampaigns) and verify all campaign activity has ceased with @see(AreDatasourceCampaignsPaused)
     * @param {module:com.alterian.ja.model/DisableDatasourceRequest} disableDatasourceRequest Marks a datasource as disabled and invisible.  Typically used as part of the load process.  Please note that once you mark a datasource as disabled, anything which relies upon it will cease to function so make sure you pause campaigns first using @see(PauseDatasourceCampaigns) and verify all campaign activity has ceased with @see(AreDatasourceCampaignsPaused)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse} and HTTP response
     */
    disableDatasourceWithHttpInfo(disableDatasourceRequest) {
      let postBody = disableDatasourceRequest;
      // verify the required parameter 'disableDatasourceRequest' is set
      if (disableDatasourceRequest === undefined || disableDatasourceRequest === null) {
        throw new Error("Missing the required parameter 'disableDatasourceRequest' when calling disableDatasource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHChangePasswordDefaultResponse;
      return this.apiClient.callApi(
        '/DisableDatasource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Marks a datasource as disabled and invisible.  Typically used as part of the load process.  Please note that once you mark a datasource as disabled, anything which relies upon it will cease to function so make sure you pause campaigns first using @see(PauseDatasourceCampaigns) and verify all campaign activity has ceased with @see(AreDatasourceCampaignsPaused)
     * Marks a datasource as disabled and invisible.  Typically used as part of the load process.  Please note that once you mark a datasource as disabled, anything which relies upon it will cease to function so make sure you pause campaigns first using @see(PauseDatasourceCampaigns) and verify all campaign activity has ceased with @see(AreDatasourceCampaignsPaused)
     * @param {module:com.alterian.ja.model/DisableDatasourceRequest} disableDatasourceRequest Marks a datasource as disabled and invisible.  Typically used as part of the load process.  Please note that once you mark a datasource as disabled, anything which relies upon it will cease to function so make sure you pause campaigns first using @see(PauseDatasourceCampaigns) and verify all campaign activity has ceased with @see(AreDatasourceCampaignsPaused)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse}
     */
    disableDatasource(disableDatasourceRequest) {
      return this.disableDatasourceWithHttpInfo(disableDatasourceRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Marks a datasource as enabled and visible.  This makes the datasource available for immediate usage.  You can optionally ask the engine listener service to refresh this datasource upon next poll.  Useful for doing a dataload.
     * Marks a datasource as enabled and visible.  This makes the datasource available for immediate usage.  You can optionally ask the engine listener service to refresh this datasource upon next poll.  Useful for doing a dataload.
     * @param {module:com.alterian.ja.model/EnableDatasourceRequest} enableDatasourceRequest Marks a datasource as enabled and visible.  This makes the datasource available for immediate usage.  You can optionally ask the engine listener service to refresh this datasource upon next poll.  Useful for doing a dataload.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse} and HTTP response
     */
    enableDatasourceWithHttpInfo(enableDatasourceRequest) {
      let postBody = enableDatasourceRequest;
      // verify the required parameter 'enableDatasourceRequest' is set
      if (enableDatasourceRequest === undefined || enableDatasourceRequest === null) {
        throw new Error("Missing the required parameter 'enableDatasourceRequest' when calling enableDatasource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHChangePasswordDefaultResponse;
      return this.apiClient.callApi(
        '/EnableDatasource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Marks a datasource as enabled and visible.  This makes the datasource available for immediate usage.  You can optionally ask the engine listener service to refresh this datasource upon next poll.  Useful for doing a dataload.
     * Marks a datasource as enabled and visible.  This makes the datasource available for immediate usage.  You can optionally ask the engine listener service to refresh this datasource upon next poll.  Useful for doing a dataload.
     * @param {module:com.alterian.ja.model/EnableDatasourceRequest} enableDatasourceRequest Marks a datasource as enabled and visible.  This makes the datasource available for immediate usage.  You can optionally ask the engine listener service to refresh this datasource upon next poll.  Useful for doing a dataload.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse}
     */
    enableDatasource(enableDatasourceRequest) {
      return this.enableDatasourceWithHttpInfo(enableDatasourceRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Export a list of field transforms for use in transforming discrete values
     * Export a list of field transforms for use in transforming discrete values
     * @param {Object} opts Optional parameters
     * @param {Number} [id] 
     * @param {Number} [version] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link File} and HTTP response
     */
    exportFieldTransformListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'Id': opts['id'],
        'Version': opts['version']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = File;
      return this.apiClient.callApi(
        '/ExportFieldTransformList', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Export a list of field transforms for use in transforming discrete values
     * Export a list of field transforms for use in transforming discrete values
     * @param {Object} opts Optional parameters
     * @param {Number} opts.id 
     * @param {Number} opts.version 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link File}
     */
    exportFieldTransformList(opts) {
      return this.exportFieldTransformListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a list of the attributes which can be applied to the given type of datasource.
     * Get a list of the attributes which can be applied to the given type of datasource.
     * @param {module:com.alterian.ja.model/GetDataSourceAttributesRequest} getDataSourceAttributesRequest Get a list of the attributes which can be applied to the given type of datasource.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/GetDataSourceAttributesDefaultResponse} and HTTP response
     */
    getDataSourceAttributesWithHttpInfo(getDataSourceAttributesRequest) {
      let postBody = getDataSourceAttributesRequest;
      // verify the required parameter 'getDataSourceAttributesRequest' is set
      if (getDataSourceAttributesRequest === undefined || getDataSourceAttributesRequest === null) {
        throw new Error("Missing the required parameter 'getDataSourceAttributesRequest' when calling getDataSourceAttributes");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetDataSourceAttributesDefaultResponse;
      return this.apiClient.callApi(
        '/GetDataSourceAttributes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a list of the attributes which can be applied to the given type of datasource.
     * Get a list of the attributes which can be applied to the given type of datasource.
     * @param {module:com.alterian.ja.model/GetDataSourceAttributesRequest} getDataSourceAttributesRequest Get a list of the attributes which can be applied to the given type of datasource.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/GetDataSourceAttributesDefaultResponse}
     */
    getDataSourceAttributes(getDataSourceAttributesRequest) {
      return this.getDataSourceAttributesWithHttpInfo(getDataSourceAttributesRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Given a userID and datasourceID, return back the engine user name which should be used whilst connecting
     * Given a userID and datasourceID, return back the engine user name which should be used whilst connecting
     * @param {module:com.alterian.ja.model/GetDataSourceEngineUserNameRequest} getDataSourceEngineUserNameRequest Given a userID and datasourceID, return back the engine user name which should be used whilst connecting
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/GetDataSourceEngineUserNameDefaultResponse} and HTTP response
     */
    getDataSourceEngineUserNameWithHttpInfo(getDataSourceEngineUserNameRequest) {
      let postBody = getDataSourceEngineUserNameRequest;
      // verify the required parameter 'getDataSourceEngineUserNameRequest' is set
      if (getDataSourceEngineUserNameRequest === undefined || getDataSourceEngineUserNameRequest === null) {
        throw new Error("Missing the required parameter 'getDataSourceEngineUserNameRequest' when calling getDataSourceEngineUserName");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetDataSourceEngineUserNameDefaultResponse;
      return this.apiClient.callApi(
        '/GetDataSourceEngineUserName', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Given a userID and datasourceID, return back the engine user name which should be used whilst connecting
     * Given a userID and datasourceID, return back the engine user name which should be used whilst connecting
     * @param {module:com.alterian.ja.model/GetDataSourceEngineUserNameRequest} getDataSourceEngineUserNameRequest Given a userID and datasourceID, return back the engine user name which should be used whilst connecting
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/GetDataSourceEngineUserNameDefaultResponse}
     */
    getDataSourceEngineUserName(getDataSourceEngineUserNameRequest) {
      return this.getDataSourceEngineUserNameWithHttpInfo(getDataSourceEngineUserNameRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Allows you to search for data source objects, inclusing datasource, database, table and columns.
     * Allows you to search for data source objects, inclusing datasource, database, table and columns.
     * @param {module:com.alterian.ja.model/GetDataSourceItemsRequest} getDataSourceItemsRequest Allows you to search for data source objects, inclusing datasource, database, table and columns.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/GetDataSourceItemsDefaultResponse} and HTTP response
     */
    getDataSourceItemsWithHttpInfo(getDataSourceItemsRequest) {
      let postBody = getDataSourceItemsRequest;
      // verify the required parameter 'getDataSourceItemsRequest' is set
      if (getDataSourceItemsRequest === undefined || getDataSourceItemsRequest === null) {
        throw new Error("Missing the required parameter 'getDataSourceItemsRequest' when calling getDataSourceItems");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetDataSourceItemsDefaultResponse;
      return this.apiClient.callApi(
        '/GetDataSourceItems', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Allows you to search for data source objects, inclusing datasource, database, table and columns.
     * Allows you to search for data source objects, inclusing datasource, database, table and columns.
     * @param {module:com.alterian.ja.model/GetDataSourceItemsRequest} getDataSourceItemsRequest Allows you to search for data source objects, inclusing datasource, database, table and columns.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/GetDataSourceItemsDefaultResponse}
     */
    getDataSourceItems(getDataSourceItemsRequest) {
      return this.getDataSourceItemsWithHttpInfo(getDataSourceItemsRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Return back the @see(DatasourceUserMapping)s in the system
     * Return back the @see(DatasourceUserMapping)s in the system
     * @param {module:com.alterian.ja.model/GetDataSourceMappingsRequest} getDataSourceMappingsRequest Return back the @see(DatasourceUserMapping)s in the system
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/GetDataSourceMappingsDefaultResponse} and HTTP response
     */
    getDataSourceMappingsWithHttpInfo(getDataSourceMappingsRequest) {
      let postBody = getDataSourceMappingsRequest;
      // verify the required parameter 'getDataSourceMappingsRequest' is set
      if (getDataSourceMappingsRequest === undefined || getDataSourceMappingsRequest === null) {
        throw new Error("Missing the required parameter 'getDataSourceMappingsRequest' when calling getDataSourceMappings");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetDataSourceMappingsDefaultResponse;
      return this.apiClient.callApi(
        '/GetDataSourceMappings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Return back the @see(DatasourceUserMapping)s in the system
     * Return back the @see(DatasourceUserMapping)s in the system
     * @param {module:com.alterian.ja.model/GetDataSourceMappingsRequest} getDataSourceMappingsRequest Return back the @see(DatasourceUserMapping)s in the system
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/GetDataSourceMappingsDefaultResponse}
     */
    getDataSourceMappings(getDataSourceMappingsRequest) {
      return this.getDataSourceMappingsWithHttpInfo(getDataSourceMappingsRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Return back a list of @see(ALDataSourceType) for use with @see(ALDataSource)s.
     * Return back a list of @see(ALDataSourceType) for use with @see(ALDataSource)s.
     * @param {module:com.alterian.ja.model/GetClientSetsRequest} getClientSetsRequest Return back a list of @see(ALDataSourceType) for use with @see(ALDataSource)s.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/GetDataSourceTypesDefaultResponse} and HTTP response
     */
    getDataSourceTypesWithHttpInfo(getClientSetsRequest) {
      let postBody = getClientSetsRequest;
      // verify the required parameter 'getClientSetsRequest' is set
      if (getClientSetsRequest === undefined || getClientSetsRequest === null) {
        throw new Error("Missing the required parameter 'getClientSetsRequest' when calling getDataSourceTypes");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetDataSourceTypesDefaultResponse;
      return this.apiClient.callApi(
        '/GetDataSourceTypes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Return back a list of @see(ALDataSourceType) for use with @see(ALDataSource)s.
     * Return back a list of @see(ALDataSourceType) for use with @see(ALDataSource)s.
     * @param {module:com.alterian.ja.model/GetClientSetsRequest} getClientSetsRequest Return back a list of @see(ALDataSourceType) for use with @see(ALDataSource)s.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/GetDataSourceTypesDefaultResponse}
     */
    getDataSourceTypes(getClientSetsRequest) {
      return this.getDataSourceTypesWithHttpInfo(getClientSetsRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Requests a list of users from a particular @see(ALDataSource).  This call currently only functions against an Engine @see(ALDataSource).
     * Requests a list of users from a particular @see(ALDataSource).  This call currently only functions against an Engine @see(ALDataSource).
     * @param {module:com.alterian.ja.model/GetDataSourceUsersRequest} getDataSourceUsersRequest Requests a list of users from a particular @see(ALDataSource).  This call currently only functions against an Engine @see(ALDataSource).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/GetDataSourceUsersDefaultResponse} and HTTP response
     */
    getDataSourceUsersWithHttpInfo(getDataSourceUsersRequest) {
      let postBody = getDataSourceUsersRequest;
      // verify the required parameter 'getDataSourceUsersRequest' is set
      if (getDataSourceUsersRequest === undefined || getDataSourceUsersRequest === null) {
        throw new Error("Missing the required parameter 'getDataSourceUsersRequest' when calling getDataSourceUsers");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetDataSourceUsersDefaultResponse;
      return this.apiClient.callApi(
        '/GetDataSourceUsers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Requests a list of users from a particular @see(ALDataSource).  This call currently only functions against an Engine @see(ALDataSource).
     * Requests a list of users from a particular @see(ALDataSource).  This call currently only functions against an Engine @see(ALDataSource).
     * @param {module:com.alterian.ja.model/GetDataSourceUsersRequest} getDataSourceUsersRequest Requests a list of users from a particular @see(ALDataSource).  This call currently only functions against an Engine @see(ALDataSource).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/GetDataSourceUsersDefaultResponse}
     */
    getDataSourceUsers(getDataSourceUsersRequest) {
      return this.getDataSourceUsersWithHttpInfo(getDataSourceUsersRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns back a list of @see(ALDataSource)s from the system
     * Returns back a list of @see(ALDataSource)s from the system
     * @param {module:com.alterian.ja.model/GetDataSourcesRequest} getDataSourcesRequest Returns back a list of @see(ALDataSource)s from the system
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/GetDataSourcesDefaultResponse} and HTTP response
     */
    getDataSourcesWithHttpInfo(getDataSourcesRequest) {
      let postBody = getDataSourcesRequest;
      // verify the required parameter 'getDataSourcesRequest' is set
      if (getDataSourcesRequest === undefined || getDataSourcesRequest === null) {
        throw new Error("Missing the required parameter 'getDataSourcesRequest' when calling getDataSources");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetDataSourcesDefaultResponse;
      return this.apiClient.callApi(
        '/GetDataSources', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns back a list of @see(ALDataSource)s from the system
     * Returns back a list of @see(ALDataSource)s from the system
     * @param {module:com.alterian.ja.model/GetDataSourcesRequest} getDataSourcesRequest Returns back a list of @see(ALDataSource)s from the system
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/GetDataSourcesDefaultResponse}
     */
    getDataSources(getDataSourcesRequest) {
      return this.getDataSourcesWithHttpInfo(getDataSourcesRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves the top level data for a datasource.  Does not fully populate the datasource.  This is useful for getting things like the project, server and last refresh date.
     * Retrieves the top level data for a datasource.  Does not fully populate the datasource.  This is useful for getting things like the project, server and last refresh date.
     * @param {module:com.alterian.ja.model/GetDatasourceRequest} getDatasourceRequest Retrieves the top level data for a datasource.  Does not fully populate the datasource.  This is useful for getting things like the project, server and last refresh date.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/GetDatasourceDefaultResponse} and HTTP response
     */
    getDatasourceWithHttpInfo(getDatasourceRequest) {
      let postBody = getDatasourceRequest;
      // verify the required parameter 'getDatasourceRequest' is set
      if (getDatasourceRequest === undefined || getDatasourceRequest === null) {
        throw new Error("Missing the required parameter 'getDatasourceRequest' when calling getDatasource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetDatasourceDefaultResponse;
      return this.apiClient.callApi(
        '/GetDatasource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieves the top level data for a datasource.  Does not fully populate the datasource.  This is useful for getting things like the project, server and last refresh date.
     * Retrieves the top level data for a datasource.  Does not fully populate the datasource.  This is useful for getting things like the project, server and last refresh date.
     * @param {module:com.alterian.ja.model/GetDatasourceRequest} getDatasourceRequest Retrieves the top level data for a datasource.  Does not fully populate the datasource.  This is useful for getting things like the project, server and last refresh date.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/GetDatasourceDefaultResponse}
     */
    getDatasource(getDatasourceRequest) {
      return this.getDatasourceWithHttpInfo(getDatasourceRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Fetch the details of one column from the system.
     * Fetch the details of one column from the system.
     * @param {module:com.alterian.ja.model/GetDatasourceColumnRequest} getDatasourceColumnRequest Fetch the details of one column from the system.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/GetDatasourceColumnDefaultResponse} and HTTP response
     */
    getDatasourceColumnWithHttpInfo(getDatasourceColumnRequest) {
      let postBody = getDatasourceColumnRequest;
      // verify the required parameter 'getDatasourceColumnRequest' is set
      if (getDatasourceColumnRequest === undefined || getDatasourceColumnRequest === null) {
        throw new Error("Missing the required parameter 'getDatasourceColumnRequest' when calling getDatasourceColumn");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetDatasourceColumnDefaultResponse;
      return this.apiClient.callApi(
        '/GetDatasourceColumn', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Fetch the details of one column from the system.
     * Fetch the details of one column from the system.
     * @param {module:com.alterian.ja.model/GetDatasourceColumnRequest} getDatasourceColumnRequest Fetch the details of one column from the system.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/GetDatasourceColumnDefaultResponse}
     */
    getDatasourceColumn(getDatasourceColumnRequest) {
      return this.getDatasourceColumnWithHttpInfo(getDatasourceColumnRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Fetch a list of columns from the system.
     * Fetch a list of columns from the system.
     * @param {module:com.alterian.ja.model/GetDatasourceColumnsRequest} getDatasourceColumnsRequest Fetch a list of columns from the system.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/GetDatasourceColumnsDefaultResponse} and HTTP response
     */
    getDatasourceColumnsWithHttpInfo(getDatasourceColumnsRequest) {
      let postBody = getDatasourceColumnsRequest;
      // verify the required parameter 'getDatasourceColumnsRequest' is set
      if (getDatasourceColumnsRequest === undefined || getDatasourceColumnsRequest === null) {
        throw new Error("Missing the required parameter 'getDatasourceColumnsRequest' when calling getDatasourceColumns");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetDatasourceColumnsDefaultResponse;
      return this.apiClient.callApi(
        '/GetDatasourceColumns', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Fetch a list of columns from the system.
     * Fetch a list of columns from the system.
     * @param {module:com.alterian.ja.model/GetDatasourceColumnsRequest} getDatasourceColumnsRequest Fetch a list of columns from the system.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/GetDatasourceColumnsDefaultResponse}
     */
    getDatasourceColumns(getDatasourceColumnsRequest) {
      return this.getDatasourceColumnsWithHttpInfo(getDatasourceColumnsRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Fetch a list of databases from the system.
     * Fetch a list of databases from the system.
     * @param {module:com.alterian.ja.model/GetDatasourceDatabasesRequest} getDatasourceDatabasesRequest Fetch a list of databases from the system.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/GetDatasourceDatabasesDefaultResponse} and HTTP response
     */
    getDatasourceDatabasesWithHttpInfo(getDatasourceDatabasesRequest) {
      let postBody = getDatasourceDatabasesRequest;
      // verify the required parameter 'getDatasourceDatabasesRequest' is set
      if (getDatasourceDatabasesRequest === undefined || getDatasourceDatabasesRequest === null) {
        throw new Error("Missing the required parameter 'getDatasourceDatabasesRequest' when calling getDatasourceDatabases");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetDatasourceDatabasesDefaultResponse;
      return this.apiClient.callApi(
        '/GetDatasourceDatabases', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Fetch a list of databases from the system.
     * Fetch a list of databases from the system.
     * @param {module:com.alterian.ja.model/GetDatasourceDatabasesRequest} getDatasourceDatabasesRequest Fetch a list of databases from the system.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/GetDatasourceDatabasesDefaultResponse}
     */
    getDatasourceDatabases(getDatasourceDatabasesRequest) {
      return this.getDatasourceDatabasesWithHttpInfo(getDatasourceDatabasesRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Fetch a list of the available types of field that are supported
     * Fetch a list of the available types of field that are supported
     * @param {module:com.alterian.ja.model/GetClientSetsRequest} getClientSetsRequest Fetch a list of the available types of field that are supported
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/GetDatasourceFieldTypesDefaultResponse} and HTTP response
     */
    getDatasourceFieldTypesWithHttpInfo(getClientSetsRequest) {
      let postBody = getClientSetsRequest;
      // verify the required parameter 'getClientSetsRequest' is set
      if (getClientSetsRequest === undefined || getClientSetsRequest === null) {
        throw new Error("Missing the required parameter 'getClientSetsRequest' when calling getDatasourceFieldTypes");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetDatasourceFieldTypesDefaultResponse;
      return this.apiClient.callApi(
        '/GetDatasourceFieldTypes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Fetch a list of the available types of field that are supported
     * Fetch a list of the available types of field that are supported
     * @param {module:com.alterian.ja.model/GetClientSetsRequest} getClientSetsRequest Fetch a list of the available types of field that are supported
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/GetDatasourceFieldTypesDefaultResponse}
     */
    getDatasourceFieldTypes(getClientSetsRequest) {
      return this.getDatasourceFieldTypesWithHttpInfo(getClientSetsRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Fetch a list of tables from the system.
     * Fetch a list of tables from the system.
     * @param {module:com.alterian.ja.model/GetDatasourceTablesRequest} getDatasourceTablesRequest Fetch a list of tables from the system.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/GetDatasourceTablesDefaultResponse} and HTTP response
     */
    getDatasourceTablesWithHttpInfo(getDatasourceTablesRequest) {
      let postBody = getDatasourceTablesRequest;
      // verify the required parameter 'getDatasourceTablesRequest' is set
      if (getDatasourceTablesRequest === undefined || getDatasourceTablesRequest === null) {
        throw new Error("Missing the required parameter 'getDatasourceTablesRequest' when calling getDatasourceTables");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetDatasourceTablesDefaultResponse;
      return this.apiClient.callApi(
        '/GetDatasourceTables', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Fetch a list of tables from the system.
     * Fetch a list of tables from the system.
     * @param {module:com.alterian.ja.model/GetDatasourceTablesRequest} getDatasourceTablesRequest Fetch a list of tables from the system.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/GetDatasourceTablesDefaultResponse}
     */
    getDatasourceTables(getDatasourceTablesRequest) {
      return this.getDatasourceTablesWithHttpInfo(getDatasourceTablesRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a specified decode list
     * Get a specified decode list
     * @param {module:com.alterian.ja.model/GetDecodeListRequest} getDecodeListRequest Get a specified decode list
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/GetDecodeListDefaultResponse} and HTTP response
     */
    getDecodeListWithHttpInfo(getDecodeListRequest) {
      let postBody = getDecodeListRequest;
      // verify the required parameter 'getDecodeListRequest' is set
      if (getDecodeListRequest === undefined || getDecodeListRequest === null) {
        throw new Error("Missing the required parameter 'getDecodeListRequest' when calling getDecodeList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetDecodeListDefaultResponse;
      return this.apiClient.callApi(
        '/GetDecodeList', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a specified decode list
     * Get a specified decode list
     * @param {module:com.alterian.ja.model/GetDecodeListRequest} getDecodeListRequest Get a specified decode list
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/GetDecodeListDefaultResponse}
     */
    getDecodeList(getDecodeListRequest) {
      return this.getDecodeListWithHttpInfo(getDecodeListRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a list of field transforms for use in transforming discrete values
     * Get a list of field transforms for use in transforming discrete values
     * @param {module:com.alterian.ja.model/GetFieldTransformListRequest} getFieldTransformListRequest Get a list of field transforms for use in transforming discrete values
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/GetFieldTransformListDefaultResponse} and HTTP response
     */
    getFieldTransformListWithHttpInfo(getFieldTransformListRequest) {
      let postBody = getFieldTransformListRequest;
      // verify the required parameter 'getFieldTransformListRequest' is set
      if (getFieldTransformListRequest === undefined || getFieldTransformListRequest === null) {
        throw new Error("Missing the required parameter 'getFieldTransformListRequest' when calling getFieldTransformList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetFieldTransformListDefaultResponse;
      return this.apiClient.callApi(
        '/GetFieldTransformList', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a list of field transforms for use in transforming discrete values
     * Get a list of field transforms for use in transforming discrete values
     * @param {module:com.alterian.ja.model/GetFieldTransformListRequest} getFieldTransformListRequest Get a list of field transforms for use in transforming discrete values
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/GetFieldTransformListDefaultResponse}
     */
    getFieldTransformList(getFieldTransformListRequest) {
      return this.getFieldTransformListWithHttpInfo(getFieldTransformListRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the basic details for all available transform lists (Name, Id, (Max) Version- but not Metadata or JSON transforms)
     * Get the basic details for all available transform lists (Name, Id, (Max) Version- but not Metadata or JSON transforms)
     * @param {module:com.alterian.ja.model/GetClientSetsRequest} getClientSetsRequest Get the basic details for all available transform lists (Name, Id, (Max) Version- but not Metadata or JSON transforms)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/GetFieldTransformListsDefaultResponse} and HTTP response
     */
    getFieldTransformListsWithHttpInfo(getClientSetsRequest) {
      let postBody = getClientSetsRequest;
      // verify the required parameter 'getClientSetsRequest' is set
      if (getClientSetsRequest === undefined || getClientSetsRequest === null) {
        throw new Error("Missing the required parameter 'getClientSetsRequest' when calling getFieldTransformLists");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetFieldTransformListsDefaultResponse;
      return this.apiClient.callApi(
        '/GetFieldTransformLists', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get the basic details for all available transform lists (Name, Id, (Max) Version- but not Metadata or JSON transforms)
     * Get the basic details for all available transform lists (Name, Id, (Max) Version- but not Metadata or JSON transforms)
     * @param {module:com.alterian.ja.model/GetClientSetsRequest} getClientSetsRequest Get the basic details for all available transform lists (Name, Id, (Max) Version- but not Metadata or JSON transforms)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/GetFieldTransformListsDefaultResponse}
     */
    getFieldTransformLists(getClientSetsRequest) {
      return this.getFieldTransformListsWithHttpInfo(getClientSetsRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets the status of a process which was queued.  Note that once the process is finished, you may only get the status once and each call thereafter will return NotFound.
     * Gets the status of a process which was queued.  Note that once the process is finished, you may only get the status once and each call thereafter will return NotFound.
     * @param {module:com.alterian.ja.model/GetProcessStatusRequest} getProcessStatusRequest Gets the status of a process which was queued.  Note that once the process is finished, you may only get the status once and each call thereafter will return NotFound.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/GetProcessStatusDefaultResponse} and HTTP response
     */
    getProcessStatusWithHttpInfo(getProcessStatusRequest) {
      let postBody = getProcessStatusRequest;
      // verify the required parameter 'getProcessStatusRequest' is set
      if (getProcessStatusRequest === undefined || getProcessStatusRequest === null) {
        throw new Error("Missing the required parameter 'getProcessStatusRequest' when calling getProcessStatus");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetProcessStatusDefaultResponse;
      return this.apiClient.callApi(
        '/GetProcessStatus', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Gets the status of a process which was queued.  Note that once the process is finished, you may only get the status once and each call thereafter will return NotFound.
     * Gets the status of a process which was queued.  Note that once the process is finished, you may only get the status once and each call thereafter will return NotFound.
     * @param {module:com.alterian.ja.model/GetProcessStatusRequest} getProcessStatusRequest Gets the status of a process which was queued.  Note that once the process is finished, you may only get the status once and each call thereafter will return NotFound.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/GetProcessStatusDefaultResponse}
     */
    getProcessStatus(getProcessStatusRequest) {
      return this.getProcessStatusWithHttpInfo(getProcessStatusRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the basic details for all available transforms (Name, Id, (Max) Version, Type) and which versions have actually been published
     * Get the basic details for all available transforms (Name, Id, (Max) Version, Type) and which versions have actually been published
     * @param {module:com.alterian.ja.model/GetTransformsRequest} getTransformsRequest Get the basic details for all available transforms (Name, Id, (Max) Version, Type) and which versions have actually been published
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/GetFieldTransformListsDefaultResponse} and HTTP response
     */
    getTransformsWithHttpInfo(getTransformsRequest) {
      let postBody = getTransformsRequest;
      // verify the required parameter 'getTransformsRequest' is set
      if (getTransformsRequest === undefined || getTransformsRequest === null) {
        throw new Error("Missing the required parameter 'getTransformsRequest' when calling getTransforms");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetFieldTransformListsDefaultResponse;
      return this.apiClient.callApi(
        '/GetTransforms', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get the basic details for all available transforms (Name, Id, (Max) Version, Type) and which versions have actually been published
     * Get the basic details for all available transforms (Name, Id, (Max) Version, Type) and which versions have actually been published
     * @param {module:com.alterian.ja.model/GetTransformsRequest} getTransformsRequest Get the basic details for all available transforms (Name, Id, (Max) Version, Type) and which versions have actually been published
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/GetFieldTransformListsDefaultResponse}
     */
    getTransforms(getTransformsRequest) {
      return this.getTransformsWithHttpInfo(getTransformsRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Mark a data source as pending disable. This will cause any active SEV threads to exit upon their next iteration, which can take a while.              Clients should then call @see(AreDatasourceJobsComplete) to check that the datasource is idle before continuing to perform the actual disable, and can call @see(DisableDatasource)
     * Mark a data source as pending disable. This will cause any active SEV threads to exit upon their next iteration, which can take a while.              Clients should then call @see(AreDatasourceJobsComplete) to check that the datasource is idle before continuing to perform the actual disable, and can call @see(DisableDatasource)
     * @param {module:com.alterian.ja.model/MarkDatasourceAsPendingDisableRequest} markDatasourceAsPendingDisableRequest Mark a data source as pending disable. This will cause any active SEV threads to exit upon their next iteration, which can take a while.              Clients should then call @see(AreDatasourceJobsComplete) to check that the datasource is idle before continuing to perform the actual disable, and can call @see(DisableDatasource)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse} and HTTP response
     */
    markDatasourceAsPendingDisableWithHttpInfo(markDatasourceAsPendingDisableRequest) {
      let postBody = markDatasourceAsPendingDisableRequest;
      // verify the required parameter 'markDatasourceAsPendingDisableRequest' is set
      if (markDatasourceAsPendingDisableRequest === undefined || markDatasourceAsPendingDisableRequest === null) {
        throw new Error("Missing the required parameter 'markDatasourceAsPendingDisableRequest' when calling markDatasourceAsPendingDisable");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHChangePasswordDefaultResponse;
      return this.apiClient.callApi(
        '/MarkDatasourceAsPendingDisable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Mark a data source as pending disable. This will cause any active SEV threads to exit upon their next iteration, which can take a while.              Clients should then call @see(AreDatasourceJobsComplete) to check that the datasource is idle before continuing to perform the actual disable, and can call @see(DisableDatasource)
     * Mark a data source as pending disable. This will cause any active SEV threads to exit upon their next iteration, which can take a while.              Clients should then call @see(AreDatasourceJobsComplete) to check that the datasource is idle before continuing to perform the actual disable, and can call @see(DisableDatasource)
     * @param {module:com.alterian.ja.model/MarkDatasourceAsPendingDisableRequest} markDatasourceAsPendingDisableRequest Mark a data source as pending disable. This will cause any active SEV threads to exit upon their next iteration, which can take a while.              Clients should then call @see(AreDatasourceJobsComplete) to check that the datasource is idle before continuing to perform the actual disable, and can call @see(DisableDatasource)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse}
     */
    markDatasourceAsPendingDisable(markDatasourceAsPendingDisableRequest) {
      return this.markDatasourceAsPendingDisableWithHttpInfo(markDatasourceAsPendingDisableRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Pause the campaigns in this datasource. This will request all the campaigns that use this datasource to be paused, which can take a while.              Clients should then call @see(AreDatasourceCampaignsPaused) to check that the datasource is idle before continuing, and can call @see(ResumeDatasourceCampaigns)
     * Pause the campaigns in this datasource. This will request all the campaigns that use this datasource to be paused, which can take a while.              Clients should then call @see(AreDatasourceCampaignsPaused) to check that the datasource is idle before continuing, and can call @see(ResumeDatasourceCampaigns)
     * @param {module:com.alterian.ja.model/PauseDatasourceCampaignsRequest} pauseDatasourceCampaignsRequest Pause the campaigns in this datasource. This will request all the campaigns that use this datasource to be paused, which can take a while.              Clients should then call @see(AreDatasourceCampaignsPaused) to check that the datasource is idle before continuing, and can call @see(ResumeDatasourceCampaigns)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/CreateClientDefaultResponse} and HTTP response
     */
    pauseDatasourceCampaignsWithHttpInfo(pauseDatasourceCampaignsRequest) {
      let postBody = pauseDatasourceCampaignsRequest;
      // verify the required parameter 'pauseDatasourceCampaignsRequest' is set
      if (pauseDatasourceCampaignsRequest === undefined || pauseDatasourceCampaignsRequest === null) {
        throw new Error("Missing the required parameter 'pauseDatasourceCampaignsRequest' when calling pauseDatasourceCampaigns");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateClientDefaultResponse;
      return this.apiClient.callApi(
        '/PauseDatasourceCampaigns', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Pause the campaigns in this datasource. This will request all the campaigns that use this datasource to be paused, which can take a while.              Clients should then call @see(AreDatasourceCampaignsPaused) to check that the datasource is idle before continuing, and can call @see(ResumeDatasourceCampaigns)
     * Pause the campaigns in this datasource. This will request all the campaigns that use this datasource to be paused, which can take a while.              Clients should then call @see(AreDatasourceCampaignsPaused) to check that the datasource is idle before continuing, and can call @see(ResumeDatasourceCampaigns)
     * @param {module:com.alterian.ja.model/PauseDatasourceCampaignsRequest} pauseDatasourceCampaignsRequest Pause the campaigns in this datasource. This will request all the campaigns that use this datasource to be paused, which can take a while.              Clients should then call @see(AreDatasourceCampaignsPaused) to check that the datasource is idle before continuing, and can call @see(ResumeDatasourceCampaigns)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/CreateClientDefaultResponse}
     */
    pauseDatasourceCampaigns(pauseDatasourceCampaignsRequest) {
      return this.pauseDatasourceCampaignsWithHttpInfo(pauseDatasourceCampaignsRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Requests an immediate refresh of an engine datasource.  Call @see(GetProcessStatus) to determine when the refresh has finished or check the LastRefresh date on the datasource.
     * Requests an immediate refresh of an engine datasource.  Call @see(GetProcessStatus) to determine when the refresh has finished or check the LastRefresh date on the datasource.
     * @param {module:com.alterian.ja.model/RefreshDatasourceRequest} refreshDatasourceRequest Requests an immediate refresh of an engine datasource.  Call @see(GetProcessStatus) to determine when the refresh has finished or check the LastRefresh date on the datasource.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/CreateClientDefaultResponse} and HTTP response
     */
    refreshDatasourceWithHttpInfo(refreshDatasourceRequest) {
      let postBody = refreshDatasourceRequest;
      // verify the required parameter 'refreshDatasourceRequest' is set
      if (refreshDatasourceRequest === undefined || refreshDatasourceRequest === null) {
        throw new Error("Missing the required parameter 'refreshDatasourceRequest' when calling refreshDatasource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateClientDefaultResponse;
      return this.apiClient.callApi(
        '/RefreshDatasource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Requests an immediate refresh of an engine datasource.  Call @see(GetProcessStatus) to determine when the refresh has finished or check the LastRefresh date on the datasource.
     * Requests an immediate refresh of an engine datasource.  Call @see(GetProcessStatus) to determine when the refresh has finished or check the LastRefresh date on the datasource.
     * @param {module:com.alterian.ja.model/RefreshDatasourceRequest} refreshDatasourceRequest Requests an immediate refresh of an engine datasource.  Call @see(GetProcessStatus) to determine when the refresh has finished or check the LastRefresh date on the datasource.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/CreateClientDefaultResponse}
     */
    refreshDatasource(refreshDatasourceRequest) {
      return this.refreshDatasourceWithHttpInfo(refreshDatasourceRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Resume the campaigns in this datasource. This is the opposite of @see(PauseDatasourceCampaigns), and only campaigns that were paused by that method will be resumed. Campaigns that             were paused manually will not be resumed.
     * Resume the campaigns in this datasource. This is the opposite of @see(PauseDatasourceCampaigns), and only campaigns that were paused by that method will be resumed. Campaigns that             were paused manually will not be resumed.
     * @param {module:com.alterian.ja.model/ResumeDatasourceCampaignsRequest} resumeDatasourceCampaignsRequest Resume the campaigns in this datasource. This is the opposite of @see(PauseDatasourceCampaigns), and only campaigns that were paused by that method will be resumed. Campaigns that             were paused manually will not be resumed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse} and HTTP response
     */
    resumeDatasourceCampaignsWithHttpInfo(resumeDatasourceCampaignsRequest) {
      let postBody = resumeDatasourceCampaignsRequest;
      // verify the required parameter 'resumeDatasourceCampaignsRequest' is set
      if (resumeDatasourceCampaignsRequest === undefined || resumeDatasourceCampaignsRequest === null) {
        throw new Error("Missing the required parameter 'resumeDatasourceCampaignsRequest' when calling resumeDatasourceCampaigns");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHChangePasswordDefaultResponse;
      return this.apiClient.callApi(
        '/ResumeDatasourceCampaigns', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Resume the campaigns in this datasource. This is the opposite of @see(PauseDatasourceCampaigns), and only campaigns that were paused by that method will be resumed. Campaigns that             were paused manually will not be resumed.
     * Resume the campaigns in this datasource. This is the opposite of @see(PauseDatasourceCampaigns), and only campaigns that were paused by that method will be resumed. Campaigns that             were paused manually will not be resumed.
     * @param {module:com.alterian.ja.model/ResumeDatasourceCampaignsRequest} resumeDatasourceCampaignsRequest Resume the campaigns in this datasource. This is the opposite of @see(PauseDatasourceCampaigns), and only campaigns that were paused by that method will be resumed. Campaigns that             were paused manually will not be resumed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse}
     */
    resumeDatasourceCampaigns(resumeDatasourceCampaignsRequest) {
      return this.resumeDatasourceCampaignsWithHttpInfo(resumeDatasourceCampaignsRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Save a list of decodes
     * Save a list of decodes
     * @param {module:com.alterian.ja.model/SaveDecodeListRequest} saveDecodeListRequest Save a list of decodes
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/GetDecodeListDefaultResponse} and HTTP response
     */
    saveDecodeListWithHttpInfo(saveDecodeListRequest) {
      let postBody = saveDecodeListRequest;
      // verify the required parameter 'saveDecodeListRequest' is set
      if (saveDecodeListRequest === undefined || saveDecodeListRequest === null) {
        throw new Error("Missing the required parameter 'saveDecodeListRequest' when calling saveDecodeList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetDecodeListDefaultResponse;
      return this.apiClient.callApi(
        '/SaveDecodeList', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Save a list of decodes
     * Save a list of decodes
     * @param {module:com.alterian.ja.model/SaveDecodeListRequest} saveDecodeListRequest Save a list of decodes
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/GetDecodeListDefaultResponse}
     */
    saveDecodeList(saveDecodeListRequest) {
      return this.saveDecodeListWithHttpInfo(saveDecodeListRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Save a list of field transforms for use in transforming discrete values
     * Save a list of field transforms for use in transforming discrete values
     * @param {module:com.alterian.ja.model/SaveFieldTransformListRequest} saveFieldTransformListRequest Save a list of field transforms for use in transforming discrete values
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/GetFieldTransformListDefaultResponse} and HTTP response
     */
    saveFieldTransformListWithHttpInfo(saveFieldTransformListRequest) {
      let postBody = saveFieldTransformListRequest;
      // verify the required parameter 'saveFieldTransformListRequest' is set
      if (saveFieldTransformListRequest === undefined || saveFieldTransformListRequest === null) {
        throw new Error("Missing the required parameter 'saveFieldTransformListRequest' when calling saveFieldTransformList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetFieldTransformListDefaultResponse;
      return this.apiClient.callApi(
        '/SaveFieldTransformList', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Save a list of field transforms for use in transforming discrete values
     * Save a list of field transforms for use in transforming discrete values
     * @param {module:com.alterian.ja.model/SaveFieldTransformListRequest} saveFieldTransformListRequest Save a list of field transforms for use in transforming discrete values
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/GetFieldTransformListDefaultResponse}
     */
    saveFieldTransformList(saveFieldTransformListRequest) {
      return this.saveFieldTransformListWithHttpInfo(saveFieldTransformListRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates a @see(DatasourceUserMapping) to map it to another engine user name.
     * Updates a @see(DatasourceUserMapping) to map it to another engine user name.
     * @param {module:com.alterian.ja.model/CreateDataSourceMappingRequest} createDataSourceMappingRequest Updates a @see(DatasourceUserMapping) to map it to another engine user name.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse} and HTTP response
     */
    updateDataSourceMappingWithHttpInfo(createDataSourceMappingRequest) {
      let postBody = createDataSourceMappingRequest;
      // verify the required parameter 'createDataSourceMappingRequest' is set
      if (createDataSourceMappingRequest === undefined || createDataSourceMappingRequest === null) {
        throw new Error("Missing the required parameter 'createDataSourceMappingRequest' when calling updateDataSourceMapping");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHChangePasswordDefaultResponse;
      return this.apiClient.callApi(
        '/UpdateDataSourceMapping', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates a @see(DatasourceUserMapping) to map it to another engine user name.
     * Updates a @see(DatasourceUserMapping) to map it to another engine user name.
     * @param {module:com.alterian.ja.model/CreateDataSourceMappingRequest} createDataSourceMappingRequest Updates a @see(DatasourceUserMapping) to map it to another engine user name.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse}
     */
    updateDataSourceMapping(createDataSourceMappingRequest) {
      return this.updateDataSourceMappingWithHttpInfo(createDataSourceMappingRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates an @see(ALDataSource) with the data which is provided.  Please note that the only properties which are relevant are IsEnabled, IsVisible, Name, LastRefresh and attributes.
     * Updates an @see(ALDataSource) with the data which is provided.  Please note that the only properties which are relevant are IsEnabled, IsVisible, Name, LastRefresh and attributes.
     * @param {module:com.alterian.ja.model/UpdateDatasourceRequest} updateDatasourceRequest Updates an @see(ALDataSource) with the data which is provided.  Please note that the only properties which are relevant are IsEnabled, IsVisible, Name, LastRefresh and attributes.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse} and HTTP response
     */
    updateDatasourceWithHttpInfo(updateDatasourceRequest) {
      let postBody = updateDatasourceRequest;
      // verify the required parameter 'updateDatasourceRequest' is set
      if (updateDatasourceRequest === undefined || updateDatasourceRequest === null) {
        throw new Error("Missing the required parameter 'updateDatasourceRequest' when calling updateDatasource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHChangePasswordDefaultResponse;
      return this.apiClient.callApi(
        '/UpdateDatasource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates an @see(ALDataSource) with the data which is provided.  Please note that the only properties which are relevant are IsEnabled, IsVisible, Name, LastRefresh and attributes.
     * Updates an @see(ALDataSource) with the data which is provided.  Please note that the only properties which are relevant are IsEnabled, IsVisible, Name, LastRefresh and attributes.
     * @param {module:com.alterian.ja.model/UpdateDatasourceRequest} updateDatasourceRequest Updates an @see(ALDataSource) with the data which is provided.  Please note that the only properties which are relevant are IsEnabled, IsVisible, Name, LastRefresh and attributes.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse}
     */
    updateDatasource(updateDatasourceRequest) {
      return this.updateDatasourceWithHttpInfo(updateDatasourceRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
