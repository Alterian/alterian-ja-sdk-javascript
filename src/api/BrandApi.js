/**
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AUTHChangePasswordDefaultResponse from '../com.alterian.ja.model/AUTHChangePasswordDefaultResponse';
import AUTHCreateLoginDefaultResponse from '../com.alterian.ja.model/AUTHCreateLoginDefaultResponse';
import AddLoginImpersonationRequest from '../com.alterian.ja.model/AddLoginImpersonationRequest';
import AddUserToBrandsRequest from '../com.alterian.ja.model/AddUserToBrandsRequest';
import GetBrandTokenRequest from '../com.alterian.ja.model/GetBrandTokenRequest';
import GetBrandsDefaultResponse from '../com.alterian.ja.model/GetBrandsDefaultResponse';
import GetBrandsRequest from '../com.alterian.ja.model/GetBrandsRequest';
import GetLoginBrandDefaultDefaultResponse from '../com.alterian.ja.model/GetLoginBrandDefaultDefaultResponse';
import GetLoginBrandDefaultRequest from '../com.alterian.ja.model/GetLoginBrandDefaultRequest';
import GetLoginUserMappingDefaultResponse from '../com.alterian.ja.model/GetLoginUserMappingDefaultResponse';
import GetLoginUserMappingRequest from '../com.alterian.ja.model/GetLoginUserMappingRequest';
import GetTokenDetailsDefaultResponse from '../com.alterian.ja.model/GetTokenDetailsDefaultResponse';
import RemoveLoginBrandDefaultRequest from '../com.alterian.ja.model/RemoveLoginBrandDefaultRequest';
import RemoveLoginImpersonationRequest from '../com.alterian.ja.model/RemoveLoginImpersonationRequest';
import RemoveLoginUserMappingRequest from '../com.alterian.ja.model/RemoveLoginUserMappingRequest';
import SetLoginBrandDefaultRequest from '../com.alterian.ja.model/SetLoginBrandDefaultRequest';
import SetLoginUserMappingRequest from '../com.alterian.ja.model/SetLoginUserMappingRequest';

/**
* Brand service.
* @module api/BrandApi
* @version 6.35.0
*/
export default class BrandApi {

    /**
    * Constructs a new BrandApi. 
    * @alias module:api/BrandApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Allow a login to use the impersonation feature of GetBrandToken
     * Allow a login to use the impersonation feature of GetBrandToken
     * @param {module:com.alterian.ja.model/AddLoginImpersonationRequest} addLoginImpersonationRequest Allow a login to use the impersonation feature of GetBrandToken
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse} and HTTP response
     */
    addLoginImpersonationWithHttpInfo(addLoginImpersonationRequest) {
      let postBody = addLoginImpersonationRequest;
      // verify the required parameter 'addLoginImpersonationRequest' is set
      if (addLoginImpersonationRequest === undefined || addLoginImpersonationRequest === null) {
        throw new Error("Missing the required parameter 'addLoginImpersonationRequest' when calling addLoginImpersonation");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHChangePasswordDefaultResponse;
      return this.apiClient.callApi(
        '/AddLoginImpersonation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Allow a login to use the impersonation feature of GetBrandToken
     * Allow a login to use the impersonation feature of GetBrandToken
     * @param {module:com.alterian.ja.model/AddLoginImpersonationRequest} addLoginImpersonationRequest Allow a login to use the impersonation feature of GetBrandToken
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse}
     */
    addLoginImpersonation(addLoginImpersonationRequest) {
      return this.addLoginImpersonationWithHttpInfo(addLoginImpersonationRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replicates a user from the brand associated with the current token to all brands in BrandIds to which the token has access
     * Replicates a user from the brand associated with the current token to all brands in BrandIds to which the token has access
     * @param {module:com.alterian.ja.model/AddUserToBrandsRequest} addUserToBrandsRequest Replicates a user from the brand associated with the current token to all brands in BrandIds to which the token has access
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse} and HTTP response
     */
    addUserToBrandsWithHttpInfo(addUserToBrandsRequest) {
      let postBody = addUserToBrandsRequest;
      // verify the required parameter 'addUserToBrandsRequest' is set
      if (addUserToBrandsRequest === undefined || addUserToBrandsRequest === null) {
        throw new Error("Missing the required parameter 'addUserToBrandsRequest' when calling addUserToBrands");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHChangePasswordDefaultResponse;
      return this.apiClient.callApi(
        '/AddUserToBrands', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Replicates a user from the brand associated with the current token to all brands in BrandIds to which the token has access
     * Replicates a user from the brand associated with the current token to all brands in BrandIds to which the token has access
     * @param {module:com.alterian.ja.model/AddUserToBrandsRequest} addUserToBrandsRequest Replicates a user from the brand associated with the current token to all brands in BrandIds to which the token has access
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse}
     */
    addUserToBrands(addUserToBrandsRequest) {
      return this.addUserToBrandsWithHttpInfo(addUserToBrandsRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns back a token used to access the brand provided.
     * Returns back a token used to access the brand provided.
     * @param {module:com.alterian.ja.model/GetBrandTokenRequest} getBrandTokenRequest Returns back a token used to access the brand provided.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHCreateLoginDefaultResponse} and HTTP response
     */
    getBrandTokenWithHttpInfo(getBrandTokenRequest) {
      let postBody = getBrandTokenRequest;
      // verify the required parameter 'getBrandTokenRequest' is set
      if (getBrandTokenRequest === undefined || getBrandTokenRequest === null) {
        throw new Error("Missing the required parameter 'getBrandTokenRequest' when calling getBrandToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHCreateLoginDefaultResponse;
      return this.apiClient.callApi(
        '/GetBrandToken', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns back a token used to access the brand provided.
     * Returns back a token used to access the brand provided.
     * @param {module:com.alterian.ja.model/GetBrandTokenRequest} getBrandTokenRequest Returns back a token used to access the brand provided.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHCreateLoginDefaultResponse}
     */
    getBrandToken(getBrandTokenRequest) {
      return this.getBrandTokenWithHttpInfo(getBrandTokenRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns back a list of brands which this login can access
     * Returns back a list of brands which this login can access
     * @param {module:com.alterian.ja.model/GetBrandsRequest} getBrandsRequest Returns back a list of brands which this login can access
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/GetBrandsDefaultResponse} and HTTP response
     */
    getBrandsWithHttpInfo(getBrandsRequest) {
      let postBody = getBrandsRequest;
      // verify the required parameter 'getBrandsRequest' is set
      if (getBrandsRequest === undefined || getBrandsRequest === null) {
        throw new Error("Missing the required parameter 'getBrandsRequest' when calling getBrands");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetBrandsDefaultResponse;
      return this.apiClient.callApi(
        '/GetBrands', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns back a list of brands which this login can access
     * Returns back a list of brands which this login can access
     * @param {module:com.alterian.ja.model/GetBrandsRequest} getBrandsRequest Returns back a list of brands which this login can access
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/GetBrandsDefaultResponse}
     */
    getBrands(getBrandsRequest) {
      return this.getBrandsWithHttpInfo(getBrandsRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns back the brand default for the specified login
     * Returns back the brand default for the specified login
     * @param {module:com.alterian.ja.model/GetLoginBrandDefaultRequest} getLoginBrandDefaultRequest Returns back the brand default for the specified login
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/GetLoginBrandDefaultDefaultResponse} and HTTP response
     */
    getLoginBrandDefaultWithHttpInfo(getLoginBrandDefaultRequest) {
      let postBody = getLoginBrandDefaultRequest;
      // verify the required parameter 'getLoginBrandDefaultRequest' is set
      if (getLoginBrandDefaultRequest === undefined || getLoginBrandDefaultRequest === null) {
        throw new Error("Missing the required parameter 'getLoginBrandDefaultRequest' when calling getLoginBrandDefault");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetLoginBrandDefaultDefaultResponse;
      return this.apiClient.callApi(
        '/GetLoginBrandDefault', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns back the brand default for the specified login
     * Returns back the brand default for the specified login
     * @param {module:com.alterian.ja.model/GetLoginBrandDefaultRequest} getLoginBrandDefaultRequest Returns back the brand default for the specified login
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/GetLoginBrandDefaultDefaultResponse}
     */
    getLoginBrandDefault(getLoginBrandDefaultRequest) {
      return this.getLoginBrandDefaultWithHttpInfo(getLoginBrandDefaultRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Look in the system for a login\\user mapping which matches the search criteria.  Note, if you do not provide either the login id or user id, it will return back the mapping for the token's login
     * Look in the system for a login\\user mapping which matches the search criteria.  Note, if you do not provide either the login id or user id, it will return back the mapping for the token's login
     * @param {module:com.alterian.ja.model/GetLoginUserMappingRequest} getLoginUserMappingRequest Look in the system for a login\\user mapping which matches the search criteria.  Note, if you do not provide either the login id or user id, it will return back the mapping for the token's login
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/GetLoginUserMappingDefaultResponse} and HTTP response
     */
    getLoginUserMappingWithHttpInfo(getLoginUserMappingRequest) {
      let postBody = getLoginUserMappingRequest;
      // verify the required parameter 'getLoginUserMappingRequest' is set
      if (getLoginUserMappingRequest === undefined || getLoginUserMappingRequest === null) {
        throw new Error("Missing the required parameter 'getLoginUserMappingRequest' when calling getLoginUserMapping");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetLoginUserMappingDefaultResponse;
      return this.apiClient.callApi(
        '/GetLoginUserMapping', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Look in the system for a login\\user mapping which matches the search criteria.  Note, if you do not provide either the login id or user id, it will return back the mapping for the token's login
     * Look in the system for a login\\user mapping which matches the search criteria.  Note, if you do not provide either the login id or user id, it will return back the mapping for the token's login
     * @param {module:com.alterian.ja.model/GetLoginUserMappingRequest} getLoginUserMappingRequest Look in the system for a login\\user mapping which matches the search criteria.  Note, if you do not provide either the login id or user id, it will return back the mapping for the token's login
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/GetLoginUserMappingDefaultResponse}
     */
    getLoginUserMapping(getLoginUserMappingRequest) {
      return this.getLoginUserMappingWithHttpInfo(getLoginUserMappingRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Request details about a token.
     * Request details about a token.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/GetTokenDetailsDefaultResponse} and HTTP response
     */
    getTokenDetailsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetTokenDetailsDefaultResponse;
      return this.apiClient.callApi(
        '/GetTokenDetails', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Request details about a token.
     * Request details about a token.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/GetTokenDetailsDefaultResponse}
     */
    getTokenDetails() {
      return this.getTokenDetailsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Removes a login brand default
     * Removes a login brand default
     * @param {module:com.alterian.ja.model/RemoveLoginBrandDefaultRequest} removeLoginBrandDefaultRequest Removes a login brand default
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse} and HTTP response
     */
    removeLoginBrandDefaultWithHttpInfo(removeLoginBrandDefaultRequest) {
      let postBody = removeLoginBrandDefaultRequest;
      // verify the required parameter 'removeLoginBrandDefaultRequest' is set
      if (removeLoginBrandDefaultRequest === undefined || removeLoginBrandDefaultRequest === null) {
        throw new Error("Missing the required parameter 'removeLoginBrandDefaultRequest' when calling removeLoginBrandDefault");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHChangePasswordDefaultResponse;
      return this.apiClient.callApi(
        '/RemoveLoginBrandDefault', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Removes a login brand default
     * Removes a login brand default
     * @param {module:com.alterian.ja.model/RemoveLoginBrandDefaultRequest} removeLoginBrandDefaultRequest Removes a login brand default
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse}
     */
    removeLoginBrandDefault(removeLoginBrandDefaultRequest) {
      return this.removeLoginBrandDefaultWithHttpInfo(removeLoginBrandDefaultRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Stop allowing a login from using the impersonation feature of GetBrandToken
     * Stop allowing a login from using the impersonation feature of GetBrandToken
     * @param {module:com.alterian.ja.model/RemoveLoginImpersonationRequest} removeLoginImpersonationRequest Stop allowing a login from using the impersonation feature of GetBrandToken
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse} and HTTP response
     */
    removeLoginImpersonationWithHttpInfo(removeLoginImpersonationRequest) {
      let postBody = removeLoginImpersonationRequest;
      // verify the required parameter 'removeLoginImpersonationRequest' is set
      if (removeLoginImpersonationRequest === undefined || removeLoginImpersonationRequest === null) {
        throw new Error("Missing the required parameter 'removeLoginImpersonationRequest' when calling removeLoginImpersonation");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHChangePasswordDefaultResponse;
      return this.apiClient.callApi(
        '/RemoveLoginImpersonation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Stop allowing a login from using the impersonation feature of GetBrandToken
     * Stop allowing a login from using the impersonation feature of GetBrandToken
     * @param {module:com.alterian.ja.model/RemoveLoginImpersonationRequest} removeLoginImpersonationRequest Stop allowing a login from using the impersonation feature of GetBrandToken
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse}
     */
    removeLoginImpersonation(removeLoginImpersonationRequest) {
      return this.removeLoginImpersonationWithHttpInfo(removeLoginImpersonationRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove a login\\user mapping
     * Remove a login\\user mapping
     * @param {module:com.alterian.ja.model/RemoveLoginUserMappingRequest} removeLoginUserMappingRequest Remove a login\\user mapping
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse} and HTTP response
     */
    removeLoginUserMappingWithHttpInfo(removeLoginUserMappingRequest) {
      let postBody = removeLoginUserMappingRequest;
      // verify the required parameter 'removeLoginUserMappingRequest' is set
      if (removeLoginUserMappingRequest === undefined || removeLoginUserMappingRequest === null) {
        throw new Error("Missing the required parameter 'removeLoginUserMappingRequest' when calling removeLoginUserMapping");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHChangePasswordDefaultResponse;
      return this.apiClient.callApi(
        '/RemoveLoginUserMapping', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove a login\\user mapping
     * Remove a login\\user mapping
     * @param {module:com.alterian.ja.model/RemoveLoginUserMappingRequest} removeLoginUserMappingRequest Remove a login\\user mapping
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse}
     */
    removeLoginUserMapping(removeLoginUserMappingRequest) {
      return this.removeLoginUserMappingWithHttpInfo(removeLoginUserMappingRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Sets a login's brand to the default brand specified
     * Sets a login's brand to the default brand specified
     * @param {module:com.alterian.ja.model/SetLoginBrandDefaultRequest} setLoginBrandDefaultRequest Sets a login's brand to the default brand specified
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse} and HTTP response
     */
    setLoginBrandDefaultWithHttpInfo(setLoginBrandDefaultRequest) {
      let postBody = setLoginBrandDefaultRequest;
      // verify the required parameter 'setLoginBrandDefaultRequest' is set
      if (setLoginBrandDefaultRequest === undefined || setLoginBrandDefaultRequest === null) {
        throw new Error("Missing the required parameter 'setLoginBrandDefaultRequest' when calling setLoginBrandDefault");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHChangePasswordDefaultResponse;
      return this.apiClient.callApi(
        '/SetLoginBrandDefault', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Sets a login's brand to the default brand specified
     * Sets a login's brand to the default brand specified
     * @param {module:com.alterian.ja.model/SetLoginBrandDefaultRequest} setLoginBrandDefaultRequest Sets a login's brand to the default brand specified
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse}
     */
    setLoginBrandDefault(setLoginBrandDefaultRequest) {
      return this.setLoginBrandDefaultWithHttpInfo(setLoginBrandDefaultRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Sets the login\\user mapping
     * Sets the login\\user mapping
     * @param {module:com.alterian.ja.model/SetLoginUserMappingRequest} setLoginUserMappingRequest Sets the login\\user mapping
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse} and HTTP response
     */
    setLoginUserMappingWithHttpInfo(setLoginUserMappingRequest) {
      let postBody = setLoginUserMappingRequest;
      // verify the required parameter 'setLoginUserMappingRequest' is set
      if (setLoginUserMappingRequest === undefined || setLoginUserMappingRequest === null) {
        throw new Error("Missing the required parameter 'setLoginUserMappingRequest' when calling setLoginUserMapping");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHChangePasswordDefaultResponse;
      return this.apiClient.callApi(
        '/SetLoginUserMapping', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Sets the login\\user mapping
     * Sets the login\\user mapping
     * @param {module:com.alterian.ja.model/SetLoginUserMappingRequest} setLoginUserMappingRequest Sets the login\\user mapping
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse}
     */
    setLoginUserMapping(setLoginUserMappingRequest) {
      return this.setLoginUserMappingWithHttpInfo(setLoginUserMappingRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
