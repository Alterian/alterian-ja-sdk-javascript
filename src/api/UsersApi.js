/**
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AUTHChangePasswordDefaultResponse from '../com.alterian.ja.model/AUTHChangePasswordDefaultResponse';
import CopyUserRequest from '../com.alterian.ja.model/CopyUserRequest';
import CreateClientDefaultResponse from '../com.alterian.ja.model/CreateClientDefaultResponse';
import CreateUserRequest from '../com.alterian.ja.model/CreateUserRequest';
import DeleteUserReassignAssetsRequest from '../com.alterian.ja.model/DeleteUserReassignAssetsRequest';
import DeleteUserRequest from '../com.alterian.ja.model/DeleteUserRequest';
import GetClientSetsRequest from '../com.alterian.ja.model/GetClientSetsRequest';
import GetCulturesDefaultResponse from '../com.alterian.ja.model/GetCulturesDefaultResponse';
import GetCurrentUserDefaultResponse from '../com.alterian.ja.model/GetCurrentUserDefaultResponse';
import GetCurrentUserRequest from '../com.alterian.ja.model/GetCurrentUserRequest';
import GetTimeZonesDefaultResponse from '../com.alterian.ja.model/GetTimeZonesDefaultResponse';
import GetUserRequest from '../com.alterian.ja.model/GetUserRequest';
import GetUsersDefaultResponse from '../com.alterian.ja.model/GetUsersDefaultResponse';
import GetUsersForClientRequest from '../com.alterian.ja.model/GetUsersForClientRequest';
import GetUsersRequest from '../com.alterian.ja.model/GetUsersRequest';

/**
* Users service.
* @module api/UsersApi
* @version 6.35.0
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Copy a user
     * Copy a user
     * @param {module:com.alterian.ja.model/CopyUserRequest} copyUserRequest Copy a user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/CreateClientDefaultResponse} and HTTP response
     */
    copyUserWithHttpInfo(copyUserRequest) {
      let postBody = copyUserRequest;
      // verify the required parameter 'copyUserRequest' is set
      if (copyUserRequest === undefined || copyUserRequest === null) {
        throw new Error("Missing the required parameter 'copyUserRequest' when calling copyUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateClientDefaultResponse;
      return this.apiClient.callApi(
        '/CopyUser', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Copy a user
     * Copy a user
     * @param {module:com.alterian.ja.model/CopyUserRequest} copyUserRequest Copy a user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/CreateClientDefaultResponse}
     */
    copyUser(copyUserRequest) {
      return this.copyUserWithHttpInfo(copyUserRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add a new user to the specified @see(ALClient)
     * Add a new user to the specified @see(ALClient)
     * @param {module:com.alterian.ja.model/CreateUserRequest} createUserRequest Add a new user to the specified @see(ALClient)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/CreateClientDefaultResponse} and HTTP response
     */
    createUserWithHttpInfo(createUserRequest) {
      let postBody = createUserRequest;
      // verify the required parameter 'createUserRequest' is set
      if (createUserRequest === undefined || createUserRequest === null) {
        throw new Error("Missing the required parameter 'createUserRequest' when calling createUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateClientDefaultResponse;
      return this.apiClient.callApi(
        '/CreateUser', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add a new user to the specified @see(ALClient)
     * Add a new user to the specified @see(ALClient)
     * @param {module:com.alterian.ja.model/CreateUserRequest} createUserRequest Add a new user to the specified @see(ALClient)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/CreateClientDefaultResponse}
     */
    createUser(createUserRequest) {
      return this.createUserWithHttpInfo(createUserRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a user
     * Delete a user
     * @param {module:com.alterian.ja.model/DeleteUserRequest} deleteUserRequest Delete a user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse} and HTTP response
     */
    deleteUserWithHttpInfo(deleteUserRequest) {
      let postBody = deleteUserRequest;
      // verify the required parameter 'deleteUserRequest' is set
      if (deleteUserRequest === undefined || deleteUserRequest === null) {
        throw new Error("Missing the required parameter 'deleteUserRequest' when calling deleteUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHChangePasswordDefaultResponse;
      return this.apiClient.callApi(
        '/DeleteUser', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a user
     * Delete a user
     * @param {module:com.alterian.ja.model/DeleteUserRequest} deleteUserRequest Delete a user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse}
     */
    deleteUser(deleteUserRequest) {
      return this.deleteUserWithHttpInfo(deleteUserRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes a user and reassigns their documents, files and folders to another user
     * Deletes a user and reassigns their documents, files and folders to another user
     * @param {module:com.alterian.ja.model/DeleteUserReassignAssetsRequest} deleteUserReassignAssetsRequest Deletes a user and reassigns their documents, files and folders to another user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse} and HTTP response
     */
    deleteUserReassignAssetsWithHttpInfo(deleteUserReassignAssetsRequest) {
      let postBody = deleteUserReassignAssetsRequest;
      // verify the required parameter 'deleteUserReassignAssetsRequest' is set
      if (deleteUserReassignAssetsRequest === undefined || deleteUserReassignAssetsRequest === null) {
        throw new Error("Missing the required parameter 'deleteUserReassignAssetsRequest' when calling deleteUserReassignAssets");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHChangePasswordDefaultResponse;
      return this.apiClient.callApi(
        '/DeleteUserReassignAssets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes a user and reassigns their documents, files and folders to another user
     * Deletes a user and reassigns their documents, files and folders to another user
     * @param {module:com.alterian.ja.model/DeleteUserReassignAssetsRequest} deleteUserReassignAssetsRequest Deletes a user and reassigns their documents, files and folders to another user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse}
     */
    deleteUserReassignAssets(deleteUserReassignAssetsRequest) {
      return this.deleteUserReassignAssetsWithHttpInfo(deleteUserReassignAssetsRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a list of cultures [for use with the @see(ALUser) ]
     * Get a list of cultures [for use with the @see(ALUser) ]
     * @param {module:com.alterian.ja.model/GetClientSetsRequest} getClientSetsRequest Get a list of cultures [for use with the @see(ALUser) ]
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/GetCulturesDefaultResponse} and HTTP response
     */
    getCulturesWithHttpInfo(getClientSetsRequest) {
      let postBody = getClientSetsRequest;
      // verify the required parameter 'getClientSetsRequest' is set
      if (getClientSetsRequest === undefined || getClientSetsRequest === null) {
        throw new Error("Missing the required parameter 'getClientSetsRequest' when calling getCultures");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetCulturesDefaultResponse;
      return this.apiClient.callApi(
        '/GetCultures', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a list of cultures [for use with the @see(ALUser) ]
     * Get a list of cultures [for use with the @see(ALUser) ]
     * @param {module:com.alterian.ja.model/GetClientSetsRequest} getClientSetsRequest Get a list of cultures [for use with the @see(ALUser) ]
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/GetCulturesDefaultResponse}
     */
    getCultures(getClientSetsRequest) {
      return this.getCulturesWithHttpInfo(getClientSetsRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Return back the current user [based upon their token]
     * Return back the current user [based upon their token]
     * @param {module:com.alterian.ja.model/GetCurrentUserRequest} getCurrentUserRequest Return back the current user [based upon their token]
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/GetCurrentUserDefaultResponse} and HTTP response
     */
    getCurrentUserWithHttpInfo(getCurrentUserRequest) {
      let postBody = getCurrentUserRequest;
      // verify the required parameter 'getCurrentUserRequest' is set
      if (getCurrentUserRequest === undefined || getCurrentUserRequest === null) {
        throw new Error("Missing the required parameter 'getCurrentUserRequest' when calling getCurrentUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetCurrentUserDefaultResponse;
      return this.apiClient.callApi(
        '/GetCurrentUser', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Return back the current user [based upon their token]
     * Return back the current user [based upon their token]
     * @param {module:com.alterian.ja.model/GetCurrentUserRequest} getCurrentUserRequest Return back the current user [based upon their token]
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/GetCurrentUserDefaultResponse}
     */
    getCurrentUser(getCurrentUserRequest) {
      return this.getCurrentUserWithHttpInfo(getCurrentUserRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a list of the timezones [for use with the @see(ALUser) ]
     * Get a list of the timezones [for use with the @see(ALUser) ]
     * @param {module:com.alterian.ja.model/GetClientSetsRequest} getClientSetsRequest Get a list of the timezones [for use with the @see(ALUser) ]
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/GetTimeZonesDefaultResponse} and HTTP response
     */
    getTimeZonesWithHttpInfo(getClientSetsRequest) {
      let postBody = getClientSetsRequest;
      // verify the required parameter 'getClientSetsRequest' is set
      if (getClientSetsRequest === undefined || getClientSetsRequest === null) {
        throw new Error("Missing the required parameter 'getClientSetsRequest' when calling getTimeZones");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetTimeZonesDefaultResponse;
      return this.apiClient.callApi(
        '/GetTimeZones', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a list of the timezones [for use with the @see(ALUser) ]
     * Get a list of the timezones [for use with the @see(ALUser) ]
     * @param {module:com.alterian.ja.model/GetClientSetsRequest} getClientSetsRequest Get a list of the timezones [for use with the @see(ALUser) ]
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/GetTimeZonesDefaultResponse}
     */
    getTimeZones(getClientSetsRequest) {
      return this.getTimeZonesWithHttpInfo(getClientSetsRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Given a UserID, get the rest of the details for that user.
     * Given a UserID, get the rest of the details for that user.
     * @param {module:com.alterian.ja.model/GetUserRequest} getUserRequest Given a UserID, get the rest of the details for that user.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/GetCurrentUserDefaultResponse} and HTTP response
     */
    getUserWithHttpInfo(getUserRequest) {
      let postBody = getUserRequest;
      // verify the required parameter 'getUserRequest' is set
      if (getUserRequest === undefined || getUserRequest === null) {
        throw new Error("Missing the required parameter 'getUserRequest' when calling getUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetCurrentUserDefaultResponse;
      return this.apiClient.callApi(
        '/GetUser', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Given a UserID, get the rest of the details for that user.
     * Given a UserID, get the rest of the details for that user.
     * @param {module:com.alterian.ja.model/GetUserRequest} getUserRequest Given a UserID, get the rest of the details for that user.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/GetCurrentUserDefaultResponse}
     */
    getUser(getUserRequest) {
      return this.getUserWithHttpInfo(getUserRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List the users within the current @see(ALClient), optionally filtering the set returned.
     * List the users within the current @see(ALClient), optionally filtering the set returned.
     * @param {module:com.alterian.ja.model/GetUsersRequest} getUsersRequest List the users within the current @see(ALClient), optionally filtering the set returned.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/GetUsersDefaultResponse} and HTTP response
     */
    getUsersWithHttpInfo(getUsersRequest) {
      let postBody = getUsersRequest;
      // verify the required parameter 'getUsersRequest' is set
      if (getUsersRequest === undefined || getUsersRequest === null) {
        throw new Error("Missing the required parameter 'getUsersRequest' when calling getUsers");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetUsersDefaultResponse;
      return this.apiClient.callApi(
        '/GetUsers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List the users within the current @see(ALClient), optionally filtering the set returned.
     * List the users within the current @see(ALClient), optionally filtering the set returned.
     * @param {module:com.alterian.ja.model/GetUsersRequest} getUsersRequest List the users within the current @see(ALClient), optionally filtering the set returned.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/GetUsersDefaultResponse}
     */
    getUsers(getUsersRequest) {
      return this.getUsersWithHttpInfo(getUsersRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List the users within the specified client, optionally filtering the set returned.
     * List the users within the specified client, optionally filtering the set returned.
     * @param {module:com.alterian.ja.model/GetUsersForClientRequest} getUsersForClientRequest List the users within the specified client, optionally filtering the set returned.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/GetUsersDefaultResponse} and HTTP response
     */
    getUsersForClientWithHttpInfo(getUsersForClientRequest) {
      let postBody = getUsersForClientRequest;
      // verify the required parameter 'getUsersForClientRequest' is set
      if (getUsersForClientRequest === undefined || getUsersForClientRequest === null) {
        throw new Error("Missing the required parameter 'getUsersForClientRequest' when calling getUsersForClient");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetUsersDefaultResponse;
      return this.apiClient.callApi(
        '/GetUsersForClient', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List the users within the specified client, optionally filtering the set returned.
     * List the users within the specified client, optionally filtering the set returned.
     * @param {module:com.alterian.ja.model/GetUsersForClientRequest} getUsersForClientRequest List the users within the specified client, optionally filtering the set returned.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/GetUsersDefaultResponse}
     */
    getUsersForClient(getUsersForClientRequest) {
      return this.getUsersForClientWithHttpInfo(getUsersForClientRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Given an existing @see(ALUser) object save it to the database             Note that the object will normally have been retrieved by @see(GetUser), and that only fields which are set will be updated in the database
     * Given an existing @see(ALUser) object save it to the database             Note that the object will normally have been retrieved by @see(GetUser), and that only fields which are set will be updated in the database
     * @param {module:com.alterian.ja.model/CreateUserRequest} createUserRequest Given an existing @see(ALUser) object save it to the database             Note that the object will normally have been retrieved by @see(GetUser), and that only fields which are set will be updated in the database
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse} and HTTP response
     */
    updateUserWithHttpInfo(createUserRequest) {
      let postBody = createUserRequest;
      // verify the required parameter 'createUserRequest' is set
      if (createUserRequest === undefined || createUserRequest === null) {
        throw new Error("Missing the required parameter 'createUserRequest' when calling updateUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AUTHChangePasswordDefaultResponse;
      return this.apiClient.callApi(
        '/UpdateUser', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Given an existing @see(ALUser) object save it to the database             Note that the object will normally have been retrieved by @see(GetUser), and that only fields which are set will be updated in the database
     * Given an existing @see(ALUser) object save it to the database             Note that the object will normally have been retrieved by @see(GetUser), and that only fields which are set will be updated in the database
     * @param {module:com.alterian.ja.model/CreateUserRequest} createUserRequest Given an existing @see(ALUser) object save it to the database             Note that the object will normally have been retrieved by @see(GetUser), and that only fields which are set will be updated in the database
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.ja.model/AUTHChangePasswordDefaultResponse}
     */
    updateUser(createUserRequest) {
      return this.updateUserWithHttpInfo(createUserRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
